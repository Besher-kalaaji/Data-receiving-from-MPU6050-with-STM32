
MPU_Receive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057c0  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  08005948  08005948  00006948  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b58  08005b58  00007070  2**0
                  CONTENTS
  4 .ARM          00000000  08005b58  08005b58  00007070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005b58  08005b58  00007070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b58  08005b58  00006b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005b5c  08005b5c  00006b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08005b60  00007000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007070  2**0
                  CONTENTS
 10 .bss          0000021c  20000070  20000070  00007070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000028c  2000028c  00007070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007818  00000000  00000000  000070a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001621  00000000  00000000  0000e8b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000720  00000000  00000000  0000fee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000565  00000000  00000000  00010600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a0fa  00000000  00000000  00010b65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a534  00000000  00000000  0002ac5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00097880  00000000  00000000  00035193  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000cca13  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002270  00000000  00000000  000cca58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  000cecc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005930 	.word	0x08005930

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08005930 	.word	0x08005930

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  HAL_Init();
 8000b94:	f000 fda2 	bl	80016dc <HAL_Init>
  SystemClock_Config();
 8000b98:	f000 fc02 	bl	80013a0 <SystemClock_Config>
  MX_GPIO_Init();
 8000b9c:	f000 fc94 	bl	80014c8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ba0:	f000 fc52 	bl	8001448 <MX_I2C1_Init>

  /* Initialize MPU6050 */
  MPU6050_Init();
 8000ba4:	f000 f82e 	bl	8000c04 <MPU6050_Init>

  /* Gyro calibration */
  MPU6050_Read_Gyro_Calibration();
 8000ba8:	f000 f866 	bl	8000c78 <MPU6050_Read_Gyro_Calibration>

  /* Main loop */
  while (1)
  {
    MPU6050_Read_Sensor_Data();
 8000bac:	f000 f918 	bl	8000de0 <MPU6050_Read_Sensor_Data>
    MPU6050_Calculate_Angles();
 8000bb0:	f000 f9fe 	bl	8000fb0 <MPU6050_Calculate_Angles>

    /* 4-second delay */
    while ((HAL_GetTick() - prevtime) * 1000 < 4000);
 8000bb4:	bf00      	nop
 8000bb6:	f000 fdeb 	bl	8001790 <HAL_GetTick>
 8000bba:	ee07 0a90 	vmov	s15, r0
 8000bbe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf8 <main+0x68>)
 8000bc4:	edd3 7a00 	vldr	s15, [r3]
 8000bc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bcc:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8000bfc <main+0x6c>
 8000bd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bd4:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8000c00 <main+0x70>
 8000bd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000be0:	d4e9      	bmi.n	8000bb6 <main+0x26>
    prevtime = HAL_GetTick();
 8000be2:	f000 fdd5 	bl	8001790 <HAL_GetTick>
 8000be6:	ee07 0a90 	vmov	s15, r0
 8000bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bee:	4b02      	ldr	r3, [pc, #8]	@ (8000bf8 <main+0x68>)
 8000bf0:	edc3 7a00 	vstr	s15, [r3]
    MPU6050_Read_Sensor_Data();
 8000bf4:	e7da      	b.n	8000bac <main+0x1c>
 8000bf6:	bf00      	nop
 8000bf8:	2000013c 	.word	0x2000013c
 8000bfc:	447a0000 	.word	0x447a0000
 8000c00:	457a0000 	.word	0x457a0000

08000c04 <MPU6050_Init>:
/**
  * @brief Initializes the MPU6050 sensor.
  * @retval None
  */
void MPU6050_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af04      	add	r7, sp, #16
  // PWR_MGMT_1 CNFG
  data = 0x00;
 8000c0a:	4b19      	ldr	r3, [pc, #100]	@ (8000c70 <MPU6050_Init+0x6c>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &data, 1, HAL_MAX_DELAY);
 8000c10:	f04f 33ff 	mov.w	r3, #4294967295
 8000c14:	9302      	str	r3, [sp, #8]
 8000c16:	2301      	movs	r3, #1
 8000c18:	9301      	str	r3, [sp, #4]
 8000c1a:	4b15      	ldr	r3, [pc, #84]	@ (8000c70 <MPU6050_Init+0x6c>)
 8000c1c:	9300      	str	r3, [sp, #0]
 8000c1e:	2301      	movs	r3, #1
 8000c20:	226b      	movs	r2, #107	@ 0x6b
 8000c22:	21d0      	movs	r1, #208	@ 0xd0
 8000c24:	4813      	ldr	r0, [pc, #76]	@ (8000c74 <MPU6050_Init+0x70>)
 8000c26:	f001 fafd 	bl	8002224 <HAL_I2C_Mem_Write>
  // GYRO_CNFG
  data = 0x08;
 8000c2a:	4b11      	ldr	r3, [pc, #68]	@ (8000c70 <MPU6050_Init+0x6c>)
 8000c2c:	2208      	movs	r2, #8
 8000c2e:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CNFG_REG, 1, &data, 1, HAL_MAX_DELAY);
 8000c30:	f04f 33ff 	mov.w	r3, #4294967295
 8000c34:	9302      	str	r3, [sp, #8]
 8000c36:	2301      	movs	r3, #1
 8000c38:	9301      	str	r3, [sp, #4]
 8000c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000c70 <MPU6050_Init+0x6c>)
 8000c3c:	9300      	str	r3, [sp, #0]
 8000c3e:	2301      	movs	r3, #1
 8000c40:	221b      	movs	r2, #27
 8000c42:	21d0      	movs	r1, #208	@ 0xd0
 8000c44:	480b      	ldr	r0, [pc, #44]	@ (8000c74 <MPU6050_Init+0x70>)
 8000c46:	f001 faed 	bl	8002224 <HAL_I2C_Mem_Write>
  // ACC_CNFG
  data = 0x10;
 8000c4a:	4b09      	ldr	r3, [pc, #36]	@ (8000c70 <MPU6050_Init+0x6c>)
 8000c4c:	2210      	movs	r2, #16
 8000c4e:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACC_CNFG_REG, 1, &data, 1, HAL_MAX_DELAY);
 8000c50:	f04f 33ff 	mov.w	r3, #4294967295
 8000c54:	9302      	str	r3, [sp, #8]
 8000c56:	2301      	movs	r3, #1
 8000c58:	9301      	str	r3, [sp, #4]
 8000c5a:	4b05      	ldr	r3, [pc, #20]	@ (8000c70 <MPU6050_Init+0x6c>)
 8000c5c:	9300      	str	r3, [sp, #0]
 8000c5e:	2301      	movs	r3, #1
 8000c60:	221c      	movs	r2, #28
 8000c62:	21d0      	movs	r1, #208	@ 0xd0
 8000c64:	4803      	ldr	r0, [pc, #12]	@ (8000c74 <MPU6050_Init+0x70>)
 8000c66:	f001 fadd 	bl	8002224 <HAL_I2C_Mem_Write>
}
 8000c6a:	bf00      	nop
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	200000e0 	.word	0x200000e0
 8000c74:	2000008c 	.word	0x2000008c

08000c78 <MPU6050_Read_Gyro_Calibration>:
/**
  * @brief Reads the gyro calibration values from MPU6050.
  * @retval None
  */
void MPU6050_Read_Gyro_Calibration(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af02      	add	r7, sp, #8
  for (i = 0; i < 2000; i++)
 8000c7e:	4b4e      	ldr	r3, [pc, #312]	@ (8000db8 <MPU6050_Read_Gyro_Calibration+0x140>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	e071      	b.n	8000d6a <MPU6050_Read_Gyro_Calibration+0xf2>
  {
    prevtime2 = time2;
 8000c86:	4b4d      	ldr	r3, [pc, #308]	@ (8000dbc <MPU6050_Read_Gyro_Calibration+0x144>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a4d      	ldr	r2, [pc, #308]	@ (8000dc0 <MPU6050_Read_Gyro_Calibration+0x148>)
 8000c8c:	6013      	str	r3, [r2, #0]
    time2 = HAL_GetTick();
 8000c8e:	f000 fd7f 	bl	8001790 <HAL_GetTick>
 8000c92:	ee07 0a90 	vmov	s15, r0
 8000c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c9a:	4b48      	ldr	r3, [pc, #288]	@ (8000dbc <MPU6050_Read_Gyro_Calibration+0x144>)
 8000c9c:	edc3 7a00 	vstr	s15, [r3]
    elapsedtime2 = (time2 - prevtime2) * 1000;
 8000ca0:	4b46      	ldr	r3, [pc, #280]	@ (8000dbc <MPU6050_Read_Gyro_Calibration+0x144>)
 8000ca2:	ed93 7a00 	vldr	s14, [r3]
 8000ca6:	4b46      	ldr	r3, [pc, #280]	@ (8000dc0 <MPU6050_Read_Gyro_Calibration+0x148>)
 8000ca8:	edd3 7a00 	vldr	s15, [r3]
 8000cac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000cb0:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8000dc4 <MPU6050_Read_Gyro_Calibration+0x14c>
 8000cb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cb8:	4b43      	ldr	r3, [pc, #268]	@ (8000dc8 <MPU6050_Read_Gyro_Calibration+0x150>)
 8000cba:	edc3 7a00 	vstr	s15, [r3]

    cuffer[0] = 0x43;
 8000cbe:	4b43      	ldr	r3, [pc, #268]	@ (8000dcc <MPU6050_Read_Gyro_Calibration+0x154>)
 8000cc0:	2243      	movs	r2, #67	@ 0x43
 8000cc2:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR, cuffer, 1, HAL_MAX_DELAY);
 8000cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc8:	9300      	str	r3, [sp, #0]
 8000cca:	2301      	movs	r3, #1
 8000ccc:	4a3f      	ldr	r2, [pc, #252]	@ (8000dcc <MPU6050_Read_Gyro_Calibration+0x154>)
 8000cce:	21d0      	movs	r1, #208	@ 0xd0
 8000cd0:	483f      	ldr	r0, [pc, #252]	@ (8000dd0 <MPU6050_Read_Gyro_Calibration+0x158>)
 8000cd2:	f001 f899 	bl	8001e08 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, MPU6050_ADDR, cuffer, 6, HAL_MAX_DELAY);
 8000cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cda:	9300      	str	r3, [sp, #0]
 8000cdc:	2306      	movs	r3, #6
 8000cde:	4a3b      	ldr	r2, [pc, #236]	@ (8000dcc <MPU6050_Read_Gyro_Calibration+0x154>)
 8000ce0:	21d0      	movs	r1, #208	@ 0xd0
 8000ce2:	483b      	ldr	r0, [pc, #236]	@ (8000dd0 <MPU6050_Read_Gyro_Calibration+0x158>)
 8000ce4:	f001 f9a8 	bl	8002038 <HAL_I2C_Master_Receive>

    gyro_raw[0] += (cuffer[0] << 8 | cuffer[1]);
 8000ce8:	4b3a      	ldr	r3, [pc, #232]	@ (8000dd4 <MPU6050_Read_Gyro_Calibration+0x15c>)
 8000cea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cee:	b29a      	uxth	r2, r3
 8000cf0:	4b36      	ldr	r3, [pc, #216]	@ (8000dcc <MPU6050_Read_Gyro_Calibration+0x154>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	021b      	lsls	r3, r3, #8
 8000cf6:	b219      	sxth	r1, r3
 8000cf8:	4b34      	ldr	r3, [pc, #208]	@ (8000dcc <MPU6050_Read_Gyro_Calibration+0x154>)
 8000cfa:	785b      	ldrb	r3, [r3, #1]
 8000cfc:	b21b      	sxth	r3, r3
 8000cfe:	430b      	orrs	r3, r1
 8000d00:	b21b      	sxth	r3, r3
 8000d02:	b29b      	uxth	r3, r3
 8000d04:	4413      	add	r3, r2
 8000d06:	b29b      	uxth	r3, r3
 8000d08:	b21a      	sxth	r2, r3
 8000d0a:	4b32      	ldr	r3, [pc, #200]	@ (8000dd4 <MPU6050_Read_Gyro_Calibration+0x15c>)
 8000d0c:	801a      	strh	r2, [r3, #0]
    gyro_raw[1] += (cuffer[2] << 8 | cuffer[3]);
 8000d0e:	4b31      	ldr	r3, [pc, #196]	@ (8000dd4 <MPU6050_Read_Gyro_Calibration+0x15c>)
 8000d10:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000d14:	b29a      	uxth	r2, r3
 8000d16:	4b2d      	ldr	r3, [pc, #180]	@ (8000dcc <MPU6050_Read_Gyro_Calibration+0x154>)
 8000d18:	789b      	ldrb	r3, [r3, #2]
 8000d1a:	021b      	lsls	r3, r3, #8
 8000d1c:	b219      	sxth	r1, r3
 8000d1e:	4b2b      	ldr	r3, [pc, #172]	@ (8000dcc <MPU6050_Read_Gyro_Calibration+0x154>)
 8000d20:	78db      	ldrb	r3, [r3, #3]
 8000d22:	b21b      	sxth	r3, r3
 8000d24:	430b      	orrs	r3, r1
 8000d26:	b21b      	sxth	r3, r3
 8000d28:	b29b      	uxth	r3, r3
 8000d2a:	4413      	add	r3, r2
 8000d2c:	b29b      	uxth	r3, r3
 8000d2e:	b21a      	sxth	r2, r3
 8000d30:	4b28      	ldr	r3, [pc, #160]	@ (8000dd4 <MPU6050_Read_Gyro_Calibration+0x15c>)
 8000d32:	805a      	strh	r2, [r3, #2]
    gyro_raw[2] += (cuffer[4] << 8 | cuffer[5]);
 8000d34:	4b27      	ldr	r3, [pc, #156]	@ (8000dd4 <MPU6050_Read_Gyro_Calibration+0x15c>)
 8000d36:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000d3a:	b29a      	uxth	r2, r3
 8000d3c:	4b23      	ldr	r3, [pc, #140]	@ (8000dcc <MPU6050_Read_Gyro_Calibration+0x154>)
 8000d3e:	791b      	ldrb	r3, [r3, #4]
 8000d40:	021b      	lsls	r3, r3, #8
 8000d42:	b219      	sxth	r1, r3
 8000d44:	4b21      	ldr	r3, [pc, #132]	@ (8000dcc <MPU6050_Read_Gyro_Calibration+0x154>)
 8000d46:	795b      	ldrb	r3, [r3, #5]
 8000d48:	b21b      	sxth	r3, r3
 8000d4a:	430b      	orrs	r3, r1
 8000d4c:	b21b      	sxth	r3, r3
 8000d4e:	b29b      	uxth	r3, r3
 8000d50:	4413      	add	r3, r2
 8000d52:	b29b      	uxth	r3, r3
 8000d54:	b21a      	sxth	r2, r3
 8000d56:	4b1f      	ldr	r3, [pc, #124]	@ (8000dd4 <MPU6050_Read_Gyro_Calibration+0x15c>)
 8000d58:	809a      	strh	r2, [r3, #4]

    HAL_Delay(3);
 8000d5a:	2003      	movs	r0, #3
 8000d5c:	f000 fd24 	bl	80017a8 <HAL_Delay>
  for (i = 0; i < 2000; i++)
 8000d60:	4b15      	ldr	r3, [pc, #84]	@ (8000db8 <MPU6050_Read_Gyro_Calibration+0x140>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	3301      	adds	r3, #1
 8000d66:	4a14      	ldr	r2, [pc, #80]	@ (8000db8 <MPU6050_Read_Gyro_Calibration+0x140>)
 8000d68:	6013      	str	r3, [r2, #0]
 8000d6a:	4b13      	ldr	r3, [pc, #76]	@ (8000db8 <MPU6050_Read_Gyro_Calibration+0x140>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000d72:	db88      	blt.n	8000c86 <MPU6050_Read_Gyro_Calibration+0xe>
  }

  gyro_cal[0] /= 2000;
 8000d74:	4b18      	ldr	r3, [pc, #96]	@ (8000dd8 <MPU6050_Read_Gyro_Calibration+0x160>)
 8000d76:	ed93 7a00 	vldr	s14, [r3]
 8000d7a:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8000ddc <MPU6050_Read_Gyro_Calibration+0x164>
 8000d7e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d82:	4b15      	ldr	r3, [pc, #84]	@ (8000dd8 <MPU6050_Read_Gyro_Calibration+0x160>)
 8000d84:	edc3 7a00 	vstr	s15, [r3]
  gyro_cal[1] /= 2000;
 8000d88:	4b13      	ldr	r3, [pc, #76]	@ (8000dd8 <MPU6050_Read_Gyro_Calibration+0x160>)
 8000d8a:	ed93 7a01 	vldr	s14, [r3, #4]
 8000d8e:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8000ddc <MPU6050_Read_Gyro_Calibration+0x164>
 8000d92:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d96:	4b10      	ldr	r3, [pc, #64]	@ (8000dd8 <MPU6050_Read_Gyro_Calibration+0x160>)
 8000d98:	edc3 7a01 	vstr	s15, [r3, #4]
  gyro_cal[2] /= 2000;
 8000d9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd8 <MPU6050_Read_Gyro_Calibration+0x160>)
 8000d9e:	ed93 7a02 	vldr	s14, [r3, #8]
 8000da2:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8000ddc <MPU6050_Read_Gyro_Calibration+0x164>
 8000da6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000daa:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd8 <MPU6050_Read_Gyro_Calibration+0x160>)
 8000dac:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000138 	.word	0x20000138
 8000dbc:	20000144 	.word	0x20000144
 8000dc0:	20000140 	.word	0x20000140
 8000dc4:	447a0000 	.word	0x447a0000
 8000dc8:	20000148 	.word	0x20000148
 8000dcc:	200000f0 	.word	0x200000f0
 8000dd0:	2000008c 	.word	0x2000008c
 8000dd4:	200000f8 	.word	0x200000f8
 8000dd8:	20000108 	.word	0x20000108
 8000ddc:	44fa0000 	.word	0x44fa0000

08000de0 <MPU6050_Read_Sensor_Data>:
/**
  * @brief Reads sensor data from MPU6050 (acceleration, gyro, and temperature).
  * @retval None
  */
void MPU6050_Read_Sensor_Data(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af02      	add	r7, sp, #8
  // Read accelerometer data
  tuffer[0] = 0x3B;
 8000de6:	4b68      	ldr	r3, [pc, #416]	@ (8000f88 <MPU6050_Read_Sensor_Data+0x1a8>)
 8000de8:	223b      	movs	r2, #59	@ 0x3b
 8000dea:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR, tuffer, 1, HAL_MAX_DELAY);
 8000dec:	f04f 33ff 	mov.w	r3, #4294967295
 8000df0:	9300      	str	r3, [sp, #0]
 8000df2:	2301      	movs	r3, #1
 8000df4:	4a64      	ldr	r2, [pc, #400]	@ (8000f88 <MPU6050_Read_Sensor_Data+0x1a8>)
 8000df6:	21d0      	movs	r1, #208	@ 0xd0
 8000df8:	4864      	ldr	r0, [pc, #400]	@ (8000f8c <MPU6050_Read_Sensor_Data+0x1ac>)
 8000dfa:	f001 f805 	bl	8001e08 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, MPU6050_ADDR, tuffer, 6, HAL_MAX_DELAY);
 8000dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000e02:	9300      	str	r3, [sp, #0]
 8000e04:	2306      	movs	r3, #6
 8000e06:	4a60      	ldr	r2, [pc, #384]	@ (8000f88 <MPU6050_Read_Sensor_Data+0x1a8>)
 8000e08:	21d0      	movs	r1, #208	@ 0xd0
 8000e0a:	4860      	ldr	r0, [pc, #384]	@ (8000f8c <MPU6050_Read_Sensor_Data+0x1ac>)
 8000e0c:	f001 f914 	bl	8002038 <HAL_I2C_Master_Receive>

  acc_raw[0] = (tuffer[0] << 8 | tuffer[1]);
 8000e10:	4b5d      	ldr	r3, [pc, #372]	@ (8000f88 <MPU6050_Read_Sensor_Data+0x1a8>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	021b      	lsls	r3, r3, #8
 8000e16:	b21a      	sxth	r2, r3
 8000e18:	4b5b      	ldr	r3, [pc, #364]	@ (8000f88 <MPU6050_Read_Sensor_Data+0x1a8>)
 8000e1a:	785b      	ldrb	r3, [r3, #1]
 8000e1c:	b21b      	sxth	r3, r3
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	b21a      	sxth	r2, r3
 8000e22:	4b5b      	ldr	r3, [pc, #364]	@ (8000f90 <MPU6050_Read_Sensor_Data+0x1b0>)
 8000e24:	801a      	strh	r2, [r3, #0]
  acc_raw[1] = (tuffer[2] << 8 | tuffer[3]);
 8000e26:	4b58      	ldr	r3, [pc, #352]	@ (8000f88 <MPU6050_Read_Sensor_Data+0x1a8>)
 8000e28:	789b      	ldrb	r3, [r3, #2]
 8000e2a:	021b      	lsls	r3, r3, #8
 8000e2c:	b21a      	sxth	r2, r3
 8000e2e:	4b56      	ldr	r3, [pc, #344]	@ (8000f88 <MPU6050_Read_Sensor_Data+0x1a8>)
 8000e30:	78db      	ldrb	r3, [r3, #3]
 8000e32:	b21b      	sxth	r3, r3
 8000e34:	4313      	orrs	r3, r2
 8000e36:	b21a      	sxth	r2, r3
 8000e38:	4b55      	ldr	r3, [pc, #340]	@ (8000f90 <MPU6050_Read_Sensor_Data+0x1b0>)
 8000e3a:	805a      	strh	r2, [r3, #2]
  acc_raw[2] = (tuffer[4] << 8 | tuffer[5]);
 8000e3c:	4b52      	ldr	r3, [pc, #328]	@ (8000f88 <MPU6050_Read_Sensor_Data+0x1a8>)
 8000e3e:	791b      	ldrb	r3, [r3, #4]
 8000e40:	021b      	lsls	r3, r3, #8
 8000e42:	b21a      	sxth	r2, r3
 8000e44:	4b50      	ldr	r3, [pc, #320]	@ (8000f88 <MPU6050_Read_Sensor_Data+0x1a8>)
 8000e46:	795b      	ldrb	r3, [r3, #5]
 8000e48:	b21b      	sxth	r3, r3
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	b21a      	sxth	r2, r3
 8000e4e:	4b50      	ldr	r3, [pc, #320]	@ (8000f90 <MPU6050_Read_Sensor_Data+0x1b0>)
 8000e50:	809a      	strh	r2, [r3, #4]

  // Read temperature data
  buffer[0] = 0x41;
 8000e52:	4b50      	ldr	r3, [pc, #320]	@ (8000f94 <MPU6050_Read_Sensor_Data+0x1b4>)
 8000e54:	2241      	movs	r2, #65	@ 0x41
 8000e56:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR, buffer, 1, HAL_MAX_DELAY);
 8000e58:	f04f 33ff 	mov.w	r3, #4294967295
 8000e5c:	9300      	str	r3, [sp, #0]
 8000e5e:	2301      	movs	r3, #1
 8000e60:	4a4c      	ldr	r2, [pc, #304]	@ (8000f94 <MPU6050_Read_Sensor_Data+0x1b4>)
 8000e62:	21d0      	movs	r1, #208	@ 0xd0
 8000e64:	4849      	ldr	r0, [pc, #292]	@ (8000f8c <MPU6050_Read_Sensor_Data+0x1ac>)
 8000e66:	f000 ffcf 	bl	8001e08 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, MPU6050_ADDR, buffer, 2, HAL_MAX_DELAY);
 8000e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e6e:	9300      	str	r3, [sp, #0]
 8000e70:	2302      	movs	r3, #2
 8000e72:	4a48      	ldr	r2, [pc, #288]	@ (8000f94 <MPU6050_Read_Sensor_Data+0x1b4>)
 8000e74:	21d0      	movs	r1, #208	@ 0xd0
 8000e76:	4845      	ldr	r0, [pc, #276]	@ (8000f8c <MPU6050_Read_Sensor_Data+0x1ac>)
 8000e78:	f001 f8de 	bl	8002038 <HAL_I2C_Master_Receive>

  raw_temp = (buffer[0] << 8 | buffer[1]);
 8000e7c:	4b45      	ldr	r3, [pc, #276]	@ (8000f94 <MPU6050_Read_Sensor_Data+0x1b4>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	021b      	lsls	r3, r3, #8
 8000e82:	b21a      	sxth	r2, r3
 8000e84:	4b43      	ldr	r3, [pc, #268]	@ (8000f94 <MPU6050_Read_Sensor_Data+0x1b4>)
 8000e86:	785b      	ldrb	r3, [r3, #1]
 8000e88:	b21b      	sxth	r3, r3
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	b21a      	sxth	r2, r3
 8000e8e:	4b42      	ldr	r3, [pc, #264]	@ (8000f98 <MPU6050_Read_Sensor_Data+0x1b8>)
 8000e90:	801a      	strh	r2, [r3, #0]
  temp = (raw_temp / 340.0) + 36.53;
 8000e92:	4b41      	ldr	r3, [pc, #260]	@ (8000f98 <MPU6050_Read_Sensor_Data+0x1b8>)
 8000e94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff fae7 	bl	800046c <__aeabi_i2d>
 8000e9e:	f04f 0200 	mov.w	r2, #0
 8000ea2:	4b3e      	ldr	r3, [pc, #248]	@ (8000f9c <MPU6050_Read_Sensor_Data+0x1bc>)
 8000ea4:	f7ff fc76 	bl	8000794 <__aeabi_ddiv>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	460b      	mov	r3, r1
 8000eac:	4610      	mov	r0, r2
 8000eae:	4619      	mov	r1, r3
 8000eb0:	a333      	add	r3, pc, #204	@ (adr r3, 8000f80 <MPU6050_Read_Sensor_Data+0x1a0>)
 8000eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb6:	f7ff f98d 	bl	80001d4 <__adddf3>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	4610      	mov	r0, r2
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	f7ff fe15 	bl	8000af0 <__aeabi_d2f>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	4a35      	ldr	r2, [pc, #212]	@ (8000fa0 <MPU6050_Read_Sensor_Data+0x1c0>)
 8000eca:	6013      	str	r3, [r2, #0]

  // Read gyro data
  cuffer[0] = 0x43;
 8000ecc:	4b35      	ldr	r3, [pc, #212]	@ (8000fa4 <MPU6050_Read_Sensor_Data+0x1c4>)
 8000ece:	2243      	movs	r2, #67	@ 0x43
 8000ed0:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR, cuffer, 1, HAL_MAX_DELAY);
 8000ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed6:	9300      	str	r3, [sp, #0]
 8000ed8:	2301      	movs	r3, #1
 8000eda:	4a32      	ldr	r2, [pc, #200]	@ (8000fa4 <MPU6050_Read_Sensor_Data+0x1c4>)
 8000edc:	21d0      	movs	r1, #208	@ 0xd0
 8000ede:	482b      	ldr	r0, [pc, #172]	@ (8000f8c <MPU6050_Read_Sensor_Data+0x1ac>)
 8000ee0:	f000 ff92 	bl	8001e08 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, MPU6050_ADDR, cuffer, 6, HAL_MAX_DELAY);
 8000ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee8:	9300      	str	r3, [sp, #0]
 8000eea:	2306      	movs	r3, #6
 8000eec:	4a2d      	ldr	r2, [pc, #180]	@ (8000fa4 <MPU6050_Read_Sensor_Data+0x1c4>)
 8000eee:	21d0      	movs	r1, #208	@ 0xd0
 8000ef0:	4826      	ldr	r0, [pc, #152]	@ (8000f8c <MPU6050_Read_Sensor_Data+0x1ac>)
 8000ef2:	f001 f8a1 	bl	8002038 <HAL_I2C_Master_Receive>

  gyro_raw[0] = (cuffer[0] << 8 | cuffer[1]) - gyro_cal[0];
 8000ef6:	4b2b      	ldr	r3, [pc, #172]	@ (8000fa4 <MPU6050_Read_Sensor_Data+0x1c4>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	021b      	lsls	r3, r3, #8
 8000efc:	4a29      	ldr	r2, [pc, #164]	@ (8000fa4 <MPU6050_Read_Sensor_Data+0x1c4>)
 8000efe:	7852      	ldrb	r2, [r2, #1]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	ee07 3a90 	vmov	s15, r3
 8000f06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f0a:	4b27      	ldr	r3, [pc, #156]	@ (8000fa8 <MPU6050_Read_Sensor_Data+0x1c8>)
 8000f0c:	edd3 7a00 	vldr	s15, [r3]
 8000f10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f18:	ee17 3a90 	vmov	r3, s15
 8000f1c:	b21a      	sxth	r2, r3
 8000f1e:	4b23      	ldr	r3, [pc, #140]	@ (8000fac <MPU6050_Read_Sensor_Data+0x1cc>)
 8000f20:	801a      	strh	r2, [r3, #0]
  gyro_raw[1] = (cuffer[2] << 8 | cuffer[3]) - gyro_cal[1];
 8000f22:	4b20      	ldr	r3, [pc, #128]	@ (8000fa4 <MPU6050_Read_Sensor_Data+0x1c4>)
 8000f24:	789b      	ldrb	r3, [r3, #2]
 8000f26:	021b      	lsls	r3, r3, #8
 8000f28:	4a1e      	ldr	r2, [pc, #120]	@ (8000fa4 <MPU6050_Read_Sensor_Data+0x1c4>)
 8000f2a:	78d2      	ldrb	r2, [r2, #3]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	ee07 3a90 	vmov	s15, r3
 8000f32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f36:	4b1c      	ldr	r3, [pc, #112]	@ (8000fa8 <MPU6050_Read_Sensor_Data+0x1c8>)
 8000f38:	edd3 7a01 	vldr	s15, [r3, #4]
 8000f3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f44:	ee17 3a90 	vmov	r3, s15
 8000f48:	b21a      	sxth	r2, r3
 8000f4a:	4b18      	ldr	r3, [pc, #96]	@ (8000fac <MPU6050_Read_Sensor_Data+0x1cc>)
 8000f4c:	805a      	strh	r2, [r3, #2]
  gyro_raw[2] = (cuffer[4] << 8 | cuffer[5]) - gyro_cal[2];
 8000f4e:	4b15      	ldr	r3, [pc, #84]	@ (8000fa4 <MPU6050_Read_Sensor_Data+0x1c4>)
 8000f50:	791b      	ldrb	r3, [r3, #4]
 8000f52:	021b      	lsls	r3, r3, #8
 8000f54:	4a13      	ldr	r2, [pc, #76]	@ (8000fa4 <MPU6050_Read_Sensor_Data+0x1c4>)
 8000f56:	7952      	ldrb	r2, [r2, #5]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	ee07 3a90 	vmov	s15, r3
 8000f5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f62:	4b11      	ldr	r3, [pc, #68]	@ (8000fa8 <MPU6050_Read_Sensor_Data+0x1c8>)
 8000f64:	edd3 7a02 	vldr	s15, [r3, #8]
 8000f68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f70:	ee17 3a90 	vmov	r3, s15
 8000f74:	b21a      	sxth	r2, r3
 8000f76:	4b0d      	ldr	r3, [pc, #52]	@ (8000fac <MPU6050_Read_Sensor_Data+0x1cc>)
 8000f78:	809a      	strh	r2, [r3, #4]
}
 8000f7a:	bf00      	nop
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	0a3d70a4 	.word	0x0a3d70a4
 8000f84:	404243d7 	.word	0x404243d7
 8000f88:	200000e8 	.word	0x200000e8
 8000f8c:	2000008c 	.word	0x2000008c
 8000f90:	20000100 	.word	0x20000100
 8000f94:	200000e4 	.word	0x200000e4
 8000f98:	20000130 	.word	0x20000130
 8000f9c:	40754000 	.word	0x40754000
 8000fa0:	20000134 	.word	0x20000134
 8000fa4:	200000f0 	.word	0x200000f0
 8000fa8:	20000108 	.word	0x20000108
 8000fac:	200000f8 	.word	0x200000f8

08000fb0 <MPU6050_Calculate_Angles>:
/**
  * @brief Calculates the angles based on the gyro and accelerometer data.
  * @retval None
  */
void MPU6050_Calculate_Angles(void)
{
 8000fb0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000fb4:	af00      	add	r7, sp, #0
  angle_pitch_gyro += gyro_raw[0] * 0.0000611;
 8000fb6:	4bd0      	ldr	r3, [pc, #832]	@ (80012f8 <MPU6050_Calculate_Angles+0x348>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f7ff fa68 	bl	8000490 <__aeabi_f2d>
 8000fc0:	4604      	mov	r4, r0
 8000fc2:	460d      	mov	r5, r1
 8000fc4:	4bcd      	ldr	r3, [pc, #820]	@ (80012fc <MPU6050_Calculate_Angles+0x34c>)
 8000fc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff fa4e 	bl	800046c <__aeabi_i2d>
 8000fd0:	a3bd      	add	r3, pc, #756	@ (adr r3, 80012c8 <MPU6050_Calculate_Angles+0x318>)
 8000fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd6:	f7ff fab3 	bl	8000540 <__aeabi_dmul>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	460b      	mov	r3, r1
 8000fde:	4620      	mov	r0, r4
 8000fe0:	4629      	mov	r1, r5
 8000fe2:	f7ff f8f7 	bl	80001d4 <__adddf3>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	4610      	mov	r0, r2
 8000fec:	4619      	mov	r1, r3
 8000fee:	f7ff fd7f 	bl	8000af0 <__aeabi_d2f>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	4ac0      	ldr	r2, [pc, #768]	@ (80012f8 <MPU6050_Calculate_Angles+0x348>)
 8000ff6:	6013      	str	r3, [r2, #0]
  angle_roll_gyro += gyro_raw[1] * 0.0000611;
 8000ff8:	4bc1      	ldr	r3, [pc, #772]	@ (8001300 <MPU6050_Calculate_Angles+0x350>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff fa47 	bl	8000490 <__aeabi_f2d>
 8001002:	4604      	mov	r4, r0
 8001004:	460d      	mov	r5, r1
 8001006:	4bbd      	ldr	r3, [pc, #756]	@ (80012fc <MPU6050_Calculate_Angles+0x34c>)
 8001008:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff fa2d 	bl	800046c <__aeabi_i2d>
 8001012:	a3ad      	add	r3, pc, #692	@ (adr r3, 80012c8 <MPU6050_Calculate_Angles+0x318>)
 8001014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001018:	f7ff fa92 	bl	8000540 <__aeabi_dmul>
 800101c:	4602      	mov	r2, r0
 800101e:	460b      	mov	r3, r1
 8001020:	4620      	mov	r0, r4
 8001022:	4629      	mov	r1, r5
 8001024:	f7ff f8d6 	bl	80001d4 <__adddf3>
 8001028:	4602      	mov	r2, r0
 800102a:	460b      	mov	r3, r1
 800102c:	4610      	mov	r0, r2
 800102e:	4619      	mov	r1, r3
 8001030:	f7ff fd5e 	bl	8000af0 <__aeabi_d2f>
 8001034:	4603      	mov	r3, r0
 8001036:	4ab2      	ldr	r2, [pc, #712]	@ (8001300 <MPU6050_Calculate_Angles+0x350>)
 8001038:	6013      	str	r3, [r2, #0]

  angle_pitch_gyro += angle_roll_gyro * sin(gyro_raw[2] * 0.000001066);
 800103a:	4baf      	ldr	r3, [pc, #700]	@ (80012f8 <MPU6050_Calculate_Angles+0x348>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff fa26 	bl	8000490 <__aeabi_f2d>
 8001044:	4604      	mov	r4, r0
 8001046:	460d      	mov	r5, r1
 8001048:	4bad      	ldr	r3, [pc, #692]	@ (8001300 <MPU6050_Calculate_Angles+0x350>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff fa1f 	bl	8000490 <__aeabi_f2d>
 8001052:	4680      	mov	r8, r0
 8001054:	4689      	mov	r9, r1
 8001056:	4ba9      	ldr	r3, [pc, #676]	@ (80012fc <MPU6050_Calculate_Angles+0x34c>)
 8001058:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff fa05 	bl	800046c <__aeabi_i2d>
 8001062:	a39b      	add	r3, pc, #620	@ (adr r3, 80012d0 <MPU6050_Calculate_Angles+0x320>)
 8001064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001068:	f7ff fa6a 	bl	8000540 <__aeabi_dmul>
 800106c:	4602      	mov	r2, r0
 800106e:	460b      	mov	r3, r1
 8001070:	ec43 2b17 	vmov	d7, r2, r3
 8001074:	eeb0 0a47 	vmov.f32	s0, s14
 8001078:	eef0 0a67 	vmov.f32	s1, s15
 800107c:	f003 f948 	bl	8004310 <sin>
 8001080:	ec53 2b10 	vmov	r2, r3, d0
 8001084:	4640      	mov	r0, r8
 8001086:	4649      	mov	r1, r9
 8001088:	f7ff fa5a 	bl	8000540 <__aeabi_dmul>
 800108c:	4602      	mov	r2, r0
 800108e:	460b      	mov	r3, r1
 8001090:	4620      	mov	r0, r4
 8001092:	4629      	mov	r1, r5
 8001094:	f7ff f89e 	bl	80001d4 <__adddf3>
 8001098:	4602      	mov	r2, r0
 800109a:	460b      	mov	r3, r1
 800109c:	4610      	mov	r0, r2
 800109e:	4619      	mov	r1, r3
 80010a0:	f7ff fd26 	bl	8000af0 <__aeabi_d2f>
 80010a4:	4603      	mov	r3, r0
 80010a6:	4a94      	ldr	r2, [pc, #592]	@ (80012f8 <MPU6050_Calculate_Angles+0x348>)
 80010a8:	6013      	str	r3, [r2, #0]
  angle_roll_gyro -= angle_pitch_gyro * sin(gyro_raw[2] * 0.000001066);
 80010aa:	4b95      	ldr	r3, [pc, #596]	@ (8001300 <MPU6050_Calculate_Angles+0x350>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff f9ee 	bl	8000490 <__aeabi_f2d>
 80010b4:	4604      	mov	r4, r0
 80010b6:	460d      	mov	r5, r1
 80010b8:	4b8f      	ldr	r3, [pc, #572]	@ (80012f8 <MPU6050_Calculate_Angles+0x348>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff f9e7 	bl	8000490 <__aeabi_f2d>
 80010c2:	4680      	mov	r8, r0
 80010c4:	4689      	mov	r9, r1
 80010c6:	4b8d      	ldr	r3, [pc, #564]	@ (80012fc <MPU6050_Calculate_Angles+0x34c>)
 80010c8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff f9cd 	bl	800046c <__aeabi_i2d>
 80010d2:	a37f      	add	r3, pc, #508	@ (adr r3, 80012d0 <MPU6050_Calculate_Angles+0x320>)
 80010d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d8:	f7ff fa32 	bl	8000540 <__aeabi_dmul>
 80010dc:	4602      	mov	r2, r0
 80010de:	460b      	mov	r3, r1
 80010e0:	ec43 2b17 	vmov	d7, r2, r3
 80010e4:	eeb0 0a47 	vmov.f32	s0, s14
 80010e8:	eef0 0a67 	vmov.f32	s1, s15
 80010ec:	f003 f910 	bl	8004310 <sin>
 80010f0:	ec53 2b10 	vmov	r2, r3, d0
 80010f4:	4640      	mov	r0, r8
 80010f6:	4649      	mov	r1, r9
 80010f8:	f7ff fa22 	bl	8000540 <__aeabi_dmul>
 80010fc:	4602      	mov	r2, r0
 80010fe:	460b      	mov	r3, r1
 8001100:	4620      	mov	r0, r4
 8001102:	4629      	mov	r1, r5
 8001104:	f7ff f864 	bl	80001d0 <__aeabi_dsub>
 8001108:	4602      	mov	r2, r0
 800110a:	460b      	mov	r3, r1
 800110c:	4610      	mov	r0, r2
 800110e:	4619      	mov	r1, r3
 8001110:	f7ff fcee 	bl	8000af0 <__aeabi_d2f>
 8001114:	4603      	mov	r3, r0
 8001116:	4a7a      	ldr	r2, [pc, #488]	@ (8001300 <MPU6050_Calculate_Angles+0x350>)
 8001118:	6013      	str	r3, [r2, #0]

  acc_total_vector = sqrt((acc_raw[0] * acc_raw[0]) + (acc_raw[1] * acc_raw[1]) + (acc_raw[2] * acc_raw[2]));
 800111a:	4b7a      	ldr	r3, [pc, #488]	@ (8001304 <MPU6050_Calculate_Angles+0x354>)
 800111c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001120:	461a      	mov	r2, r3
 8001122:	4b78      	ldr	r3, [pc, #480]	@ (8001304 <MPU6050_Calculate_Angles+0x354>)
 8001124:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001128:	fb03 f202 	mul.w	r2, r3, r2
 800112c:	4b75      	ldr	r3, [pc, #468]	@ (8001304 <MPU6050_Calculate_Angles+0x354>)
 800112e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001132:	4619      	mov	r1, r3
 8001134:	4b73      	ldr	r3, [pc, #460]	@ (8001304 <MPU6050_Calculate_Angles+0x354>)
 8001136:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800113a:	fb01 f303 	mul.w	r3, r1, r3
 800113e:	441a      	add	r2, r3
 8001140:	4b70      	ldr	r3, [pc, #448]	@ (8001304 <MPU6050_Calculate_Angles+0x354>)
 8001142:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001146:	4619      	mov	r1, r3
 8001148:	4b6e      	ldr	r3, [pc, #440]	@ (8001304 <MPU6050_Calculate_Angles+0x354>)
 800114a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800114e:	fb01 f303 	mul.w	r3, r1, r3
 8001152:	4413      	add	r3, r2
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff f989 	bl	800046c <__aeabi_i2d>
 800115a:	4602      	mov	r2, r0
 800115c:	460b      	mov	r3, r1
 800115e:	ec43 2b10 	vmov	d0, r2, r3
 8001162:	f003 f89f 	bl	80042a4 <sqrt>
 8001166:	ec53 2b10 	vmov	r2, r3, d0
 800116a:	4610      	mov	r0, r2
 800116c:	4619      	mov	r1, r3
 800116e:	f7ff fc97 	bl	8000aa0 <__aeabi_d2iz>
 8001172:	4603      	mov	r3, r0
 8001174:	b21a      	sxth	r2, r3
 8001176:	4b64      	ldr	r3, [pc, #400]	@ (8001308 <MPU6050_Calculate_Angles+0x358>)
 8001178:	801a      	strh	r2, [r3, #0]

  angle_pitch_acc = asin((float)acc_raw[1] / acc_total_vector) * 57.296;
 800117a:	4b62      	ldr	r3, [pc, #392]	@ (8001304 <MPU6050_Calculate_Angles+0x354>)
 800117c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001180:	ee07 3a90 	vmov	s15, r3
 8001184:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001188:	4b5f      	ldr	r3, [pc, #380]	@ (8001308 <MPU6050_Calculate_Angles+0x358>)
 800118a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800118e:	ee07 3a90 	vmov	s15, r3
 8001192:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001196:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800119a:	ee16 0a90 	vmov	r0, s13
 800119e:	f7ff f977 	bl	8000490 <__aeabi_f2d>
 80011a2:	4602      	mov	r2, r0
 80011a4:	460b      	mov	r3, r1
 80011a6:	ec43 2b10 	vmov	d0, r2, r3
 80011aa:	f003 f847 	bl	800423c <asin>
 80011ae:	ec51 0b10 	vmov	r0, r1, d0
 80011b2:	a349      	add	r3, pc, #292	@ (adr r3, 80012d8 <MPU6050_Calculate_Angles+0x328>)
 80011b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b8:	f7ff f9c2 	bl	8000540 <__aeabi_dmul>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	4610      	mov	r0, r2
 80011c2:	4619      	mov	r1, r3
 80011c4:	f7ff fc94 	bl	8000af0 <__aeabi_d2f>
 80011c8:	4603      	mov	r3, r0
 80011ca:	4a50      	ldr	r2, [pc, #320]	@ (800130c <MPU6050_Calculate_Angles+0x35c>)
 80011cc:	6013      	str	r3, [r2, #0]
  angle_roll_acc = asin((float)acc_raw[0] / acc_total_vector) * -57.296;
 80011ce:	4b4d      	ldr	r3, [pc, #308]	@ (8001304 <MPU6050_Calculate_Angles+0x354>)
 80011d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011d4:	ee07 3a90 	vmov	s15, r3
 80011d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011dc:	4b4a      	ldr	r3, [pc, #296]	@ (8001308 <MPU6050_Calculate_Angles+0x358>)
 80011de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011e2:	ee07 3a90 	vmov	s15, r3
 80011e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011ea:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80011ee:	ee16 0a90 	vmov	r0, s13
 80011f2:	f7ff f94d 	bl	8000490 <__aeabi_f2d>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	ec43 2b10 	vmov	d0, r2, r3
 80011fe:	f003 f81d 	bl	800423c <asin>
 8001202:	ec51 0b10 	vmov	r0, r1, d0
 8001206:	a336      	add	r3, pc, #216	@ (adr r3, 80012e0 <MPU6050_Calculate_Angles+0x330>)
 8001208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800120c:	f7ff f998 	bl	8000540 <__aeabi_dmul>
 8001210:	4602      	mov	r2, r0
 8001212:	460b      	mov	r3, r1
 8001214:	4610      	mov	r0, r2
 8001216:	4619      	mov	r1, r3
 8001218:	f7ff fc6a 	bl	8000af0 <__aeabi_d2f>
 800121c:	4603      	mov	r3, r0
 800121e:	4a3c      	ldr	r2, [pc, #240]	@ (8001310 <MPU6050_Calculate_Angles+0x360>)
 8001220:	6013      	str	r3, [r2, #0]

  angle_pitch_acc -= 0.00;
 8001222:	4b3a      	ldr	r3, [pc, #232]	@ (800130c <MPU6050_Calculate_Angles+0x35c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a39      	ldr	r2, [pc, #228]	@ (800130c <MPU6050_Calculate_Angles+0x35c>)
 8001228:	6013      	str	r3, [r2, #0]
  angle_roll_acc -= 0.00;
 800122a:	4b39      	ldr	r3, [pc, #228]	@ (8001310 <MPU6050_Calculate_Angles+0x360>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a38      	ldr	r2, [pc, #224]	@ (8001310 <MPU6050_Calculate_Angles+0x360>)
 8001230:	6013      	str	r3, [r2, #0]

  if (set_gyro)
 8001232:	4b38      	ldr	r3, [pc, #224]	@ (8001314 <MPU6050_Calculate_Angles+0x364>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d079      	beq.n	800132e <MPU6050_Calculate_Angles+0x37e>
  {
    angle_pitch = angle_pitch_gyro * 0.9996 + angle_pitch_acc * 0.0004;
 800123a:	4b2f      	ldr	r3, [pc, #188]	@ (80012f8 <MPU6050_Calculate_Angles+0x348>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff f926 	bl	8000490 <__aeabi_f2d>
 8001244:	a328      	add	r3, pc, #160	@ (adr r3, 80012e8 <MPU6050_Calculate_Angles+0x338>)
 8001246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124a:	f7ff f979 	bl	8000540 <__aeabi_dmul>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	4614      	mov	r4, r2
 8001254:	461d      	mov	r5, r3
 8001256:	4b2d      	ldr	r3, [pc, #180]	@ (800130c <MPU6050_Calculate_Angles+0x35c>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff f918 	bl	8000490 <__aeabi_f2d>
 8001260:	a323      	add	r3, pc, #140	@ (adr r3, 80012f0 <MPU6050_Calculate_Angles+0x340>)
 8001262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001266:	f7ff f96b 	bl	8000540 <__aeabi_dmul>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	4620      	mov	r0, r4
 8001270:	4629      	mov	r1, r5
 8001272:	f7fe ffaf 	bl	80001d4 <__adddf3>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	4610      	mov	r0, r2
 800127c:	4619      	mov	r1, r3
 800127e:	f7ff fc37 	bl	8000af0 <__aeabi_d2f>
 8001282:	4603      	mov	r3, r0
 8001284:	4a24      	ldr	r2, [pc, #144]	@ (8001318 <MPU6050_Calculate_Angles+0x368>)
 8001286:	6013      	str	r3, [r2, #0]
    angle_roll = angle_roll_gyro * 0.9996 + angle_roll_acc * 0.0004;
 8001288:	4b1d      	ldr	r3, [pc, #116]	@ (8001300 <MPU6050_Calculate_Angles+0x350>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff f8ff 	bl	8000490 <__aeabi_f2d>
 8001292:	a315      	add	r3, pc, #84	@ (adr r3, 80012e8 <MPU6050_Calculate_Angles+0x338>)
 8001294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001298:	f7ff f952 	bl	8000540 <__aeabi_dmul>
 800129c:	4602      	mov	r2, r0
 800129e:	460b      	mov	r3, r1
 80012a0:	4614      	mov	r4, r2
 80012a2:	461d      	mov	r5, r3
 80012a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001310 <MPU6050_Calculate_Angles+0x360>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff f8f1 	bl	8000490 <__aeabi_f2d>
 80012ae:	a310      	add	r3, pc, #64	@ (adr r3, 80012f0 <MPU6050_Calculate_Angles+0x340>)
 80012b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b4:	f7ff f944 	bl	8000540 <__aeabi_dmul>
 80012b8:	4602      	mov	r2, r0
 80012ba:	460b      	mov	r3, r1
 80012bc:	4620      	mov	r0, r4
 80012be:	4629      	mov	r1, r5
 80012c0:	f7fe ff88 	bl	80001d4 <__adddf3>
 80012c4:	4602      	mov	r2, r0
 80012c6:	e029      	b.n	800131c <MPU6050_Calculate_Angles+0x36c>
 80012c8:	01d41596 	.word	0x01d41596
 80012cc:	3f10045a 	.word	0x3f10045a
 80012d0:	652c6e62 	.word	0x652c6e62
 80012d4:	3eb1e26f 	.word	0x3eb1e26f
 80012d8:	53f7ced9 	.word	0x53f7ced9
 80012dc:	404ca5e3 	.word	0x404ca5e3
 80012e0:	53f7ced9 	.word	0x53f7ced9
 80012e4:	c04ca5e3 	.word	0xc04ca5e3
 80012e8:	23a29c78 	.word	0x23a29c78
 80012ec:	3feffcb9 	.word	0x3feffcb9
 80012f0:	eb1c432d 	.word	0xeb1c432d
 80012f4:	3f3a36e2 	.word	0x3f3a36e2
 80012f8:	20000118 	.word	0x20000118
 80012fc:	200000f8 	.word	0x200000f8
 8001300:	2000011c 	.word	0x2000011c
 8001304:	20000100 	.word	0x20000100
 8001308:	20000114 	.word	0x20000114
 800130c:	20000120 	.word	0x20000120
 8001310:	20000124 	.word	0x20000124
 8001314:	2000014c 	.word	0x2000014c
 8001318:	20000128 	.word	0x20000128
 800131c:	460b      	mov	r3, r1
 800131e:	4610      	mov	r0, r2
 8001320:	4619      	mov	r1, r3
 8001322:	f7ff fbe5 	bl	8000af0 <__aeabi_d2f>
 8001326:	4603      	mov	r3, r0
 8001328:	4a16      	ldr	r2, [pc, #88]	@ (8001384 <MPU6050_Calculate_Angles+0x3d4>)
 800132a:	6013      	str	r3, [r2, #0]
 800132c:	e006      	b.n	800133c <MPU6050_Calculate_Angles+0x38c>
  }
  else
  {
    angle_pitch = angle_pitch_acc;
 800132e:	4b16      	ldr	r3, [pc, #88]	@ (8001388 <MPU6050_Calculate_Angles+0x3d8>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a16      	ldr	r2, [pc, #88]	@ (800138c <MPU6050_Calculate_Angles+0x3dc>)
 8001334:	6013      	str	r3, [r2, #0]
    set_gyro = true;
 8001336:	4b16      	ldr	r3, [pc, #88]	@ (8001390 <MPU6050_Calculate_Angles+0x3e0>)
 8001338:	2201      	movs	r2, #1
 800133a:	701a      	strb	r2, [r3, #0]
  }
	  while((HAL_GetTick() - prevtime) * 1000 < 4000);
 800133c:	bf00      	nop
 800133e:	f000 fa27 	bl	8001790 <HAL_GetTick>
 8001342:	ee07 0a90 	vmov	s15, r0
 8001346:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800134a:	4b12      	ldr	r3, [pc, #72]	@ (8001394 <MPU6050_Calculate_Angles+0x3e4>)
 800134c:	edd3 7a00 	vldr	s15, [r3]
 8001350:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001354:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8001398 <MPU6050_Calculate_Angles+0x3e8>
 8001358:	ee67 7a87 	vmul.f32	s15, s15, s14
 800135c:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800139c <MPU6050_Calculate_Angles+0x3ec>
 8001360:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001368:	d4e9      	bmi.n	800133e <MPU6050_Calculate_Angles+0x38e>
	  prevtime = HAL_GetTick();
 800136a:	f000 fa11 	bl	8001790 <HAL_GetTick>
 800136e:	ee07 0a90 	vmov	s15, r0
 8001372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001376:	4b07      	ldr	r3, [pc, #28]	@ (8001394 <MPU6050_Calculate_Angles+0x3e4>)
 8001378:	edc3 7a00 	vstr	s15, [r3]
  /* USER CODE END 3 */
}
 800137c:	bf00      	nop
 800137e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001382:	bf00      	nop
 8001384:	2000012c 	.word	0x2000012c
 8001388:	20000120 	.word	0x20000120
 800138c:	20000128 	.word	0x20000128
 8001390:	2000014c 	.word	0x2000014c
 8001394:	2000013c 	.word	0x2000013c
 8001398:	447a0000 	.word	0x447a0000
 800139c:	457a0000 	.word	0x457a0000

080013a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b096      	sub	sp, #88	@ 0x58
 80013a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013a6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80013aa:	2228      	movs	r2, #40	@ 0x28
 80013ac:	2100      	movs	r1, #0
 80013ae:	4618      	mov	r0, r3
 80013b0:	f002 ff12 	bl	80041d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013b4:	f107 031c 	add.w	r3, r7, #28
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	60da      	str	r2, [r3, #12]
 80013c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013c4:	1d3b      	adds	r3, r7, #4
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]
 80013ce:	60da      	str	r2, [r3, #12]
 80013d0:	611a      	str	r2, [r3, #16]
 80013d2:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013d4:	2302      	movs	r3, #2
 80013d6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013d8:	2301      	movs	r3, #1
 80013da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013dc:	2310      	movs	r3, #16
 80013de:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013e0:	2300      	movs	r3, #0
 80013e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013e4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80013e8:	4618      	mov	r0, r3
 80013ea:	f001 fbc1 	bl	8002b70 <HAL_RCC_OscConfig>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80013f4:	f000 f898 	bl	8001528 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013f8:	230f      	movs	r3, #15
 80013fa:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80013fc:	2300      	movs	r3, #0
 80013fe:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001400:	2300      	movs	r3, #0
 8001402:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001404:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001408:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800140a:	2300      	movs	r3, #0
 800140c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800140e:	f107 031c 	add.w	r3, r7, #28
 8001412:	2100      	movs	r1, #0
 8001414:	4618      	mov	r0, r3
 8001416:	f002 fbe9 	bl	8003bec <HAL_RCC_ClockConfig>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001420:	f000 f882 	bl	8001528 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001424:	2320      	movs	r3, #32
 8001426:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001428:	2300      	movs	r3, #0
 800142a:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800142c:	1d3b      	adds	r3, r7, #4
 800142e:	4618      	mov	r0, r3
 8001430:	f002 fdac 	bl	8003f8c <HAL_RCCEx_PeriphCLKConfig>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800143a:	f000 f875 	bl	8001528 <Error_Handler>
  }
}
 800143e:	bf00      	nop
 8001440:	3758      	adds	r7, #88	@ 0x58
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
	...

08001448 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800144c:	4b1b      	ldr	r3, [pc, #108]	@ (80014bc <MX_I2C1_Init+0x74>)
 800144e:	4a1c      	ldr	r2, [pc, #112]	@ (80014c0 <MX_I2C1_Init+0x78>)
 8001450:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001452:	4b1a      	ldr	r3, [pc, #104]	@ (80014bc <MX_I2C1_Init+0x74>)
 8001454:	4a1b      	ldr	r2, [pc, #108]	@ (80014c4 <MX_I2C1_Init+0x7c>)
 8001456:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001458:	4b18      	ldr	r3, [pc, #96]	@ (80014bc <MX_I2C1_Init+0x74>)
 800145a:	2200      	movs	r2, #0
 800145c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800145e:	4b17      	ldr	r3, [pc, #92]	@ (80014bc <MX_I2C1_Init+0x74>)
 8001460:	2201      	movs	r2, #1
 8001462:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001464:	4b15      	ldr	r3, [pc, #84]	@ (80014bc <MX_I2C1_Init+0x74>)
 8001466:	2200      	movs	r2, #0
 8001468:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800146a:	4b14      	ldr	r3, [pc, #80]	@ (80014bc <MX_I2C1_Init+0x74>)
 800146c:	2200      	movs	r2, #0
 800146e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001470:	4b12      	ldr	r3, [pc, #72]	@ (80014bc <MX_I2C1_Init+0x74>)
 8001472:	2200      	movs	r2, #0
 8001474:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001476:	4b11      	ldr	r3, [pc, #68]	@ (80014bc <MX_I2C1_Init+0x74>)
 8001478:	2200      	movs	r2, #0
 800147a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800147c:	4b0f      	ldr	r3, [pc, #60]	@ (80014bc <MX_I2C1_Init+0x74>)
 800147e:	2200      	movs	r2, #0
 8001480:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001482:	480e      	ldr	r0, [pc, #56]	@ (80014bc <MX_I2C1_Init+0x74>)
 8001484:	f000 fc24 	bl	8001cd0 <HAL_I2C_Init>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800148e:	f000 f84b 	bl	8001528 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001492:	2100      	movs	r1, #0
 8001494:	4809      	ldr	r0, [pc, #36]	@ (80014bc <MX_I2C1_Init+0x74>)
 8001496:	f001 fad3 	bl	8002a40 <HAL_I2CEx_ConfigAnalogFilter>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80014a0:	f000 f842 	bl	8001528 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80014a4:	2100      	movs	r1, #0
 80014a6:	4805      	ldr	r0, [pc, #20]	@ (80014bc <MX_I2C1_Init+0x74>)
 80014a8:	f001 fb15 	bl	8002ad6 <HAL_I2CEx_ConfigDigitalFilter>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80014b2:	f000 f839 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	2000008c 	.word	0x2000008c
 80014c0:	40005400 	.word	0x40005400
 80014c4:	2000090e 	.word	0x2000090e

080014c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ce:	1d3b      	adds	r3, r7, #4
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	60da      	str	r2, [r3, #12]
 80014da:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014dc:	4b10      	ldr	r3, [pc, #64]	@ (8001520 <MX_GPIO_Init+0x58>)
 80014de:	695b      	ldr	r3, [r3, #20]
 80014e0:	4a0f      	ldr	r2, [pc, #60]	@ (8001520 <MX_GPIO_Init+0x58>)
 80014e2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014e6:	6153      	str	r3, [r2, #20]
 80014e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001520 <MX_GPIO_Init+0x58>)
 80014ea:	695b      	ldr	r3, [r3, #20]
 80014ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014f0:	603b      	str	r3, [r7, #0]
 80014f2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80014f4:	2200      	movs	r2, #0
 80014f6:	2108      	movs	r1, #8
 80014f8:	480a      	ldr	r0, [pc, #40]	@ (8001524 <MX_GPIO_Init+0x5c>)
 80014fa:	f000 fbd1 	bl	8001ca0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014fe:	2308      	movs	r3, #8
 8001500:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001502:	2301      	movs	r3, #1
 8001504:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150a:	2300      	movs	r3, #0
 800150c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800150e:	1d3b      	adds	r3, r7, #4
 8001510:	4619      	mov	r1, r3
 8001512:	4804      	ldr	r0, [pc, #16]	@ (8001524 <MX_GPIO_Init+0x5c>)
 8001514:	f000 fa52 	bl	80019bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001518:	bf00      	nop
 800151a:	3718      	adds	r7, #24
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40021000 	.word	0x40021000
 8001524:	48000400 	.word	0x48000400

08001528 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800152c:	b672      	cpsid	i
}
 800152e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001530:	bf00      	nop
 8001532:	e7fd      	b.n	8001530 <Error_Handler+0x8>

08001534 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800153a:	4b0f      	ldr	r3, [pc, #60]	@ (8001578 <HAL_MspInit+0x44>)
 800153c:	699b      	ldr	r3, [r3, #24]
 800153e:	4a0e      	ldr	r2, [pc, #56]	@ (8001578 <HAL_MspInit+0x44>)
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	6193      	str	r3, [r2, #24]
 8001546:	4b0c      	ldr	r3, [pc, #48]	@ (8001578 <HAL_MspInit+0x44>)
 8001548:	699b      	ldr	r3, [r3, #24]
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	607b      	str	r3, [r7, #4]
 8001550:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001552:	4b09      	ldr	r3, [pc, #36]	@ (8001578 <HAL_MspInit+0x44>)
 8001554:	69db      	ldr	r3, [r3, #28]
 8001556:	4a08      	ldr	r2, [pc, #32]	@ (8001578 <HAL_MspInit+0x44>)
 8001558:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800155c:	61d3      	str	r3, [r2, #28]
 800155e:	4b06      	ldr	r3, [pc, #24]	@ (8001578 <HAL_MspInit+0x44>)
 8001560:	69db      	ldr	r3, [r3, #28]
 8001562:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001566:	603b      	str	r3, [r7, #0]
 8001568:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800156a:	bf00      	nop
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	40021000 	.word	0x40021000

0800157c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b08a      	sub	sp, #40	@ 0x28
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]
 8001592:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a17      	ldr	r2, [pc, #92]	@ (80015f8 <HAL_I2C_MspInit+0x7c>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d127      	bne.n	80015ee <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800159e:	4b17      	ldr	r3, [pc, #92]	@ (80015fc <HAL_I2C_MspInit+0x80>)
 80015a0:	695b      	ldr	r3, [r3, #20]
 80015a2:	4a16      	ldr	r2, [pc, #88]	@ (80015fc <HAL_I2C_MspInit+0x80>)
 80015a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015a8:	6153      	str	r3, [r2, #20]
 80015aa:	4b14      	ldr	r3, [pc, #80]	@ (80015fc <HAL_I2C_MspInit+0x80>)
 80015ac:	695b      	ldr	r3, [r3, #20]
 80015ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015b2:	613b      	str	r3, [r7, #16]
 80015b4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015b6:	23c0      	movs	r3, #192	@ 0xc0
 80015b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015ba:	2312      	movs	r3, #18
 80015bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015be:	2300      	movs	r3, #0
 80015c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015c2:	2303      	movs	r3, #3
 80015c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015c6:	2304      	movs	r3, #4
 80015c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ca:	f107 0314 	add.w	r3, r7, #20
 80015ce:	4619      	mov	r1, r3
 80015d0:	480b      	ldr	r0, [pc, #44]	@ (8001600 <HAL_I2C_MspInit+0x84>)
 80015d2:	f000 f9f3 	bl	80019bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015d6:	4b09      	ldr	r3, [pc, #36]	@ (80015fc <HAL_I2C_MspInit+0x80>)
 80015d8:	69db      	ldr	r3, [r3, #28]
 80015da:	4a08      	ldr	r2, [pc, #32]	@ (80015fc <HAL_I2C_MspInit+0x80>)
 80015dc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80015e0:	61d3      	str	r3, [r2, #28]
 80015e2:	4b06      	ldr	r3, [pc, #24]	@ (80015fc <HAL_I2C_MspInit+0x80>)
 80015e4:	69db      	ldr	r3, [r3, #28]
 80015e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015ee:	bf00      	nop
 80015f0:	3728      	adds	r7, #40	@ 0x28
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40005400 	.word	0x40005400
 80015fc:	40021000 	.word	0x40021000
 8001600:	48000400 	.word	0x48000400

08001604 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001608:	bf00      	nop
 800160a:	e7fd      	b.n	8001608 <NMI_Handler+0x4>

0800160c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001610:	bf00      	nop
 8001612:	e7fd      	b.n	8001610 <HardFault_Handler+0x4>

08001614 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001618:	bf00      	nop
 800161a:	e7fd      	b.n	8001618 <MemManage_Handler+0x4>

0800161c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001620:	bf00      	nop
 8001622:	e7fd      	b.n	8001620 <BusFault_Handler+0x4>

08001624 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001628:	bf00      	nop
 800162a:	e7fd      	b.n	8001628 <UsageFault_Handler+0x4>

0800162c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001630:	bf00      	nop
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr

0800163a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800163a:	b480      	push	{r7}
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr

08001656 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800165a:	f000 f885 	bl	8001768 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
	...

08001664 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001668:	4b06      	ldr	r3, [pc, #24]	@ (8001684 <SystemInit+0x20>)
 800166a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800166e:	4a05      	ldr	r2, [pc, #20]	@ (8001684 <SystemInit+0x20>)
 8001670:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001674:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001678:	bf00      	nop
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	e000ed00 	.word	0xe000ed00

08001688 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001688:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016c0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800168c:	f7ff ffea 	bl	8001664 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001690:	480c      	ldr	r0, [pc, #48]	@ (80016c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001692:	490d      	ldr	r1, [pc, #52]	@ (80016c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001694:	4a0d      	ldr	r2, [pc, #52]	@ (80016cc <LoopForever+0xe>)
  movs r3, #0
 8001696:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001698:	e002      	b.n	80016a0 <LoopCopyDataInit>

0800169a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800169a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800169c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800169e:	3304      	adds	r3, #4

080016a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016a4:	d3f9      	bcc.n	800169a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016a6:	4a0a      	ldr	r2, [pc, #40]	@ (80016d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016a8:	4c0a      	ldr	r4, [pc, #40]	@ (80016d4 <LoopForever+0x16>)
  movs r3, #0
 80016aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016ac:	e001      	b.n	80016b2 <LoopFillZerobss>

080016ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016b0:	3204      	adds	r2, #4

080016b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016b4:	d3fb      	bcc.n	80016ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016b6:	f002 fd9d 	bl	80041f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016ba:	f7ff fa69 	bl	8000b90 <main>

080016be <LoopForever>:

LoopForever:
    b LoopForever
 80016be:	e7fe      	b.n	80016be <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80016c0:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80016c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016c8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80016cc:	08005b60 	.word	0x08005b60
  ldr r2, =_sbss
 80016d0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80016d4:	2000028c 	.word	0x2000028c

080016d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016d8:	e7fe      	b.n	80016d8 <ADC1_2_IRQHandler>
	...

080016dc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016e0:	4b08      	ldr	r3, [pc, #32]	@ (8001704 <HAL_Init+0x28>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a07      	ldr	r2, [pc, #28]	@ (8001704 <HAL_Init+0x28>)
 80016e6:	f043 0310 	orr.w	r3, r3, #16
 80016ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016ec:	2003      	movs	r0, #3
 80016ee:	f000 f931 	bl	8001954 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016f2:	2000      	movs	r0, #0
 80016f4:	f000 f808 	bl	8001708 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016f8:	f7ff ff1c 	bl	8001534 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40022000 	.word	0x40022000

08001708 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001710:	4b12      	ldr	r3, [pc, #72]	@ (800175c <HAL_InitTick+0x54>)
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	4b12      	ldr	r3, [pc, #72]	@ (8001760 <HAL_InitTick+0x58>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	4619      	mov	r1, r3
 800171a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800171e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001722:	fbb2 f3f3 	udiv	r3, r2, r3
 8001726:	4618      	mov	r0, r3
 8001728:	f000 f93b 	bl	80019a2 <HAL_SYSTICK_Config>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e00e      	b.n	8001754 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2b0f      	cmp	r3, #15
 800173a:	d80a      	bhi.n	8001752 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800173c:	2200      	movs	r2, #0
 800173e:	6879      	ldr	r1, [r7, #4]
 8001740:	f04f 30ff 	mov.w	r0, #4294967295
 8001744:	f000 f911 	bl	800196a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001748:	4a06      	ldr	r2, [pc, #24]	@ (8001764 <HAL_InitTick+0x5c>)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800174e:	2300      	movs	r3, #0
 8001750:	e000      	b.n	8001754 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
}
 8001754:	4618      	mov	r0, r3
 8001756:	3708      	adds	r7, #8
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	20000000 	.word	0x20000000
 8001760:	20000008 	.word	0x20000008
 8001764:	20000004 	.word	0x20000004

08001768 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800176c:	4b06      	ldr	r3, [pc, #24]	@ (8001788 <HAL_IncTick+0x20>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	461a      	mov	r2, r3
 8001772:	4b06      	ldr	r3, [pc, #24]	@ (800178c <HAL_IncTick+0x24>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4413      	add	r3, r2
 8001778:	4a04      	ldr	r2, [pc, #16]	@ (800178c <HAL_IncTick+0x24>)
 800177a:	6013      	str	r3, [r2, #0]
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	20000008 	.word	0x20000008
 800178c:	20000150 	.word	0x20000150

08001790 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  return uwTick;  
 8001794:	4b03      	ldr	r3, [pc, #12]	@ (80017a4 <HAL_GetTick+0x14>)
 8001796:	681b      	ldr	r3, [r3, #0]
}
 8001798:	4618      	mov	r0, r3
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	20000150 	.word	0x20000150

080017a8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017b0:	f7ff ffee 	bl	8001790 <HAL_GetTick>
 80017b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017c0:	d005      	beq.n	80017ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017c2:	4b0a      	ldr	r3, [pc, #40]	@ (80017ec <HAL_Delay+0x44>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	461a      	mov	r2, r3
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	4413      	add	r3, r2
 80017cc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80017ce:	bf00      	nop
 80017d0:	f7ff ffde 	bl	8001790 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	68fa      	ldr	r2, [r7, #12]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d8f7      	bhi.n	80017d0 <HAL_Delay+0x28>
  {
  }
}
 80017e0:	bf00      	nop
 80017e2:	bf00      	nop
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000008 	.word	0x20000008

080017f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f003 0307 	and.w	r3, r3, #7
 80017fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001800:	4b0c      	ldr	r3, [pc, #48]	@ (8001834 <__NVIC_SetPriorityGrouping+0x44>)
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001806:	68ba      	ldr	r2, [r7, #8]
 8001808:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800180c:	4013      	ands	r3, r2
 800180e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001818:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800181c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001820:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001822:	4a04      	ldr	r2, [pc, #16]	@ (8001834 <__NVIC_SetPriorityGrouping+0x44>)
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	60d3      	str	r3, [r2, #12]
}
 8001828:	bf00      	nop
 800182a:	3714      	adds	r7, #20
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800183c:	4b04      	ldr	r3, [pc, #16]	@ (8001850 <__NVIC_GetPriorityGrouping+0x18>)
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	0a1b      	lsrs	r3, r3, #8
 8001842:	f003 0307 	and.w	r3, r3, #7
}
 8001846:	4618      	mov	r0, r3
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	e000ed00 	.word	0xe000ed00

08001854 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	6039      	str	r1, [r7, #0]
 800185e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001864:	2b00      	cmp	r3, #0
 8001866:	db0a      	blt.n	800187e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	b2da      	uxtb	r2, r3
 800186c:	490c      	ldr	r1, [pc, #48]	@ (80018a0 <__NVIC_SetPriority+0x4c>)
 800186e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001872:	0112      	lsls	r2, r2, #4
 8001874:	b2d2      	uxtb	r2, r2
 8001876:	440b      	add	r3, r1
 8001878:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800187c:	e00a      	b.n	8001894 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	b2da      	uxtb	r2, r3
 8001882:	4908      	ldr	r1, [pc, #32]	@ (80018a4 <__NVIC_SetPriority+0x50>)
 8001884:	79fb      	ldrb	r3, [r7, #7]
 8001886:	f003 030f 	and.w	r3, r3, #15
 800188a:	3b04      	subs	r3, #4
 800188c:	0112      	lsls	r2, r2, #4
 800188e:	b2d2      	uxtb	r2, r2
 8001890:	440b      	add	r3, r1
 8001892:	761a      	strb	r2, [r3, #24]
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	e000e100 	.word	0xe000e100
 80018a4:	e000ed00 	.word	0xe000ed00

080018a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b089      	sub	sp, #36	@ 0x24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	f1c3 0307 	rsb	r3, r3, #7
 80018c2:	2b04      	cmp	r3, #4
 80018c4:	bf28      	it	cs
 80018c6:	2304      	movcs	r3, #4
 80018c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	3304      	adds	r3, #4
 80018ce:	2b06      	cmp	r3, #6
 80018d0:	d902      	bls.n	80018d8 <NVIC_EncodePriority+0x30>
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	3b03      	subs	r3, #3
 80018d6:	e000      	b.n	80018da <NVIC_EncodePriority+0x32>
 80018d8:	2300      	movs	r3, #0
 80018da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018dc:	f04f 32ff 	mov.w	r2, #4294967295
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	43da      	mvns	r2, r3
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	401a      	ands	r2, r3
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018f0:	f04f 31ff 	mov.w	r1, #4294967295
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	fa01 f303 	lsl.w	r3, r1, r3
 80018fa:	43d9      	mvns	r1, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001900:	4313      	orrs	r3, r2
         );
}
 8001902:	4618      	mov	r0, r3
 8001904:	3724      	adds	r7, #36	@ 0x24
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
	...

08001910 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	3b01      	subs	r3, #1
 800191c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001920:	d301      	bcc.n	8001926 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001922:	2301      	movs	r3, #1
 8001924:	e00f      	b.n	8001946 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001926:	4a0a      	ldr	r2, [pc, #40]	@ (8001950 <SysTick_Config+0x40>)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	3b01      	subs	r3, #1
 800192c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800192e:	210f      	movs	r1, #15
 8001930:	f04f 30ff 	mov.w	r0, #4294967295
 8001934:	f7ff ff8e 	bl	8001854 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001938:	4b05      	ldr	r3, [pc, #20]	@ (8001950 <SysTick_Config+0x40>)
 800193a:	2200      	movs	r2, #0
 800193c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800193e:	4b04      	ldr	r3, [pc, #16]	@ (8001950 <SysTick_Config+0x40>)
 8001940:	2207      	movs	r2, #7
 8001942:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	e000e010 	.word	0xe000e010

08001954 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f7ff ff47 	bl	80017f0 <__NVIC_SetPriorityGrouping>
}
 8001962:	bf00      	nop
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b086      	sub	sp, #24
 800196e:	af00      	add	r7, sp, #0
 8001970:	4603      	mov	r3, r0
 8001972:	60b9      	str	r1, [r7, #8]
 8001974:	607a      	str	r2, [r7, #4]
 8001976:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001978:	2300      	movs	r3, #0
 800197a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800197c:	f7ff ff5c 	bl	8001838 <__NVIC_GetPriorityGrouping>
 8001980:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	68b9      	ldr	r1, [r7, #8]
 8001986:	6978      	ldr	r0, [r7, #20]
 8001988:	f7ff ff8e 	bl	80018a8 <NVIC_EncodePriority>
 800198c:	4602      	mov	r2, r0
 800198e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001992:	4611      	mov	r1, r2
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff ff5d 	bl	8001854 <__NVIC_SetPriority>
}
 800199a:	bf00      	nop
 800199c:	3718      	adds	r7, #24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b082      	sub	sp, #8
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f7ff ffb0 	bl	8001910 <SysTick_Config>
 80019b0:	4603      	mov	r3, r0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
	...

080019bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019bc:	b480      	push	{r7}
 80019be:	b087      	sub	sp, #28
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019c6:	2300      	movs	r3, #0
 80019c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019ca:	e14e      	b.n	8001c6a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	2101      	movs	r1, #1
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	fa01 f303 	lsl.w	r3, r1, r3
 80019d8:	4013      	ands	r3, r2
 80019da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	f000 8140 	beq.w	8001c64 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f003 0303 	and.w	r3, r3, #3
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d005      	beq.n	80019fc <HAL_GPIO_Init+0x40>
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f003 0303 	and.w	r3, r3, #3
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d130      	bne.n	8001a5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	2203      	movs	r2, #3
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	4013      	ands	r3, r2
 8001a12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	68da      	ldr	r2, [r3, #12]
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a32:	2201      	movs	r2, #1
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	091b      	lsrs	r3, r3, #4
 8001a48:	f003 0201 	and.w	r2, r3, #1
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f003 0303 	and.w	r3, r3, #3
 8001a66:	2b03      	cmp	r3, #3
 8001a68:	d017      	beq.n	8001a9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	2203      	movs	r2, #3
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	43db      	mvns	r3, r3
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	689a      	ldr	r2, [r3, #8]
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f003 0303 	and.w	r3, r3, #3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d123      	bne.n	8001aee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	08da      	lsrs	r2, r3, #3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	3208      	adds	r2, #8
 8001aae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ab2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	f003 0307 	and.w	r3, r3, #7
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	220f      	movs	r2, #15
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	693a      	ldr	r2, [r7, #16]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	691a      	ldr	r2, [r3, #16]
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	f003 0307 	and.w	r3, r3, #7
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	08da      	lsrs	r2, r3, #3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	3208      	adds	r2, #8
 8001ae8:	6939      	ldr	r1, [r7, #16]
 8001aea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	2203      	movs	r2, #3
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	43db      	mvns	r3, r3
 8001b00:	693a      	ldr	r2, [r7, #16]
 8001b02:	4013      	ands	r3, r2
 8001b04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f003 0203 	and.w	r2, r3, #3
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	f000 809a 	beq.w	8001c64 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b30:	4b55      	ldr	r3, [pc, #340]	@ (8001c88 <HAL_GPIO_Init+0x2cc>)
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	4a54      	ldr	r2, [pc, #336]	@ (8001c88 <HAL_GPIO_Init+0x2cc>)
 8001b36:	f043 0301 	orr.w	r3, r3, #1
 8001b3a:	6193      	str	r3, [r2, #24]
 8001b3c:	4b52      	ldr	r3, [pc, #328]	@ (8001c88 <HAL_GPIO_Init+0x2cc>)
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	f003 0301 	and.w	r3, r3, #1
 8001b44:	60bb      	str	r3, [r7, #8]
 8001b46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b48:	4a50      	ldr	r2, [pc, #320]	@ (8001c8c <HAL_GPIO_Init+0x2d0>)
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	089b      	lsrs	r3, r3, #2
 8001b4e:	3302      	adds	r3, #2
 8001b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	f003 0303 	and.w	r3, r3, #3
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	220f      	movs	r2, #15
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	43db      	mvns	r3, r3
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001b72:	d013      	beq.n	8001b9c <HAL_GPIO_Init+0x1e0>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	4a46      	ldr	r2, [pc, #280]	@ (8001c90 <HAL_GPIO_Init+0x2d4>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d00d      	beq.n	8001b98 <HAL_GPIO_Init+0x1dc>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4a45      	ldr	r2, [pc, #276]	@ (8001c94 <HAL_GPIO_Init+0x2d8>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d007      	beq.n	8001b94 <HAL_GPIO_Init+0x1d8>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4a44      	ldr	r2, [pc, #272]	@ (8001c98 <HAL_GPIO_Init+0x2dc>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d101      	bne.n	8001b90 <HAL_GPIO_Init+0x1d4>
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e006      	b.n	8001b9e <HAL_GPIO_Init+0x1e2>
 8001b90:	2305      	movs	r3, #5
 8001b92:	e004      	b.n	8001b9e <HAL_GPIO_Init+0x1e2>
 8001b94:	2302      	movs	r3, #2
 8001b96:	e002      	b.n	8001b9e <HAL_GPIO_Init+0x1e2>
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e000      	b.n	8001b9e <HAL_GPIO_Init+0x1e2>
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	697a      	ldr	r2, [r7, #20]
 8001ba0:	f002 0203 	and.w	r2, r2, #3
 8001ba4:	0092      	lsls	r2, r2, #2
 8001ba6:	4093      	lsls	r3, r2
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001bae:	4937      	ldr	r1, [pc, #220]	@ (8001c8c <HAL_GPIO_Init+0x2d0>)
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	089b      	lsrs	r3, r3, #2
 8001bb4:	3302      	adds	r3, #2
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bbc:	4b37      	ldr	r3, [pc, #220]	@ (8001c9c <HAL_GPIO_Init+0x2e0>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d003      	beq.n	8001be0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001be0:	4a2e      	ldr	r2, [pc, #184]	@ (8001c9c <HAL_GPIO_Init+0x2e0>)
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001be6:	4b2d      	ldr	r3, [pc, #180]	@ (8001c9c <HAL_GPIO_Init+0x2e0>)
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	693a      	ldr	r2, [r7, #16]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d003      	beq.n	8001c0a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001c0a:	4a24      	ldr	r2, [pc, #144]	@ (8001c9c <HAL_GPIO_Init+0x2e0>)
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c10:	4b22      	ldr	r3, [pc, #136]	@ (8001c9c <HAL_GPIO_Init+0x2e0>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d003      	beq.n	8001c34 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001c34:	4a19      	ldr	r2, [pc, #100]	@ (8001c9c <HAL_GPIO_Init+0x2e0>)
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c3a:	4b18      	ldr	r3, [pc, #96]	@ (8001c9c <HAL_GPIO_Init+0x2e0>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	43db      	mvns	r3, r3
 8001c44:	693a      	ldr	r2, [r7, #16]
 8001c46:	4013      	ands	r3, r2
 8001c48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d003      	beq.n	8001c5e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c5e:	4a0f      	ldr	r2, [pc, #60]	@ (8001c9c <HAL_GPIO_Init+0x2e0>)
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	3301      	adds	r3, #1
 8001c68:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	fa22 f303 	lsr.w	r3, r2, r3
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	f47f aea9 	bne.w	80019cc <HAL_GPIO_Init+0x10>
  }
}
 8001c7a:	bf00      	nop
 8001c7c:	bf00      	nop
 8001c7e:	371c      	adds	r7, #28
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	40010000 	.word	0x40010000
 8001c90:	48000400 	.word	0x48000400
 8001c94:	48000800 	.word	0x48000800
 8001c98:	48000c00 	.word	0x48000c00
 8001c9c:	40010400 	.word	0x40010400

08001ca0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	460b      	mov	r3, r1
 8001caa:	807b      	strh	r3, [r7, #2]
 8001cac:	4613      	mov	r3, r2
 8001cae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cb0:	787b      	ldrb	r3, [r7, #1]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d003      	beq.n	8001cbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001cb6:	887a      	ldrh	r2, [r7, #2]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001cbc:	e002      	b.n	8001cc4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001cbe:	887a      	ldrh	r2, [r7, #2]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d101      	bne.n	8001ce2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e08d      	b.n	8001dfe <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d106      	bne.n	8001cfc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f7ff fc40 	bl	800157c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2224      	movs	r2, #36	@ 0x24
 8001d00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f022 0201 	bic.w	r2, r2, #1
 8001d12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685a      	ldr	r2, [r3, #4]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001d20:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	689a      	ldr	r2, [r3, #8]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d30:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d107      	bne.n	8001d4a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	689a      	ldr	r2, [r3, #8]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d46:	609a      	str	r2, [r3, #8]
 8001d48:	e006      	b.n	8001d58 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	689a      	ldr	r2, [r3, #8]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001d56:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d108      	bne.n	8001d72 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	685a      	ldr	r2, [r3, #4]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d6e:	605a      	str	r2, [r3, #4]
 8001d70:	e007      	b.n	8001d82 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	685a      	ldr	r2, [r3, #4]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d80:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	6812      	ldr	r2, [r2, #0]
 8001d8c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d94:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	68da      	ldr	r2, [r3, #12]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001da4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	691a      	ldr	r2, [r3, #16]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	69d9      	ldr	r1, [r3, #28]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a1a      	ldr	r2, [r3, #32]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f042 0201 	orr.w	r2, r2, #1
 8001dde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2220      	movs	r2, #32
 8001dea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
	...

08001e08 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b088      	sub	sp, #32
 8001e0c:	af02      	add	r7, sp, #8
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	607a      	str	r2, [r7, #4]
 8001e12:	461a      	mov	r2, r3
 8001e14:	460b      	mov	r3, r1
 8001e16:	817b      	strh	r3, [r7, #10]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	2b20      	cmp	r3, #32
 8001e26:	f040 80fd 	bne.w	8002024 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d101      	bne.n	8001e38 <HAL_I2C_Master_Transmit+0x30>
 8001e34:	2302      	movs	r3, #2
 8001e36:	e0f6      	b.n	8002026 <HAL_I2C_Master_Transmit+0x21e>
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001e40:	f7ff fca6 	bl	8001790 <HAL_GetTick>
 8001e44:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	9300      	str	r3, [sp, #0]
 8001e4a:	2319      	movs	r3, #25
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001e52:	68f8      	ldr	r0, [r7, #12]
 8001e54:	f000 fb72 	bl	800253c <I2C_WaitOnFlagUntilTimeout>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e0e1      	b.n	8002026 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2221      	movs	r2, #33	@ 0x21
 8001e66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2210      	movs	r2, #16
 8001e6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2200      	movs	r2, #0
 8001e76:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	893a      	ldrh	r2, [r7, #8]
 8001e82:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2200      	movs	r2, #0
 8001e88:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	2bff      	cmp	r3, #255	@ 0xff
 8001e92:	d906      	bls.n	8001ea2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	22ff      	movs	r2, #255	@ 0xff
 8001e98:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001e9a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001e9e:	617b      	str	r3, [r7, #20]
 8001ea0:	e007      	b.n	8001eb2 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ea6:	b29a      	uxth	r2, r3
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001eac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001eb0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d024      	beq.n	8001f04 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ebe:	781a      	ldrb	r2, [r3, #0]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eca:	1c5a      	adds	r2, r3, #1
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	b2da      	uxtb	r2, r3
 8001ef4:	8979      	ldrh	r1, [r7, #10]
 8001ef6:	4b4e      	ldr	r3, [pc, #312]	@ (8002030 <HAL_I2C_Master_Transmit+0x228>)
 8001ef8:	9300      	str	r3, [sp, #0]
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	68f8      	ldr	r0, [r7, #12]
 8001efe:	f000 fd6d 	bl	80029dc <I2C_TransferConfig>
 8001f02:	e066      	b.n	8001fd2 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f08:	b2da      	uxtb	r2, r3
 8001f0a:	8979      	ldrh	r1, [r7, #10]
 8001f0c:	4b48      	ldr	r3, [pc, #288]	@ (8002030 <HAL_I2C_Master_Transmit+0x228>)
 8001f0e:	9300      	str	r3, [sp, #0]
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	68f8      	ldr	r0, [r7, #12]
 8001f14:	f000 fd62 	bl	80029dc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001f18:	e05b      	b.n	8001fd2 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	6a39      	ldr	r1, [r7, #32]
 8001f1e:	68f8      	ldr	r0, [r7, #12]
 8001f20:	f000 fb65 	bl	80025ee <I2C_WaitOnTXISFlagUntilTimeout>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e07b      	b.n	8002026 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f32:	781a      	ldrb	r2, [r3, #0]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f3e:	1c5a      	adds	r2, r3, #1
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	b29a      	uxth	r2, r3
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f56:	3b01      	subs	r3, #1
 8001f58:	b29a      	uxth	r2, r3
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d034      	beq.n	8001fd2 <HAL_I2C_Master_Transmit+0x1ca>
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d130      	bne.n	8001fd2 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	9300      	str	r3, [sp, #0]
 8001f74:	6a3b      	ldr	r3, [r7, #32]
 8001f76:	2200      	movs	r2, #0
 8001f78:	2180      	movs	r1, #128	@ 0x80
 8001f7a:	68f8      	ldr	r0, [r7, #12]
 8001f7c:	f000 fade 	bl	800253c <I2C_WaitOnFlagUntilTimeout>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e04d      	b.n	8002026 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	2bff      	cmp	r3, #255	@ 0xff
 8001f92:	d90e      	bls.n	8001fb2 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	22ff      	movs	r2, #255	@ 0xff
 8001f98:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f9e:	b2da      	uxtb	r2, r3
 8001fa0:	8979      	ldrh	r1, [r7, #10]
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	9300      	str	r3, [sp, #0]
 8001fa6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001faa:	68f8      	ldr	r0, [r7, #12]
 8001fac:	f000 fd16 	bl	80029dc <I2C_TransferConfig>
 8001fb0:	e00f      	b.n	8001fd2 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fc0:	b2da      	uxtb	r2, r3
 8001fc2:	8979      	ldrh	r1, [r7, #10]
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	9300      	str	r3, [sp, #0]
 8001fc8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001fcc:	68f8      	ldr	r0, [r7, #12]
 8001fce:	f000 fd05 	bl	80029dc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d19e      	bne.n	8001f1a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	6a39      	ldr	r1, [r7, #32]
 8001fe0:	68f8      	ldr	r0, [r7, #12]
 8001fe2:	f000 fb4b 	bl	800267c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e01a      	b.n	8002026 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2220      	movs	r2, #32
 8001ff6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6859      	ldr	r1, [r3, #4]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	4b0c      	ldr	r3, [pc, #48]	@ (8002034 <HAL_I2C_Master_Transmit+0x22c>)
 8002004:	400b      	ands	r3, r1
 8002006:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2220      	movs	r2, #32
 800200c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002020:	2300      	movs	r3, #0
 8002022:	e000      	b.n	8002026 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002024:	2302      	movs	r3, #2
  }
}
 8002026:	4618      	mov	r0, r3
 8002028:	3718      	adds	r7, #24
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	80002000 	.word	0x80002000
 8002034:	fe00e800 	.word	0xfe00e800

08002038 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b088      	sub	sp, #32
 800203c:	af02      	add	r7, sp, #8
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	607a      	str	r2, [r7, #4]
 8002042:	461a      	mov	r2, r3
 8002044:	460b      	mov	r3, r1
 8002046:	817b      	strh	r3, [r7, #10]
 8002048:	4613      	mov	r3, r2
 800204a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002052:	b2db      	uxtb	r3, r3
 8002054:	2b20      	cmp	r3, #32
 8002056:	f040 80db 	bne.w	8002210 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002060:	2b01      	cmp	r3, #1
 8002062:	d101      	bne.n	8002068 <HAL_I2C_Master_Receive+0x30>
 8002064:	2302      	movs	r3, #2
 8002066:	e0d4      	b.n	8002212 <HAL_I2C_Master_Receive+0x1da>
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002070:	f7ff fb8e 	bl	8001790 <HAL_GetTick>
 8002074:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	9300      	str	r3, [sp, #0]
 800207a:	2319      	movs	r3, #25
 800207c:	2201      	movs	r2, #1
 800207e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002082:	68f8      	ldr	r0, [r7, #12]
 8002084:	f000 fa5a 	bl	800253c <I2C_WaitOnFlagUntilTimeout>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e0bf      	b.n	8002212 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2222      	movs	r2, #34	@ 0x22
 8002096:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2210      	movs	r2, #16
 800209e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2200      	movs	r2, #0
 80020a6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	893a      	ldrh	r2, [r7, #8]
 80020b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2200      	movs	r2, #0
 80020b8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020be:	b29b      	uxth	r3, r3
 80020c0:	2bff      	cmp	r3, #255	@ 0xff
 80020c2:	d90e      	bls.n	80020e2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2201      	movs	r2, #1
 80020c8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020ce:	b2da      	uxtb	r2, r3
 80020d0:	8979      	ldrh	r1, [r7, #10]
 80020d2:	4b52      	ldr	r3, [pc, #328]	@ (800221c <HAL_I2C_Master_Receive+0x1e4>)
 80020d4:	9300      	str	r3, [sp, #0]
 80020d6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80020da:	68f8      	ldr	r0, [r7, #12]
 80020dc:	f000 fc7e 	bl	80029dc <I2C_TransferConfig>
 80020e0:	e06d      	b.n	80021be <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020e6:	b29a      	uxth	r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020f0:	b2da      	uxtb	r2, r3
 80020f2:	8979      	ldrh	r1, [r7, #10]
 80020f4:	4b49      	ldr	r3, [pc, #292]	@ (800221c <HAL_I2C_Master_Receive+0x1e4>)
 80020f6:	9300      	str	r3, [sp, #0]
 80020f8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80020fc:	68f8      	ldr	r0, [r7, #12]
 80020fe:	f000 fc6d 	bl	80029dc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002102:	e05c      	b.n	80021be <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002104:	697a      	ldr	r2, [r7, #20]
 8002106:	6a39      	ldr	r1, [r7, #32]
 8002108:	68f8      	ldr	r0, [r7, #12]
 800210a:	f000 fafb 	bl	8002704 <I2C_WaitOnRXNEFlagUntilTimeout>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e07c      	b.n	8002212 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002122:	b2d2      	uxtb	r2, r2
 8002124:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800212a:	1c5a      	adds	r2, r3, #1
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002134:	3b01      	subs	r3, #1
 8002136:	b29a      	uxth	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002140:	b29b      	uxth	r3, r3
 8002142:	3b01      	subs	r3, #1
 8002144:	b29a      	uxth	r2, r3
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800214e:	b29b      	uxth	r3, r3
 8002150:	2b00      	cmp	r3, #0
 8002152:	d034      	beq.n	80021be <HAL_I2C_Master_Receive+0x186>
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002158:	2b00      	cmp	r3, #0
 800215a:	d130      	bne.n	80021be <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	9300      	str	r3, [sp, #0]
 8002160:	6a3b      	ldr	r3, [r7, #32]
 8002162:	2200      	movs	r2, #0
 8002164:	2180      	movs	r1, #128	@ 0x80
 8002166:	68f8      	ldr	r0, [r7, #12]
 8002168:	f000 f9e8 	bl	800253c <I2C_WaitOnFlagUntilTimeout>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e04d      	b.n	8002212 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800217a:	b29b      	uxth	r3, r3
 800217c:	2bff      	cmp	r3, #255	@ 0xff
 800217e:	d90e      	bls.n	800219e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	22ff      	movs	r2, #255	@ 0xff
 8002184:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800218a:	b2da      	uxtb	r2, r3
 800218c:	8979      	ldrh	r1, [r7, #10]
 800218e:	2300      	movs	r3, #0
 8002190:	9300      	str	r3, [sp, #0]
 8002192:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002196:	68f8      	ldr	r0, [r7, #12]
 8002198:	f000 fc20 	bl	80029dc <I2C_TransferConfig>
 800219c:	e00f      	b.n	80021be <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021ac:	b2da      	uxtb	r2, r3
 80021ae:	8979      	ldrh	r1, [r7, #10]
 80021b0:	2300      	movs	r3, #0
 80021b2:	9300      	str	r3, [sp, #0]
 80021b4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80021b8:	68f8      	ldr	r0, [r7, #12]
 80021ba:	f000 fc0f 	bl	80029dc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d19d      	bne.n	8002104 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021c8:	697a      	ldr	r2, [r7, #20]
 80021ca:	6a39      	ldr	r1, [r7, #32]
 80021cc:	68f8      	ldr	r0, [r7, #12]
 80021ce:	f000 fa55 	bl	800267c <I2C_WaitOnSTOPFlagUntilTimeout>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e01a      	b.n	8002212 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2220      	movs	r2, #32
 80021e2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	6859      	ldr	r1, [r3, #4]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	4b0c      	ldr	r3, [pc, #48]	@ (8002220 <HAL_I2C_Master_Receive+0x1e8>)
 80021f0:	400b      	ands	r3, r1
 80021f2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2220      	movs	r2, #32
 80021f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2200      	movs	r2, #0
 8002200:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800220c:	2300      	movs	r3, #0
 800220e:	e000      	b.n	8002212 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002210:	2302      	movs	r3, #2
  }
}
 8002212:	4618      	mov	r0, r3
 8002214:	3718      	adds	r7, #24
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	80002400 	.word	0x80002400
 8002220:	fe00e800 	.word	0xfe00e800

08002224 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b088      	sub	sp, #32
 8002228:	af02      	add	r7, sp, #8
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	4608      	mov	r0, r1
 800222e:	4611      	mov	r1, r2
 8002230:	461a      	mov	r2, r3
 8002232:	4603      	mov	r3, r0
 8002234:	817b      	strh	r3, [r7, #10]
 8002236:	460b      	mov	r3, r1
 8002238:	813b      	strh	r3, [r7, #8]
 800223a:	4613      	mov	r3, r2
 800223c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b20      	cmp	r3, #32
 8002248:	f040 80f9 	bne.w	800243e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800224c:	6a3b      	ldr	r3, [r7, #32]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d002      	beq.n	8002258 <HAL_I2C_Mem_Write+0x34>
 8002252:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002254:	2b00      	cmp	r3, #0
 8002256:	d105      	bne.n	8002264 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800225e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e0ed      	b.n	8002440 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800226a:	2b01      	cmp	r3, #1
 800226c:	d101      	bne.n	8002272 <HAL_I2C_Mem_Write+0x4e>
 800226e:	2302      	movs	r3, #2
 8002270:	e0e6      	b.n	8002440 <HAL_I2C_Mem_Write+0x21c>
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2201      	movs	r2, #1
 8002276:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800227a:	f7ff fa89 	bl	8001790 <HAL_GetTick>
 800227e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	9300      	str	r3, [sp, #0]
 8002284:	2319      	movs	r3, #25
 8002286:	2201      	movs	r2, #1
 8002288:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800228c:	68f8      	ldr	r0, [r7, #12]
 800228e:	f000 f955 	bl	800253c <I2C_WaitOnFlagUntilTimeout>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e0d1      	b.n	8002440 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2221      	movs	r2, #33	@ 0x21
 80022a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2240      	movs	r2, #64	@ 0x40
 80022a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2200      	movs	r2, #0
 80022b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6a3a      	ldr	r2, [r7, #32]
 80022b6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80022bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2200      	movs	r2, #0
 80022c2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80022c4:	88f8      	ldrh	r0, [r7, #6]
 80022c6:	893a      	ldrh	r2, [r7, #8]
 80022c8:	8979      	ldrh	r1, [r7, #10]
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	9301      	str	r3, [sp, #4]
 80022ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022d0:	9300      	str	r3, [sp, #0]
 80022d2:	4603      	mov	r3, r0
 80022d4:	68f8      	ldr	r0, [r7, #12]
 80022d6:	f000 f8b9 	bl	800244c <I2C_RequestMemoryWrite>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d005      	beq.n	80022ec <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e0a9      	b.n	8002440 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	2bff      	cmp	r3, #255	@ 0xff
 80022f4:	d90e      	bls.n	8002314 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	22ff      	movs	r2, #255	@ 0xff
 80022fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002300:	b2da      	uxtb	r2, r3
 8002302:	8979      	ldrh	r1, [r7, #10]
 8002304:	2300      	movs	r3, #0
 8002306:	9300      	str	r3, [sp, #0]
 8002308:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800230c:	68f8      	ldr	r0, [r7, #12]
 800230e:	f000 fb65 	bl	80029dc <I2C_TransferConfig>
 8002312:	e00f      	b.n	8002334 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002318:	b29a      	uxth	r2, r3
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002322:	b2da      	uxtb	r2, r3
 8002324:	8979      	ldrh	r1, [r7, #10]
 8002326:	2300      	movs	r3, #0
 8002328:	9300      	str	r3, [sp, #0]
 800232a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800232e:	68f8      	ldr	r0, [r7, #12]
 8002330:	f000 fb54 	bl	80029dc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002334:	697a      	ldr	r2, [r7, #20]
 8002336:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002338:	68f8      	ldr	r0, [r7, #12]
 800233a:	f000 f958 	bl	80025ee <I2C_WaitOnTXISFlagUntilTimeout>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e07b      	b.n	8002440 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800234c:	781a      	ldrb	r2, [r3, #0]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002358:	1c5a      	adds	r2, r3, #1
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002362:	b29b      	uxth	r3, r3
 8002364:	3b01      	subs	r3, #1
 8002366:	b29a      	uxth	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002370:	3b01      	subs	r3, #1
 8002372:	b29a      	uxth	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800237c:	b29b      	uxth	r3, r3
 800237e:	2b00      	cmp	r3, #0
 8002380:	d034      	beq.n	80023ec <HAL_I2C_Mem_Write+0x1c8>
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002386:	2b00      	cmp	r3, #0
 8002388:	d130      	bne.n	80023ec <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	9300      	str	r3, [sp, #0]
 800238e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002390:	2200      	movs	r2, #0
 8002392:	2180      	movs	r1, #128	@ 0x80
 8002394:	68f8      	ldr	r0, [r7, #12]
 8002396:	f000 f8d1 	bl	800253c <I2C_WaitOnFlagUntilTimeout>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e04d      	b.n	8002440 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	2bff      	cmp	r3, #255	@ 0xff
 80023ac:	d90e      	bls.n	80023cc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	22ff      	movs	r2, #255	@ 0xff
 80023b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023b8:	b2da      	uxtb	r2, r3
 80023ba:	8979      	ldrh	r1, [r7, #10]
 80023bc:	2300      	movs	r3, #0
 80023be:	9300      	str	r3, [sp, #0]
 80023c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80023c4:	68f8      	ldr	r0, [r7, #12]
 80023c6:	f000 fb09 	bl	80029dc <I2C_TransferConfig>
 80023ca:	e00f      	b.n	80023ec <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023d0:	b29a      	uxth	r2, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023da:	b2da      	uxtb	r2, r3
 80023dc:	8979      	ldrh	r1, [r7, #10]
 80023de:	2300      	movs	r3, #0
 80023e0:	9300      	str	r3, [sp, #0]
 80023e2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80023e6:	68f8      	ldr	r0, [r7, #12]
 80023e8:	f000 faf8 	bl	80029dc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d19e      	bne.n	8002334 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023f6:	697a      	ldr	r2, [r7, #20]
 80023f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80023fa:	68f8      	ldr	r0, [r7, #12]
 80023fc:	f000 f93e 	bl	800267c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e01a      	b.n	8002440 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2220      	movs	r2, #32
 8002410:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	6859      	ldr	r1, [r3, #4]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	4b0a      	ldr	r3, [pc, #40]	@ (8002448 <HAL_I2C_Mem_Write+0x224>)
 800241e:	400b      	ands	r3, r1
 8002420:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2220      	movs	r2, #32
 8002426:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800243a:	2300      	movs	r3, #0
 800243c:	e000      	b.n	8002440 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800243e:	2302      	movs	r3, #2
  }
}
 8002440:	4618      	mov	r0, r3
 8002442:	3718      	adds	r7, #24
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	fe00e800 	.word	0xfe00e800

0800244c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af02      	add	r7, sp, #8
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	4608      	mov	r0, r1
 8002456:	4611      	mov	r1, r2
 8002458:	461a      	mov	r2, r3
 800245a:	4603      	mov	r3, r0
 800245c:	817b      	strh	r3, [r7, #10]
 800245e:	460b      	mov	r3, r1
 8002460:	813b      	strh	r3, [r7, #8]
 8002462:	4613      	mov	r3, r2
 8002464:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002466:	88fb      	ldrh	r3, [r7, #6]
 8002468:	b2da      	uxtb	r2, r3
 800246a:	8979      	ldrh	r1, [r7, #10]
 800246c:	4b20      	ldr	r3, [pc, #128]	@ (80024f0 <I2C_RequestMemoryWrite+0xa4>)
 800246e:	9300      	str	r3, [sp, #0]
 8002470:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002474:	68f8      	ldr	r0, [r7, #12]
 8002476:	f000 fab1 	bl	80029dc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800247a:	69fa      	ldr	r2, [r7, #28]
 800247c:	69b9      	ldr	r1, [r7, #24]
 800247e:	68f8      	ldr	r0, [r7, #12]
 8002480:	f000 f8b5 	bl	80025ee <I2C_WaitOnTXISFlagUntilTimeout>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e02c      	b.n	80024e8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800248e:	88fb      	ldrh	r3, [r7, #6]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d105      	bne.n	80024a0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002494:	893b      	ldrh	r3, [r7, #8]
 8002496:	b2da      	uxtb	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	629a      	str	r2, [r3, #40]	@ 0x28
 800249e:	e015      	b.n	80024cc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80024a0:	893b      	ldrh	r3, [r7, #8]
 80024a2:	0a1b      	lsrs	r3, r3, #8
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	b2da      	uxtb	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024ae:	69fa      	ldr	r2, [r7, #28]
 80024b0:	69b9      	ldr	r1, [r7, #24]
 80024b2:	68f8      	ldr	r0, [r7, #12]
 80024b4:	f000 f89b 	bl	80025ee <I2C_WaitOnTXISFlagUntilTimeout>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e012      	b.n	80024e8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80024c2:	893b      	ldrh	r3, [r7, #8]
 80024c4:	b2da      	uxtb	r2, r3
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	2200      	movs	r2, #0
 80024d4:	2180      	movs	r1, #128	@ 0x80
 80024d6:	68f8      	ldr	r0, [r7, #12]
 80024d8:	f000 f830 	bl	800253c <I2C_WaitOnFlagUntilTimeout>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e000      	b.n	80024e8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3710      	adds	r7, #16
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	80002000 	.word	0x80002000

080024f4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b02      	cmp	r3, #2
 8002508:	d103      	bne.n	8002512 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2200      	movs	r2, #0
 8002510:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	f003 0301 	and.w	r3, r3, #1
 800251c:	2b01      	cmp	r3, #1
 800251e:	d007      	beq.n	8002530 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	699a      	ldr	r2, [r3, #24]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f042 0201 	orr.w	r2, r2, #1
 800252e:	619a      	str	r2, [r3, #24]
  }
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	603b      	str	r3, [r7, #0]
 8002548:	4613      	mov	r3, r2
 800254a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800254c:	e03b      	b.n	80025c6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	6839      	ldr	r1, [r7, #0]
 8002552:	68f8      	ldr	r0, [r7, #12]
 8002554:	f000 f962 	bl	800281c <I2C_IsErrorOccurred>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e041      	b.n	80025e6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002568:	d02d      	beq.n	80025c6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800256a:	f7ff f911 	bl	8001790 <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	429a      	cmp	r2, r3
 8002578:	d302      	bcc.n	8002580 <I2C_WaitOnFlagUntilTimeout+0x44>
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d122      	bne.n	80025c6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	699a      	ldr	r2, [r3, #24]
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	4013      	ands	r3, r2
 800258a:	68ba      	ldr	r2, [r7, #8]
 800258c:	429a      	cmp	r2, r3
 800258e:	bf0c      	ite	eq
 8002590:	2301      	moveq	r3, #1
 8002592:	2300      	movne	r3, #0
 8002594:	b2db      	uxtb	r3, r3
 8002596:	461a      	mov	r2, r3
 8002598:	79fb      	ldrb	r3, [r7, #7]
 800259a:	429a      	cmp	r2, r3
 800259c:	d113      	bne.n	80025c6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025a2:	f043 0220 	orr.w	r2, r3, #32
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2220      	movs	r2, #32
 80025ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e00f      	b.n	80025e6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	699a      	ldr	r2, [r3, #24]
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	4013      	ands	r3, r2
 80025d0:	68ba      	ldr	r2, [r7, #8]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	bf0c      	ite	eq
 80025d6:	2301      	moveq	r3, #1
 80025d8:	2300      	movne	r3, #0
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	461a      	mov	r2, r3
 80025de:	79fb      	ldrb	r3, [r7, #7]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d0b4      	beq.n	800254e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3710      	adds	r7, #16
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b084      	sub	sp, #16
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	60f8      	str	r0, [r7, #12]
 80025f6:	60b9      	str	r1, [r7, #8]
 80025f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80025fa:	e033      	b.n	8002664 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	68b9      	ldr	r1, [r7, #8]
 8002600:	68f8      	ldr	r0, [r7, #12]
 8002602:	f000 f90b 	bl	800281c <I2C_IsErrorOccurred>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e031      	b.n	8002674 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002616:	d025      	beq.n	8002664 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002618:	f7ff f8ba 	bl	8001790 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	68ba      	ldr	r2, [r7, #8]
 8002624:	429a      	cmp	r2, r3
 8002626:	d302      	bcc.n	800262e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d11a      	bne.n	8002664 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	699b      	ldr	r3, [r3, #24]
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b02      	cmp	r3, #2
 800263a:	d013      	beq.n	8002664 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002640:	f043 0220 	orr.w	r2, r3, #32
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2220      	movs	r2, #32
 800264c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e007      	b.n	8002674 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b02      	cmp	r3, #2
 8002670:	d1c4      	bne.n	80025fc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002672:	2300      	movs	r3, #0
}
 8002674:	4618      	mov	r0, r3
 8002676:	3710      	adds	r7, #16
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002688:	e02f      	b.n	80026ea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	68b9      	ldr	r1, [r7, #8]
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f000 f8c4 	bl	800281c <I2C_IsErrorOccurred>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e02d      	b.n	80026fa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800269e:	f7ff f877 	bl	8001790 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	68ba      	ldr	r2, [r7, #8]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d302      	bcc.n	80026b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d11a      	bne.n	80026ea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	f003 0320 	and.w	r3, r3, #32
 80026be:	2b20      	cmp	r3, #32
 80026c0:	d013      	beq.n	80026ea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026c6:	f043 0220 	orr.w	r2, r3, #32
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2220      	movs	r2, #32
 80026d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e007      	b.n	80026fa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	f003 0320 	and.w	r3, r3, #32
 80026f4:	2b20      	cmp	r3, #32
 80026f6:	d1c8      	bne.n	800268a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3710      	adds	r7, #16
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
	...

08002704 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b086      	sub	sp, #24
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002710:	2300      	movs	r3, #0
 8002712:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002714:	e071      	b.n	80027fa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	68b9      	ldr	r1, [r7, #8]
 800271a:	68f8      	ldr	r0, [r7, #12]
 800271c:	f000 f87e 	bl	800281c <I2C_IsErrorOccurred>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	f003 0320 	and.w	r3, r3, #32
 8002734:	2b20      	cmp	r3, #32
 8002736:	d13b      	bne.n	80027b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8002738:	7dfb      	ldrb	r3, [r7, #23]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d138      	bne.n	80027b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	f003 0304 	and.w	r3, r3, #4
 8002748:	2b04      	cmp	r3, #4
 800274a:	d105      	bne.n	8002758 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8002754:	2300      	movs	r3, #0
 8002756:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	f003 0310 	and.w	r3, r3, #16
 8002762:	2b10      	cmp	r3, #16
 8002764:	d121      	bne.n	80027aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2210      	movs	r2, #16
 800276c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2204      	movs	r2, #4
 8002772:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2220      	movs	r2, #32
 800277a:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	6859      	ldr	r1, [r3, #4]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	4b24      	ldr	r3, [pc, #144]	@ (8002818 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8002788:	400b      	ands	r3, r1
 800278a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2220      	movs	r2, #32
 8002790:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	75fb      	strb	r3, [r7, #23]
 80027a8:	e002      	b.n	80027b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80027b0:	f7fe ffee 	bl	8001790 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	68ba      	ldr	r2, [r7, #8]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d302      	bcc.n	80027c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d119      	bne.n	80027fa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80027c6:	7dfb      	ldrb	r3, [r7, #23]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d116      	bne.n	80027fa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	f003 0304 	and.w	r3, r3, #4
 80027d6:	2b04      	cmp	r3, #4
 80027d8:	d00f      	beq.n	80027fa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027de:	f043 0220 	orr.w	r2, r3, #32
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2220      	movs	r2, #32
 80027ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	f003 0304 	and.w	r3, r3, #4
 8002804:	2b04      	cmp	r3, #4
 8002806:	d002      	beq.n	800280e <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8002808:	7dfb      	ldrb	r3, [r7, #23]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d083      	beq.n	8002716 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800280e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002810:	4618      	mov	r0, r3
 8002812:	3718      	adds	r7, #24
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	fe00e800 	.word	0xfe00e800

0800281c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b08a      	sub	sp, #40	@ 0x28
 8002820:	af00      	add	r7, sp, #0
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002828:	2300      	movs	r3, #0
 800282a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	699b      	ldr	r3, [r3, #24]
 8002834:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002836:	2300      	movs	r3, #0
 8002838:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	f003 0310 	and.w	r3, r3, #16
 8002844:	2b00      	cmp	r3, #0
 8002846:	d068      	beq.n	800291a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2210      	movs	r2, #16
 800284e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002850:	e049      	b.n	80028e6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002858:	d045      	beq.n	80028e6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800285a:	f7fe ff99 	bl	8001790 <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	68ba      	ldr	r2, [r7, #8]
 8002866:	429a      	cmp	r2, r3
 8002868:	d302      	bcc.n	8002870 <I2C_IsErrorOccurred+0x54>
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d13a      	bne.n	80028e6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800287a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002882:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800288e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002892:	d121      	bne.n	80028d8 <I2C_IsErrorOccurred+0xbc>
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800289a:	d01d      	beq.n	80028d8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800289c:	7cfb      	ldrb	r3, [r7, #19]
 800289e:	2b20      	cmp	r3, #32
 80028a0:	d01a      	beq.n	80028d8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	685a      	ldr	r2, [r3, #4]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80028b0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80028b2:	f7fe ff6d 	bl	8001790 <HAL_GetTick>
 80028b6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028b8:	e00e      	b.n	80028d8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80028ba:	f7fe ff69 	bl	8001790 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	2b19      	cmp	r3, #25
 80028c6:	d907      	bls.n	80028d8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80028c8:	6a3b      	ldr	r3, [r7, #32]
 80028ca:	f043 0320 	orr.w	r3, r3, #32
 80028ce:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80028d6:	e006      	b.n	80028e6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	f003 0320 	and.w	r3, r3, #32
 80028e2:	2b20      	cmp	r3, #32
 80028e4:	d1e9      	bne.n	80028ba <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	f003 0320 	and.w	r3, r3, #32
 80028f0:	2b20      	cmp	r3, #32
 80028f2:	d003      	beq.n	80028fc <I2C_IsErrorOccurred+0xe0>
 80028f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d0aa      	beq.n	8002852 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80028fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002900:	2b00      	cmp	r3, #0
 8002902:	d103      	bne.n	800290c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2220      	movs	r2, #32
 800290a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800290c:	6a3b      	ldr	r3, [r7, #32]
 800290e:	f043 0304 	orr.w	r3, r3, #4
 8002912:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002928:	2b00      	cmp	r3, #0
 800292a:	d00b      	beq.n	8002944 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800292c:	6a3b      	ldr	r3, [r7, #32]
 800292e:	f043 0301 	orr.w	r3, r3, #1
 8002932:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800293c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00b      	beq.n	8002966 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800294e:	6a3b      	ldr	r3, [r7, #32]
 8002950:	f043 0308 	orr.w	r3, r3, #8
 8002954:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800295e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800296c:	2b00      	cmp	r3, #0
 800296e:	d00b      	beq.n	8002988 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002970:	6a3b      	ldr	r3, [r7, #32]
 8002972:	f043 0302 	orr.w	r3, r3, #2
 8002976:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002980:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002988:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800298c:	2b00      	cmp	r3, #0
 800298e:	d01c      	beq.n	80029ca <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002990:	68f8      	ldr	r0, [r7, #12]
 8002992:	f7ff fdaf 	bl	80024f4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	6859      	ldr	r1, [r3, #4]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	4b0d      	ldr	r3, [pc, #52]	@ (80029d8 <I2C_IsErrorOccurred+0x1bc>)
 80029a2:	400b      	ands	r3, r1
 80029a4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80029aa:	6a3b      	ldr	r3, [r7, #32]
 80029ac:	431a      	orrs	r2, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2220      	movs	r2, #32
 80029b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80029ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3728      	adds	r7, #40	@ 0x28
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	fe00e800 	.word	0xfe00e800

080029dc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80029dc:	b480      	push	{r7}
 80029de:	b087      	sub	sp, #28
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	607b      	str	r3, [r7, #4]
 80029e6:	460b      	mov	r3, r1
 80029e8:	817b      	strh	r3, [r7, #10]
 80029ea:	4613      	mov	r3, r2
 80029ec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80029ee:	897b      	ldrh	r3, [r7, #10]
 80029f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80029f4:	7a7b      	ldrb	r3, [r7, #9]
 80029f6:	041b      	lsls	r3, r3, #16
 80029f8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80029fc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a02:	6a3b      	ldr	r3, [r7, #32]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002a0a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	685a      	ldr	r2, [r3, #4]
 8002a12:	6a3b      	ldr	r3, [r7, #32]
 8002a14:	0d5b      	lsrs	r3, r3, #21
 8002a16:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002a1a:	4b08      	ldr	r3, [pc, #32]	@ (8002a3c <I2C_TransferConfig+0x60>)
 8002a1c:	430b      	orrs	r3, r1
 8002a1e:	43db      	mvns	r3, r3
 8002a20:	ea02 0103 	and.w	r1, r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	697a      	ldr	r2, [r7, #20]
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002a2e:	bf00      	nop
 8002a30:	371c      	adds	r7, #28
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	03ff63ff 	.word	0x03ff63ff

08002a40 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b20      	cmp	r3, #32
 8002a54:	d138      	bne.n	8002ac8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d101      	bne.n	8002a64 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002a60:	2302      	movs	r3, #2
 8002a62:	e032      	b.n	8002aca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2224      	movs	r2, #36	@ 0x24
 8002a70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f022 0201 	bic.w	r2, r2, #1
 8002a82:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002a92:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	6819      	ldr	r1, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f042 0201 	orr.w	r2, r2, #1
 8002ab2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2220      	movs	r2, #32
 8002ab8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	e000      	b.n	8002aca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ac8:	2302      	movs	r3, #2
  }
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr

08002ad6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b085      	sub	sp, #20
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
 8002ade:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	2b20      	cmp	r3, #32
 8002aea:	d139      	bne.n	8002b60 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d101      	bne.n	8002afa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002af6:	2302      	movs	r3, #2
 8002af8:	e033      	b.n	8002b62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2201      	movs	r2, #1
 8002afe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2224      	movs	r2, #36	@ 0x24
 8002b06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f022 0201 	bic.w	r2, r2, #1
 8002b18:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002b28:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	021b      	lsls	r3, r3, #8
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f042 0201 	orr.w	r2, r2, #1
 8002b4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2220      	movs	r2, #32
 8002b50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	e000      	b.n	8002b62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002b60:	2302      	movs	r3, #2
  }
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3714      	adds	r7, #20
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
	...

08002b70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b7c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b80:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b86:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d102      	bne.n	8002b96 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	f001 b823 	b.w	8003bdc <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b9a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	f000 817d 	beq.w	8002ea6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002bac:	4bbc      	ldr	r3, [pc, #752]	@ (8002ea0 <HAL_RCC_OscConfig+0x330>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f003 030c 	and.w	r3, r3, #12
 8002bb4:	2b04      	cmp	r3, #4
 8002bb6:	d00c      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bb8:	4bb9      	ldr	r3, [pc, #740]	@ (8002ea0 <HAL_RCC_OscConfig+0x330>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f003 030c 	and.w	r3, r3, #12
 8002bc0:	2b08      	cmp	r3, #8
 8002bc2:	d15c      	bne.n	8002c7e <HAL_RCC_OscConfig+0x10e>
 8002bc4:	4bb6      	ldr	r3, [pc, #728]	@ (8002ea0 <HAL_RCC_OscConfig+0x330>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bd0:	d155      	bne.n	8002c7e <HAL_RCC_OscConfig+0x10e>
 8002bd2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002bd6:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bda:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8002bde:	fa93 f3a3 	rbit	r3, r3
 8002be2:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002be6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bea:	fab3 f383 	clz	r3, r3
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	095b      	lsrs	r3, r3, #5
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	f043 0301 	orr.w	r3, r3, #1
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d102      	bne.n	8002c04 <HAL_RCC_OscConfig+0x94>
 8002bfe:	4ba8      	ldr	r3, [pc, #672]	@ (8002ea0 <HAL_RCC_OscConfig+0x330>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	e015      	b.n	8002c30 <HAL_RCC_OscConfig+0xc0>
 8002c04:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c08:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8002c10:	fa93 f3a3 	rbit	r3, r3
 8002c14:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002c18:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c1c:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002c20:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8002c24:	fa93 f3a3 	rbit	r3, r3
 8002c28:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8002c2c:	4b9c      	ldr	r3, [pc, #624]	@ (8002ea0 <HAL_RCC_OscConfig+0x330>)
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c30:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002c34:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8002c38:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002c3c:	fa92 f2a2 	rbit	r2, r2
 8002c40:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8002c44:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8002c48:	fab2 f282 	clz	r2, r2
 8002c4c:	b2d2      	uxtb	r2, r2
 8002c4e:	f042 0220 	orr.w	r2, r2, #32
 8002c52:	b2d2      	uxtb	r2, r2
 8002c54:	f002 021f 	and.w	r2, r2, #31
 8002c58:	2101      	movs	r1, #1
 8002c5a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c5e:	4013      	ands	r3, r2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f000 811f 	beq.w	8002ea4 <HAL_RCC_OscConfig+0x334>
 8002c66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c6a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	f040 8116 	bne.w	8002ea4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	f000 bfaf 	b.w	8003bdc <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c82:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c8e:	d106      	bne.n	8002c9e <HAL_RCC_OscConfig+0x12e>
 8002c90:	4b83      	ldr	r3, [pc, #524]	@ (8002ea0 <HAL_RCC_OscConfig+0x330>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a82      	ldr	r2, [pc, #520]	@ (8002ea0 <HAL_RCC_OscConfig+0x330>)
 8002c96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c9a:	6013      	str	r3, [r2, #0]
 8002c9c:	e036      	b.n	8002d0c <HAL_RCC_OscConfig+0x19c>
 8002c9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ca2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d10c      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x158>
 8002cae:	4b7c      	ldr	r3, [pc, #496]	@ (8002ea0 <HAL_RCC_OscConfig+0x330>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a7b      	ldr	r2, [pc, #492]	@ (8002ea0 <HAL_RCC_OscConfig+0x330>)
 8002cb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cb8:	6013      	str	r3, [r2, #0]
 8002cba:	4b79      	ldr	r3, [pc, #484]	@ (8002ea0 <HAL_RCC_OscConfig+0x330>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a78      	ldr	r2, [pc, #480]	@ (8002ea0 <HAL_RCC_OscConfig+0x330>)
 8002cc0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cc4:	6013      	str	r3, [r2, #0]
 8002cc6:	e021      	b.n	8002d0c <HAL_RCC_OscConfig+0x19c>
 8002cc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ccc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002cd8:	d10c      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x184>
 8002cda:	4b71      	ldr	r3, [pc, #452]	@ (8002ea0 <HAL_RCC_OscConfig+0x330>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a70      	ldr	r2, [pc, #448]	@ (8002ea0 <HAL_RCC_OscConfig+0x330>)
 8002ce0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ce4:	6013      	str	r3, [r2, #0]
 8002ce6:	4b6e      	ldr	r3, [pc, #440]	@ (8002ea0 <HAL_RCC_OscConfig+0x330>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a6d      	ldr	r2, [pc, #436]	@ (8002ea0 <HAL_RCC_OscConfig+0x330>)
 8002cec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cf0:	6013      	str	r3, [r2, #0]
 8002cf2:	e00b      	b.n	8002d0c <HAL_RCC_OscConfig+0x19c>
 8002cf4:	4b6a      	ldr	r3, [pc, #424]	@ (8002ea0 <HAL_RCC_OscConfig+0x330>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a69      	ldr	r2, [pc, #420]	@ (8002ea0 <HAL_RCC_OscConfig+0x330>)
 8002cfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cfe:	6013      	str	r3, [r2, #0]
 8002d00:	4b67      	ldr	r3, [pc, #412]	@ (8002ea0 <HAL_RCC_OscConfig+0x330>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a66      	ldr	r2, [pc, #408]	@ (8002ea0 <HAL_RCC_OscConfig+0x330>)
 8002d06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d0a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d0c:	4b64      	ldr	r3, [pc, #400]	@ (8002ea0 <HAL_RCC_OscConfig+0x330>)
 8002d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d10:	f023 020f 	bic.w	r2, r3, #15
 8002d14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d18:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	495f      	ldr	r1, [pc, #380]	@ (8002ea0 <HAL_RCC_OscConfig+0x330>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d2a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d059      	beq.n	8002dea <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d36:	f7fe fd2b 	bl	8001790 <HAL_GetTick>
 8002d3a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d3e:	e00a      	b.n	8002d56 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d40:	f7fe fd26 	bl	8001790 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	2b64      	cmp	r3, #100	@ 0x64
 8002d4e:	d902      	bls.n	8002d56 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	f000 bf43 	b.w	8003bdc <HAL_RCC_OscConfig+0x106c>
 8002d56:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d5a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8002d62:	fa93 f3a3 	rbit	r3, r3
 8002d66:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002d6a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d6e:	fab3 f383 	clz	r3, r3
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	095b      	lsrs	r3, r3, #5
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	f043 0301 	orr.w	r3, r3, #1
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d102      	bne.n	8002d88 <HAL_RCC_OscConfig+0x218>
 8002d82:	4b47      	ldr	r3, [pc, #284]	@ (8002ea0 <HAL_RCC_OscConfig+0x330>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	e015      	b.n	8002db4 <HAL_RCC_OscConfig+0x244>
 8002d88:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d8c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d90:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002d94:	fa93 f3a3 	rbit	r3, r3
 8002d98:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002d9c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002da0:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002da4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002da8:	fa93 f3a3 	rbit	r3, r3
 8002dac:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002db0:	4b3b      	ldr	r3, [pc, #236]	@ (8002ea0 <HAL_RCC_OscConfig+0x330>)
 8002db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002db8:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002dbc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002dc0:	fa92 f2a2 	rbit	r2, r2
 8002dc4:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002dc8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002dcc:	fab2 f282 	clz	r2, r2
 8002dd0:	b2d2      	uxtb	r2, r2
 8002dd2:	f042 0220 	orr.w	r2, r2, #32
 8002dd6:	b2d2      	uxtb	r2, r2
 8002dd8:	f002 021f 	and.w	r2, r2, #31
 8002ddc:	2101      	movs	r1, #1
 8002dde:	fa01 f202 	lsl.w	r2, r1, r2
 8002de2:	4013      	ands	r3, r2
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d0ab      	beq.n	8002d40 <HAL_RCC_OscConfig+0x1d0>
 8002de8:	e05d      	b.n	8002ea6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dea:	f7fe fcd1 	bl	8001790 <HAL_GetTick>
 8002dee:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002df2:	e00a      	b.n	8002e0a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002df4:	f7fe fccc 	bl	8001790 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b64      	cmp	r3, #100	@ 0x64
 8002e02:	d902      	bls.n	8002e0a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	f000 bee9 	b.w	8003bdc <HAL_RCC_OscConfig+0x106c>
 8002e0a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e0e:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e12:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002e16:	fa93 f3a3 	rbit	r3, r3
 8002e1a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8002e1e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e22:	fab3 f383 	clz	r3, r3
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	095b      	lsrs	r3, r3, #5
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	f043 0301 	orr.w	r3, r3, #1
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d102      	bne.n	8002e3c <HAL_RCC_OscConfig+0x2cc>
 8002e36:	4b1a      	ldr	r3, [pc, #104]	@ (8002ea0 <HAL_RCC_OscConfig+0x330>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	e015      	b.n	8002e68 <HAL_RCC_OscConfig+0x2f8>
 8002e3c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e40:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e44:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002e48:	fa93 f3a3 	rbit	r3, r3
 8002e4c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002e50:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e54:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002e58:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002e5c:	fa93 f3a3 	rbit	r3, r3
 8002e60:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002e64:	4b0e      	ldr	r3, [pc, #56]	@ (8002ea0 <HAL_RCC_OscConfig+0x330>)
 8002e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e68:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002e6c:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002e70:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002e74:	fa92 f2a2 	rbit	r2, r2
 8002e78:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002e7c:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002e80:	fab2 f282 	clz	r2, r2
 8002e84:	b2d2      	uxtb	r2, r2
 8002e86:	f042 0220 	orr.w	r2, r2, #32
 8002e8a:	b2d2      	uxtb	r2, r2
 8002e8c:	f002 021f 	and.w	r2, r2, #31
 8002e90:	2101      	movs	r1, #1
 8002e92:	fa01 f202 	lsl.w	r2, r1, r2
 8002e96:	4013      	ands	r3, r2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1ab      	bne.n	8002df4 <HAL_RCC_OscConfig+0x284>
 8002e9c:	e003      	b.n	8002ea6 <HAL_RCC_OscConfig+0x336>
 8002e9e:	bf00      	nop
 8002ea0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ea4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ea6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eaa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	f000 817d 	beq.w	80031b6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002ebc:	4ba6      	ldr	r3, [pc, #664]	@ (8003158 <HAL_RCC_OscConfig+0x5e8>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f003 030c 	and.w	r3, r3, #12
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00b      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002ec8:	4ba3      	ldr	r3, [pc, #652]	@ (8003158 <HAL_RCC_OscConfig+0x5e8>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f003 030c 	and.w	r3, r3, #12
 8002ed0:	2b08      	cmp	r3, #8
 8002ed2:	d172      	bne.n	8002fba <HAL_RCC_OscConfig+0x44a>
 8002ed4:	4ba0      	ldr	r3, [pc, #640]	@ (8003158 <HAL_RCC_OscConfig+0x5e8>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d16c      	bne.n	8002fba <HAL_RCC_OscConfig+0x44a>
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee6:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002eea:	fa93 f3a3 	rbit	r3, r3
 8002eee:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002ef2:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ef6:	fab3 f383 	clz	r3, r3
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	095b      	lsrs	r3, r3, #5
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	f043 0301 	orr.w	r3, r3, #1
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d102      	bne.n	8002f10 <HAL_RCC_OscConfig+0x3a0>
 8002f0a:	4b93      	ldr	r3, [pc, #588]	@ (8003158 <HAL_RCC_OscConfig+0x5e8>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	e013      	b.n	8002f38 <HAL_RCC_OscConfig+0x3c8>
 8002f10:	2302      	movs	r3, #2
 8002f12:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f16:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002f1a:	fa93 f3a3 	rbit	r3, r3
 8002f1e:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002f22:	2302      	movs	r3, #2
 8002f24:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002f28:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002f2c:	fa93 f3a3 	rbit	r3, r3
 8002f30:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002f34:	4b88      	ldr	r3, [pc, #544]	@ (8003158 <HAL_RCC_OscConfig+0x5e8>)
 8002f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f38:	2202      	movs	r2, #2
 8002f3a:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002f3e:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002f42:	fa92 f2a2 	rbit	r2, r2
 8002f46:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002f4a:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002f4e:	fab2 f282 	clz	r2, r2
 8002f52:	b2d2      	uxtb	r2, r2
 8002f54:	f042 0220 	orr.w	r2, r2, #32
 8002f58:	b2d2      	uxtb	r2, r2
 8002f5a:	f002 021f 	and.w	r2, r2, #31
 8002f5e:	2101      	movs	r1, #1
 8002f60:	fa01 f202 	lsl.w	r2, r1, r2
 8002f64:	4013      	ands	r3, r2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00a      	beq.n	8002f80 <HAL_RCC_OscConfig+0x410>
 8002f6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f6e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d002      	beq.n	8002f80 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	f000 be2e 	b.w	8003bdc <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f80:	4b75      	ldr	r3, [pc, #468]	@ (8003158 <HAL_RCC_OscConfig+0x5e8>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f8c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	695b      	ldr	r3, [r3, #20]
 8002f94:	21f8      	movs	r1, #248	@ 0xf8
 8002f96:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f9a:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002f9e:	fa91 f1a1 	rbit	r1, r1
 8002fa2:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002fa6:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002faa:	fab1 f181 	clz	r1, r1
 8002fae:	b2c9      	uxtb	r1, r1
 8002fb0:	408b      	lsls	r3, r1
 8002fb2:	4969      	ldr	r1, [pc, #420]	@ (8003158 <HAL_RCC_OscConfig+0x5e8>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fb8:	e0fd      	b.n	80031b6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fbe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	f000 8088 	beq.w	80030dc <HAL_RCC_OscConfig+0x56c>
 8002fcc:	2301      	movs	r3, #1
 8002fce:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd2:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002fd6:	fa93 f3a3 	rbit	r3, r3
 8002fda:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002fde:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fe2:	fab3 f383 	clz	r3, r3
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002fec:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff8:	f7fe fbca 	bl	8001790 <HAL_GetTick>
 8002ffc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003000:	e00a      	b.n	8003018 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003002:	f7fe fbc5 	bl	8001790 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b02      	cmp	r3, #2
 8003010:	d902      	bls.n	8003018 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	f000 bde2 	b.w	8003bdc <HAL_RCC_OscConfig+0x106c>
 8003018:	2302      	movs	r3, #2
 800301a:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301e:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8003022:	fa93 f3a3 	rbit	r3, r3
 8003026:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 800302a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800302e:	fab3 f383 	clz	r3, r3
 8003032:	b2db      	uxtb	r3, r3
 8003034:	095b      	lsrs	r3, r3, #5
 8003036:	b2db      	uxtb	r3, r3
 8003038:	f043 0301 	orr.w	r3, r3, #1
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b01      	cmp	r3, #1
 8003040:	d102      	bne.n	8003048 <HAL_RCC_OscConfig+0x4d8>
 8003042:	4b45      	ldr	r3, [pc, #276]	@ (8003158 <HAL_RCC_OscConfig+0x5e8>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	e013      	b.n	8003070 <HAL_RCC_OscConfig+0x500>
 8003048:	2302      	movs	r3, #2
 800304a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8003052:	fa93 f3a3 	rbit	r3, r3
 8003056:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800305a:	2302      	movs	r3, #2
 800305c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003060:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8003064:	fa93 f3a3 	rbit	r3, r3
 8003068:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 800306c:	4b3a      	ldr	r3, [pc, #232]	@ (8003158 <HAL_RCC_OscConfig+0x5e8>)
 800306e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003070:	2202      	movs	r2, #2
 8003072:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8003076:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800307a:	fa92 f2a2 	rbit	r2, r2
 800307e:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8003082:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8003086:	fab2 f282 	clz	r2, r2
 800308a:	b2d2      	uxtb	r2, r2
 800308c:	f042 0220 	orr.w	r2, r2, #32
 8003090:	b2d2      	uxtb	r2, r2
 8003092:	f002 021f 	and.w	r2, r2, #31
 8003096:	2101      	movs	r1, #1
 8003098:	fa01 f202 	lsl.w	r2, r1, r2
 800309c:	4013      	ands	r3, r2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d0af      	beq.n	8003002 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030a2:	4b2d      	ldr	r3, [pc, #180]	@ (8003158 <HAL_RCC_OscConfig+0x5e8>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80030aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030ae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	21f8      	movs	r1, #248	@ 0xf8
 80030b8:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030bc:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80030c0:	fa91 f1a1 	rbit	r1, r1
 80030c4:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80030c8:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80030cc:	fab1 f181 	clz	r1, r1
 80030d0:	b2c9      	uxtb	r1, r1
 80030d2:	408b      	lsls	r3, r1
 80030d4:	4920      	ldr	r1, [pc, #128]	@ (8003158 <HAL_RCC_OscConfig+0x5e8>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	600b      	str	r3, [r1, #0]
 80030da:	e06c      	b.n	80031b6 <HAL_RCC_OscConfig+0x646>
 80030dc:	2301      	movs	r3, #1
 80030de:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80030e6:	fa93 f3a3 	rbit	r3, r3
 80030ea:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80030ee:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030f2:	fab3 f383 	clz	r3, r3
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80030fc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	461a      	mov	r2, r3
 8003104:	2300      	movs	r3, #0
 8003106:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003108:	f7fe fb42 	bl	8001790 <HAL_GetTick>
 800310c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003110:	e00a      	b.n	8003128 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003112:	f7fe fb3d 	bl	8001790 <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b02      	cmp	r3, #2
 8003120:	d902      	bls.n	8003128 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	f000 bd5a 	b.w	8003bdc <HAL_RCC_OscConfig+0x106c>
 8003128:	2302      	movs	r3, #2
 800312a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800312e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8003132:	fa93 f3a3 	rbit	r3, r3
 8003136:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800313a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800313e:	fab3 f383 	clz	r3, r3
 8003142:	b2db      	uxtb	r3, r3
 8003144:	095b      	lsrs	r3, r3, #5
 8003146:	b2db      	uxtb	r3, r3
 8003148:	f043 0301 	orr.w	r3, r3, #1
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b01      	cmp	r3, #1
 8003150:	d104      	bne.n	800315c <HAL_RCC_OscConfig+0x5ec>
 8003152:	4b01      	ldr	r3, [pc, #4]	@ (8003158 <HAL_RCC_OscConfig+0x5e8>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	e015      	b.n	8003184 <HAL_RCC_OscConfig+0x614>
 8003158:	40021000 	.word	0x40021000
 800315c:	2302      	movs	r3, #2
 800315e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003162:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003166:	fa93 f3a3 	rbit	r3, r3
 800316a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800316e:	2302      	movs	r3, #2
 8003170:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003174:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003178:	fa93 f3a3 	rbit	r3, r3
 800317c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8003180:	4bc8      	ldr	r3, [pc, #800]	@ (80034a4 <HAL_RCC_OscConfig+0x934>)
 8003182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003184:	2202      	movs	r2, #2
 8003186:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 800318a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800318e:	fa92 f2a2 	rbit	r2, r2
 8003192:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8003196:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800319a:	fab2 f282 	clz	r2, r2
 800319e:	b2d2      	uxtb	r2, r2
 80031a0:	f042 0220 	orr.w	r2, r2, #32
 80031a4:	b2d2      	uxtb	r2, r2
 80031a6:	f002 021f 	and.w	r2, r2, #31
 80031aa:	2101      	movs	r1, #1
 80031ac:	fa01 f202 	lsl.w	r2, r1, r2
 80031b0:	4013      	ands	r3, r2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1ad      	bne.n	8003112 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031ba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0308 	and.w	r3, r3, #8
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	f000 8110 	beq.w	80033ec <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031d0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d079      	beq.n	80032d0 <HAL_RCC_OscConfig+0x760>
 80031dc:	2301      	movs	r3, #1
 80031de:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80031e6:	fa93 f3a3 	rbit	r3, r3
 80031ea:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80031ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031f2:	fab3 f383 	clz	r3, r3
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	461a      	mov	r2, r3
 80031fa:	4bab      	ldr	r3, [pc, #684]	@ (80034a8 <HAL_RCC_OscConfig+0x938>)
 80031fc:	4413      	add	r3, r2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	461a      	mov	r2, r3
 8003202:	2301      	movs	r3, #1
 8003204:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003206:	f7fe fac3 	bl	8001790 <HAL_GetTick>
 800320a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800320e:	e00a      	b.n	8003226 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003210:	f7fe fabe 	bl	8001790 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	2b02      	cmp	r3, #2
 800321e:	d902      	bls.n	8003226 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	f000 bcdb 	b.w	8003bdc <HAL_RCC_OscConfig+0x106c>
 8003226:	2302      	movs	r3, #2
 8003228:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003230:	fa93 f3a3 	rbit	r3, r3
 8003234:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003238:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800323c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003240:	2202      	movs	r2, #2
 8003242:	601a      	str	r2, [r3, #0]
 8003244:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003248:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	fa93 f2a3 	rbit	r2, r3
 8003252:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003256:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800325a:	601a      	str	r2, [r3, #0]
 800325c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003260:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003264:	2202      	movs	r2, #2
 8003266:	601a      	str	r2, [r3, #0]
 8003268:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800326c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	fa93 f2a3 	rbit	r2, r3
 8003276:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800327a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800327e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003280:	4b88      	ldr	r3, [pc, #544]	@ (80034a4 <HAL_RCC_OscConfig+0x934>)
 8003282:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003284:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003288:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800328c:	2102      	movs	r1, #2
 800328e:	6019      	str	r1, [r3, #0]
 8003290:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003294:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	fa93 f1a3 	rbit	r1, r3
 800329e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032a2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80032a6:	6019      	str	r1, [r3, #0]
  return result;
 80032a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032ac:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	fab3 f383 	clz	r3, r3
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	f003 031f 	and.w	r3, r3, #31
 80032c2:	2101      	movs	r1, #1
 80032c4:	fa01 f303 	lsl.w	r3, r1, r3
 80032c8:	4013      	ands	r3, r2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d0a0      	beq.n	8003210 <HAL_RCC_OscConfig+0x6a0>
 80032ce:	e08d      	b.n	80033ec <HAL_RCC_OscConfig+0x87c>
 80032d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032d4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80032d8:	2201      	movs	r2, #1
 80032da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032e0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	fa93 f2a3 	rbit	r2, r3
 80032ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032ee:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80032f2:	601a      	str	r2, [r3, #0]
  return result;
 80032f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032f8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80032fc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032fe:	fab3 f383 	clz	r3, r3
 8003302:	b2db      	uxtb	r3, r3
 8003304:	461a      	mov	r2, r3
 8003306:	4b68      	ldr	r3, [pc, #416]	@ (80034a8 <HAL_RCC_OscConfig+0x938>)
 8003308:	4413      	add	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	461a      	mov	r2, r3
 800330e:	2300      	movs	r3, #0
 8003310:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003312:	f7fe fa3d 	bl	8001790 <HAL_GetTick>
 8003316:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800331a:	e00a      	b.n	8003332 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800331c:	f7fe fa38 	bl	8001790 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	2b02      	cmp	r3, #2
 800332a:	d902      	bls.n	8003332 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	f000 bc55 	b.w	8003bdc <HAL_RCC_OscConfig+0x106c>
 8003332:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003336:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800333a:	2202      	movs	r2, #2
 800333c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800333e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003342:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	fa93 f2a3 	rbit	r2, r3
 800334c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003350:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003354:	601a      	str	r2, [r3, #0]
 8003356:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800335a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800335e:	2202      	movs	r2, #2
 8003360:	601a      	str	r2, [r3, #0]
 8003362:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003366:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	fa93 f2a3 	rbit	r2, r3
 8003370:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003374:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003378:	601a      	str	r2, [r3, #0]
 800337a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800337e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003382:	2202      	movs	r2, #2
 8003384:	601a      	str	r2, [r3, #0]
 8003386:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800338a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	fa93 f2a3 	rbit	r2, r3
 8003394:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003398:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800339c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800339e:	4b41      	ldr	r3, [pc, #260]	@ (80034a4 <HAL_RCC_OscConfig+0x934>)
 80033a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80033a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033a6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80033aa:	2102      	movs	r1, #2
 80033ac:	6019      	str	r1, [r3, #0]
 80033ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033b2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	fa93 f1a3 	rbit	r1, r3
 80033bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033c0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80033c4:	6019      	str	r1, [r3, #0]
  return result;
 80033c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033ca:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	fab3 f383 	clz	r3, r3
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	f003 031f 	and.w	r3, r3, #31
 80033e0:	2101      	movs	r1, #1
 80033e2:	fa01 f303 	lsl.w	r3, r1, r3
 80033e6:	4013      	ands	r3, r2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d197      	bne.n	800331c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033f0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0304 	and.w	r3, r3, #4
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	f000 81a1 	beq.w	8003744 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003402:	2300      	movs	r3, #0
 8003404:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003408:	4b26      	ldr	r3, [pc, #152]	@ (80034a4 <HAL_RCC_OscConfig+0x934>)
 800340a:	69db      	ldr	r3, [r3, #28]
 800340c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d116      	bne.n	8003442 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003414:	4b23      	ldr	r3, [pc, #140]	@ (80034a4 <HAL_RCC_OscConfig+0x934>)
 8003416:	69db      	ldr	r3, [r3, #28]
 8003418:	4a22      	ldr	r2, [pc, #136]	@ (80034a4 <HAL_RCC_OscConfig+0x934>)
 800341a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800341e:	61d3      	str	r3, [r2, #28]
 8003420:	4b20      	ldr	r3, [pc, #128]	@ (80034a4 <HAL_RCC_OscConfig+0x934>)
 8003422:	69db      	ldr	r3, [r3, #28]
 8003424:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8003428:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800342c:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003430:	601a      	str	r2, [r3, #0]
 8003432:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003436:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800343a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800343c:	2301      	movs	r3, #1
 800343e:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003442:	4b1a      	ldr	r3, [pc, #104]	@ (80034ac <HAL_RCC_OscConfig+0x93c>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800344a:	2b00      	cmp	r3, #0
 800344c:	d11a      	bne.n	8003484 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800344e:	4b17      	ldr	r3, [pc, #92]	@ (80034ac <HAL_RCC_OscConfig+0x93c>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a16      	ldr	r2, [pc, #88]	@ (80034ac <HAL_RCC_OscConfig+0x93c>)
 8003454:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003458:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800345a:	f7fe f999 	bl	8001790 <HAL_GetTick>
 800345e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003462:	e009      	b.n	8003478 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003464:	f7fe f994 	bl	8001790 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	2b64      	cmp	r3, #100	@ 0x64
 8003472:	d901      	bls.n	8003478 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e3b1      	b.n	8003bdc <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003478:	4b0c      	ldr	r3, [pc, #48]	@ (80034ac <HAL_RCC_OscConfig+0x93c>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003480:	2b00      	cmp	r3, #0
 8003482:	d0ef      	beq.n	8003464 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003484:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003488:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	2b01      	cmp	r3, #1
 8003492:	d10d      	bne.n	80034b0 <HAL_RCC_OscConfig+0x940>
 8003494:	4b03      	ldr	r3, [pc, #12]	@ (80034a4 <HAL_RCC_OscConfig+0x934>)
 8003496:	6a1b      	ldr	r3, [r3, #32]
 8003498:	4a02      	ldr	r2, [pc, #8]	@ (80034a4 <HAL_RCC_OscConfig+0x934>)
 800349a:	f043 0301 	orr.w	r3, r3, #1
 800349e:	6213      	str	r3, [r2, #32]
 80034a0:	e03c      	b.n	800351c <HAL_RCC_OscConfig+0x9ac>
 80034a2:	bf00      	nop
 80034a4:	40021000 	.word	0x40021000
 80034a8:	10908120 	.word	0x10908120
 80034ac:	40007000 	.word	0x40007000
 80034b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034b4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d10c      	bne.n	80034da <HAL_RCC_OscConfig+0x96a>
 80034c0:	4bc1      	ldr	r3, [pc, #772]	@ (80037c8 <HAL_RCC_OscConfig+0xc58>)
 80034c2:	6a1b      	ldr	r3, [r3, #32]
 80034c4:	4ac0      	ldr	r2, [pc, #768]	@ (80037c8 <HAL_RCC_OscConfig+0xc58>)
 80034c6:	f023 0301 	bic.w	r3, r3, #1
 80034ca:	6213      	str	r3, [r2, #32]
 80034cc:	4bbe      	ldr	r3, [pc, #760]	@ (80037c8 <HAL_RCC_OscConfig+0xc58>)
 80034ce:	6a1b      	ldr	r3, [r3, #32]
 80034d0:	4abd      	ldr	r2, [pc, #756]	@ (80037c8 <HAL_RCC_OscConfig+0xc58>)
 80034d2:	f023 0304 	bic.w	r3, r3, #4
 80034d6:	6213      	str	r3, [r2, #32]
 80034d8:	e020      	b.n	800351c <HAL_RCC_OscConfig+0x9ac>
 80034da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034de:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	2b05      	cmp	r3, #5
 80034e8:	d10c      	bne.n	8003504 <HAL_RCC_OscConfig+0x994>
 80034ea:	4bb7      	ldr	r3, [pc, #732]	@ (80037c8 <HAL_RCC_OscConfig+0xc58>)
 80034ec:	6a1b      	ldr	r3, [r3, #32]
 80034ee:	4ab6      	ldr	r2, [pc, #728]	@ (80037c8 <HAL_RCC_OscConfig+0xc58>)
 80034f0:	f043 0304 	orr.w	r3, r3, #4
 80034f4:	6213      	str	r3, [r2, #32]
 80034f6:	4bb4      	ldr	r3, [pc, #720]	@ (80037c8 <HAL_RCC_OscConfig+0xc58>)
 80034f8:	6a1b      	ldr	r3, [r3, #32]
 80034fa:	4ab3      	ldr	r2, [pc, #716]	@ (80037c8 <HAL_RCC_OscConfig+0xc58>)
 80034fc:	f043 0301 	orr.w	r3, r3, #1
 8003500:	6213      	str	r3, [r2, #32]
 8003502:	e00b      	b.n	800351c <HAL_RCC_OscConfig+0x9ac>
 8003504:	4bb0      	ldr	r3, [pc, #704]	@ (80037c8 <HAL_RCC_OscConfig+0xc58>)
 8003506:	6a1b      	ldr	r3, [r3, #32]
 8003508:	4aaf      	ldr	r2, [pc, #700]	@ (80037c8 <HAL_RCC_OscConfig+0xc58>)
 800350a:	f023 0301 	bic.w	r3, r3, #1
 800350e:	6213      	str	r3, [r2, #32]
 8003510:	4bad      	ldr	r3, [pc, #692]	@ (80037c8 <HAL_RCC_OscConfig+0xc58>)
 8003512:	6a1b      	ldr	r3, [r3, #32]
 8003514:	4aac      	ldr	r2, [pc, #688]	@ (80037c8 <HAL_RCC_OscConfig+0xc58>)
 8003516:	f023 0304 	bic.w	r3, r3, #4
 800351a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800351c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003520:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	2b00      	cmp	r3, #0
 800352a:	f000 8081 	beq.w	8003630 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800352e:	f7fe f92f 	bl	8001790 <HAL_GetTick>
 8003532:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003536:	e00b      	b.n	8003550 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003538:	f7fe f92a 	bl	8001790 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003548:	4293      	cmp	r3, r2
 800354a:	d901      	bls.n	8003550 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e345      	b.n	8003bdc <HAL_RCC_OscConfig+0x106c>
 8003550:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003554:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003558:	2202      	movs	r2, #2
 800355a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003560:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	fa93 f2a3 	rbit	r2, r3
 800356a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800356e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003572:	601a      	str	r2, [r3, #0]
 8003574:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003578:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800357c:	2202      	movs	r2, #2
 800357e:	601a      	str	r2, [r3, #0]
 8003580:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003584:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	fa93 f2a3 	rbit	r2, r3
 800358e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003592:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003596:	601a      	str	r2, [r3, #0]
  return result;
 8003598:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800359c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80035a0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035a2:	fab3 f383 	clz	r3, r3
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	095b      	lsrs	r3, r3, #5
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	f043 0302 	orr.w	r3, r3, #2
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d102      	bne.n	80035bc <HAL_RCC_OscConfig+0xa4c>
 80035b6:	4b84      	ldr	r3, [pc, #528]	@ (80037c8 <HAL_RCC_OscConfig+0xc58>)
 80035b8:	6a1b      	ldr	r3, [r3, #32]
 80035ba:	e013      	b.n	80035e4 <HAL_RCC_OscConfig+0xa74>
 80035bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035c0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80035c4:	2202      	movs	r2, #2
 80035c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035cc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	fa93 f2a3 	rbit	r2, r3
 80035d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035da:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80035de:	601a      	str	r2, [r3, #0]
 80035e0:	4b79      	ldr	r3, [pc, #484]	@ (80037c8 <HAL_RCC_OscConfig+0xc58>)
 80035e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035e8:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80035ec:	2102      	movs	r1, #2
 80035ee:	6011      	str	r1, [r2, #0]
 80035f0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035f4:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80035f8:	6812      	ldr	r2, [r2, #0]
 80035fa:	fa92 f1a2 	rbit	r1, r2
 80035fe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003602:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003606:	6011      	str	r1, [r2, #0]
  return result;
 8003608:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800360c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003610:	6812      	ldr	r2, [r2, #0]
 8003612:	fab2 f282 	clz	r2, r2
 8003616:	b2d2      	uxtb	r2, r2
 8003618:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800361c:	b2d2      	uxtb	r2, r2
 800361e:	f002 021f 	and.w	r2, r2, #31
 8003622:	2101      	movs	r1, #1
 8003624:	fa01 f202 	lsl.w	r2, r1, r2
 8003628:	4013      	ands	r3, r2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d084      	beq.n	8003538 <HAL_RCC_OscConfig+0x9c8>
 800362e:	e07f      	b.n	8003730 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003630:	f7fe f8ae 	bl	8001790 <HAL_GetTick>
 8003634:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003638:	e00b      	b.n	8003652 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800363a:	f7fe f8a9 	bl	8001790 <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	f241 3288 	movw	r2, #5000	@ 0x1388
 800364a:	4293      	cmp	r3, r2
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e2c4      	b.n	8003bdc <HAL_RCC_OscConfig+0x106c>
 8003652:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003656:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800365a:	2202      	movs	r2, #2
 800365c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800365e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003662:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	fa93 f2a3 	rbit	r2, r3
 800366c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003670:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003674:	601a      	str	r2, [r3, #0]
 8003676:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800367a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800367e:	2202      	movs	r2, #2
 8003680:	601a      	str	r2, [r3, #0]
 8003682:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003686:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	fa93 f2a3 	rbit	r2, r3
 8003690:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003694:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003698:	601a      	str	r2, [r3, #0]
  return result;
 800369a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800369e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80036a2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036a4:	fab3 f383 	clz	r3, r3
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	095b      	lsrs	r3, r3, #5
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	f043 0302 	orr.w	r3, r3, #2
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d102      	bne.n	80036be <HAL_RCC_OscConfig+0xb4e>
 80036b8:	4b43      	ldr	r3, [pc, #268]	@ (80037c8 <HAL_RCC_OscConfig+0xc58>)
 80036ba:	6a1b      	ldr	r3, [r3, #32]
 80036bc:	e013      	b.n	80036e6 <HAL_RCC_OscConfig+0xb76>
 80036be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036c2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80036c6:	2202      	movs	r2, #2
 80036c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036ce:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	fa93 f2a3 	rbit	r2, r3
 80036d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036dc:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80036e0:	601a      	str	r2, [r3, #0]
 80036e2:	4b39      	ldr	r3, [pc, #228]	@ (80037c8 <HAL_RCC_OscConfig+0xc58>)
 80036e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80036ea:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80036ee:	2102      	movs	r1, #2
 80036f0:	6011      	str	r1, [r2, #0]
 80036f2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80036f6:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80036fa:	6812      	ldr	r2, [r2, #0]
 80036fc:	fa92 f1a2 	rbit	r1, r2
 8003700:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003704:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003708:	6011      	str	r1, [r2, #0]
  return result;
 800370a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800370e:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003712:	6812      	ldr	r2, [r2, #0]
 8003714:	fab2 f282 	clz	r2, r2
 8003718:	b2d2      	uxtb	r2, r2
 800371a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800371e:	b2d2      	uxtb	r2, r2
 8003720:	f002 021f 	and.w	r2, r2, #31
 8003724:	2101      	movs	r1, #1
 8003726:	fa01 f202 	lsl.w	r2, r1, r2
 800372a:	4013      	ands	r3, r2
 800372c:	2b00      	cmp	r3, #0
 800372e:	d184      	bne.n	800363a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003730:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8003734:	2b01      	cmp	r3, #1
 8003736:	d105      	bne.n	8003744 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003738:	4b23      	ldr	r3, [pc, #140]	@ (80037c8 <HAL_RCC_OscConfig+0xc58>)
 800373a:	69db      	ldr	r3, [r3, #28]
 800373c:	4a22      	ldr	r2, [pc, #136]	@ (80037c8 <HAL_RCC_OscConfig+0xc58>)
 800373e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003742:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003744:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003748:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	69db      	ldr	r3, [r3, #28]
 8003750:	2b00      	cmp	r3, #0
 8003752:	f000 8242 	beq.w	8003bda <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003756:	4b1c      	ldr	r3, [pc, #112]	@ (80037c8 <HAL_RCC_OscConfig+0xc58>)
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f003 030c 	and.w	r3, r3, #12
 800375e:	2b08      	cmp	r3, #8
 8003760:	f000 8213 	beq.w	8003b8a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003764:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003768:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	69db      	ldr	r3, [r3, #28]
 8003770:	2b02      	cmp	r3, #2
 8003772:	f040 8162 	bne.w	8003a3a <HAL_RCC_OscConfig+0xeca>
 8003776:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800377a:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800377e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003782:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003784:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003788:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	fa93 f2a3 	rbit	r2, r3
 8003792:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003796:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800379a:	601a      	str	r2, [r3, #0]
  return result;
 800379c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037a0:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80037a4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037a6:	fab3 f383 	clz	r3, r3
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80037b0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	461a      	mov	r2, r3
 80037b8:	2300      	movs	r3, #0
 80037ba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037bc:	f7fd ffe8 	bl	8001790 <HAL_GetTick>
 80037c0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037c4:	e00c      	b.n	80037e0 <HAL_RCC_OscConfig+0xc70>
 80037c6:	bf00      	nop
 80037c8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037cc:	f7fd ffe0 	bl	8001790 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d901      	bls.n	80037e0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e1fd      	b.n	8003bdc <HAL_RCC_OscConfig+0x106c>
 80037e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037e4:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80037e8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80037ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037f2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	fa93 f2a3 	rbit	r2, r3
 80037fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003800:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003804:	601a      	str	r2, [r3, #0]
  return result;
 8003806:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800380a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800380e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003810:	fab3 f383 	clz	r3, r3
 8003814:	b2db      	uxtb	r3, r3
 8003816:	095b      	lsrs	r3, r3, #5
 8003818:	b2db      	uxtb	r3, r3
 800381a:	f043 0301 	orr.w	r3, r3, #1
 800381e:	b2db      	uxtb	r3, r3
 8003820:	2b01      	cmp	r3, #1
 8003822:	d102      	bne.n	800382a <HAL_RCC_OscConfig+0xcba>
 8003824:	4bb0      	ldr	r3, [pc, #704]	@ (8003ae8 <HAL_RCC_OscConfig+0xf78>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	e027      	b.n	800387a <HAL_RCC_OscConfig+0xd0a>
 800382a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800382e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003832:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003836:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003838:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800383c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	fa93 f2a3 	rbit	r2, r3
 8003846:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800384a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800384e:	601a      	str	r2, [r3, #0]
 8003850:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003854:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003858:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800385c:	601a      	str	r2, [r3, #0]
 800385e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003862:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	fa93 f2a3 	rbit	r2, r3
 800386c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003870:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003874:	601a      	str	r2, [r3, #0]
 8003876:	4b9c      	ldr	r3, [pc, #624]	@ (8003ae8 <HAL_RCC_OscConfig+0xf78>)
 8003878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800387a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800387e:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003882:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003886:	6011      	str	r1, [r2, #0]
 8003888:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800388c:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003890:	6812      	ldr	r2, [r2, #0]
 8003892:	fa92 f1a2 	rbit	r1, r2
 8003896:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800389a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800389e:	6011      	str	r1, [r2, #0]
  return result;
 80038a0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80038a4:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80038a8:	6812      	ldr	r2, [r2, #0]
 80038aa:	fab2 f282 	clz	r2, r2
 80038ae:	b2d2      	uxtb	r2, r2
 80038b0:	f042 0220 	orr.w	r2, r2, #32
 80038b4:	b2d2      	uxtb	r2, r2
 80038b6:	f002 021f 	and.w	r2, r2, #31
 80038ba:	2101      	movs	r1, #1
 80038bc:	fa01 f202 	lsl.w	r2, r1, r2
 80038c0:	4013      	ands	r3, r2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d182      	bne.n	80037cc <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038c6:	4b88      	ldr	r3, [pc, #544]	@ (8003ae8 <HAL_RCC_OscConfig+0xf78>)
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80038ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038d2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80038da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038de:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	6a1b      	ldr	r3, [r3, #32]
 80038e6:	430b      	orrs	r3, r1
 80038e8:	497f      	ldr	r1, [pc, #508]	@ (8003ae8 <HAL_RCC_OscConfig+0xf78>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	604b      	str	r3, [r1, #4]
 80038ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038f2:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80038f6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80038fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003900:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	fa93 f2a3 	rbit	r2, r3
 800390a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800390e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003912:	601a      	str	r2, [r3, #0]
  return result;
 8003914:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003918:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800391c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800391e:	fab3 f383 	clz	r3, r3
 8003922:	b2db      	uxtb	r3, r3
 8003924:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003928:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	461a      	mov	r2, r3
 8003930:	2301      	movs	r3, #1
 8003932:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003934:	f7fd ff2c 	bl	8001790 <HAL_GetTick>
 8003938:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800393c:	e009      	b.n	8003952 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800393e:	f7fd ff27 	bl	8001790 <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b02      	cmp	r3, #2
 800394c:	d901      	bls.n	8003952 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e144      	b.n	8003bdc <HAL_RCC_OscConfig+0x106c>
 8003952:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003956:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800395a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800395e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003960:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003964:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	fa93 f2a3 	rbit	r2, r3
 800396e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003972:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003976:	601a      	str	r2, [r3, #0]
  return result;
 8003978:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800397c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003980:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003982:	fab3 f383 	clz	r3, r3
 8003986:	b2db      	uxtb	r3, r3
 8003988:	095b      	lsrs	r3, r3, #5
 800398a:	b2db      	uxtb	r3, r3
 800398c:	f043 0301 	orr.w	r3, r3, #1
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b01      	cmp	r3, #1
 8003994:	d102      	bne.n	800399c <HAL_RCC_OscConfig+0xe2c>
 8003996:	4b54      	ldr	r3, [pc, #336]	@ (8003ae8 <HAL_RCC_OscConfig+0xf78>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	e027      	b.n	80039ec <HAL_RCC_OscConfig+0xe7c>
 800399c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039a0:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80039a4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80039a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039ae:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	fa93 f2a3 	rbit	r2, r3
 80039b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039bc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80039c0:	601a      	str	r2, [r3, #0]
 80039c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039c6:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80039ca:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80039ce:	601a      	str	r2, [r3, #0]
 80039d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039d4:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	fa93 f2a3 	rbit	r2, r3
 80039de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039e2:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80039e6:	601a      	str	r2, [r3, #0]
 80039e8:	4b3f      	ldr	r3, [pc, #252]	@ (8003ae8 <HAL_RCC_OscConfig+0xf78>)
 80039ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80039f0:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80039f4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80039f8:	6011      	str	r1, [r2, #0]
 80039fa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80039fe:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003a02:	6812      	ldr	r2, [r2, #0]
 8003a04:	fa92 f1a2 	rbit	r1, r2
 8003a08:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003a0c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003a10:	6011      	str	r1, [r2, #0]
  return result;
 8003a12:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003a16:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003a1a:	6812      	ldr	r2, [r2, #0]
 8003a1c:	fab2 f282 	clz	r2, r2
 8003a20:	b2d2      	uxtb	r2, r2
 8003a22:	f042 0220 	orr.w	r2, r2, #32
 8003a26:	b2d2      	uxtb	r2, r2
 8003a28:	f002 021f 	and.w	r2, r2, #31
 8003a2c:	2101      	movs	r1, #1
 8003a2e:	fa01 f202 	lsl.w	r2, r1, r2
 8003a32:	4013      	ands	r3, r2
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d082      	beq.n	800393e <HAL_RCC_OscConfig+0xdce>
 8003a38:	e0cf      	b.n	8003bda <HAL_RCC_OscConfig+0x106a>
 8003a3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a3e:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003a42:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003a46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a4c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	fa93 f2a3 	rbit	r2, r3
 8003a56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a5a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003a5e:	601a      	str	r2, [r3, #0]
  return result;
 8003a60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a64:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003a68:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a6a:	fab3 f383 	clz	r3, r3
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003a74:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a80:	f7fd fe86 	bl	8001790 <HAL_GetTick>
 8003a84:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a88:	e009      	b.n	8003a9e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a8a:	f7fd fe81 	bl	8001790 <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e09e      	b.n	8003bdc <HAL_RCC_OscConfig+0x106c>
 8003a9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003aa2:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003aa6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003aaa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ab0:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	fa93 f2a3 	rbit	r2, r3
 8003aba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003abe:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003ac2:	601a      	str	r2, [r3, #0]
  return result;
 8003ac4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ac8:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003acc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ace:	fab3 f383 	clz	r3, r3
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	095b      	lsrs	r3, r3, #5
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	f043 0301 	orr.w	r3, r3, #1
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d104      	bne.n	8003aec <HAL_RCC_OscConfig+0xf7c>
 8003ae2:	4b01      	ldr	r3, [pc, #4]	@ (8003ae8 <HAL_RCC_OscConfig+0xf78>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	e029      	b.n	8003b3c <HAL_RCC_OscConfig+0xfcc>
 8003ae8:	40021000 	.word	0x40021000
 8003aec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003af0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003af4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003af8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003afa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003afe:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	fa93 f2a3 	rbit	r2, r3
 8003b08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b0c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003b10:	601a      	str	r2, [r3, #0]
 8003b12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b16:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003b1a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003b1e:	601a      	str	r2, [r3, #0]
 8003b20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b24:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	fa93 f2a3 	rbit	r2, r3
 8003b2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b32:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003b36:	601a      	str	r2, [r3, #0]
 8003b38:	4b2b      	ldr	r3, [pc, #172]	@ (8003be8 <HAL_RCC_OscConfig+0x1078>)
 8003b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b3c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b40:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003b44:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003b48:	6011      	str	r1, [r2, #0]
 8003b4a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b4e:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003b52:	6812      	ldr	r2, [r2, #0]
 8003b54:	fa92 f1a2 	rbit	r1, r2
 8003b58:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b5c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003b60:	6011      	str	r1, [r2, #0]
  return result;
 8003b62:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b66:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003b6a:	6812      	ldr	r2, [r2, #0]
 8003b6c:	fab2 f282 	clz	r2, r2
 8003b70:	b2d2      	uxtb	r2, r2
 8003b72:	f042 0220 	orr.w	r2, r2, #32
 8003b76:	b2d2      	uxtb	r2, r2
 8003b78:	f002 021f 	and.w	r2, r2, #31
 8003b7c:	2101      	movs	r1, #1
 8003b7e:	fa01 f202 	lsl.w	r2, r1, r2
 8003b82:	4013      	ands	r3, r2
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d180      	bne.n	8003a8a <HAL_RCC_OscConfig+0xf1a>
 8003b88:	e027      	b.n	8003bda <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b8e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	69db      	ldr	r3, [r3, #28]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d101      	bne.n	8003b9e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e01e      	b.n	8003bdc <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b9e:	4b12      	ldr	r3, [pc, #72]	@ (8003be8 <HAL_RCC_OscConfig+0x1078>)
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003ba6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003baa:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003bae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bb2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	6a1b      	ldr	r3, [r3, #32]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d10b      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003bbe:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003bc2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003bc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d001      	beq.n	8003bda <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e000      	b.n	8003bdc <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003bda:	2300      	movs	r3, #0
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	40021000 	.word	0x40021000

08003bec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b09e      	sub	sp, #120	@ 0x78
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d101      	bne.n	8003c04 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e162      	b.n	8003eca <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c04:	4b90      	ldr	r3, [pc, #576]	@ (8003e48 <HAL_RCC_ClockConfig+0x25c>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0307 	and.w	r3, r3, #7
 8003c0c:	683a      	ldr	r2, [r7, #0]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d910      	bls.n	8003c34 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c12:	4b8d      	ldr	r3, [pc, #564]	@ (8003e48 <HAL_RCC_ClockConfig+0x25c>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f023 0207 	bic.w	r2, r3, #7
 8003c1a:	498b      	ldr	r1, [pc, #556]	@ (8003e48 <HAL_RCC_ClockConfig+0x25c>)
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c22:	4b89      	ldr	r3, [pc, #548]	@ (8003e48 <HAL_RCC_ClockConfig+0x25c>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0307 	and.w	r3, r3, #7
 8003c2a:	683a      	ldr	r2, [r7, #0]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d001      	beq.n	8003c34 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e14a      	b.n	8003eca <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0302 	and.w	r3, r3, #2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d008      	beq.n	8003c52 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c40:	4b82      	ldr	r3, [pc, #520]	@ (8003e4c <HAL_RCC_ClockConfig+0x260>)
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	497f      	ldr	r1, [pc, #508]	@ (8003e4c <HAL_RCC_ClockConfig+0x260>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	f000 80dc 	beq.w	8003e18 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d13c      	bne.n	8003ce2 <HAL_RCC_ClockConfig+0xf6>
 8003c68:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003c6c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c6e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c70:	fa93 f3a3 	rbit	r3, r3
 8003c74:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003c76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c78:	fab3 f383 	clz	r3, r3
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	095b      	lsrs	r3, r3, #5
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	f043 0301 	orr.w	r3, r3, #1
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d102      	bne.n	8003c92 <HAL_RCC_ClockConfig+0xa6>
 8003c8c:	4b6f      	ldr	r3, [pc, #444]	@ (8003e4c <HAL_RCC_ClockConfig+0x260>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	e00f      	b.n	8003cb2 <HAL_RCC_ClockConfig+0xc6>
 8003c92:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003c96:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c98:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c9a:	fa93 f3a3 	rbit	r3, r3
 8003c9e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003ca0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003ca4:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ca6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003ca8:	fa93 f3a3 	rbit	r3, r3
 8003cac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003cae:	4b67      	ldr	r3, [pc, #412]	@ (8003e4c <HAL_RCC_ClockConfig+0x260>)
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003cb6:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003cb8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003cba:	fa92 f2a2 	rbit	r2, r2
 8003cbe:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003cc0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003cc2:	fab2 f282 	clz	r2, r2
 8003cc6:	b2d2      	uxtb	r2, r2
 8003cc8:	f042 0220 	orr.w	r2, r2, #32
 8003ccc:	b2d2      	uxtb	r2, r2
 8003cce:	f002 021f 	and.w	r2, r2, #31
 8003cd2:	2101      	movs	r1, #1
 8003cd4:	fa01 f202 	lsl.w	r2, r1, r2
 8003cd8:	4013      	ands	r3, r2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d17b      	bne.n	8003dd6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e0f3      	b.n	8003eca <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d13c      	bne.n	8003d64 <HAL_RCC_ClockConfig+0x178>
 8003cea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003cee:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cf2:	fa93 f3a3 	rbit	r3, r3
 8003cf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003cf8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cfa:	fab3 f383 	clz	r3, r3
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	095b      	lsrs	r3, r3, #5
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	f043 0301 	orr.w	r3, r3, #1
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d102      	bne.n	8003d14 <HAL_RCC_ClockConfig+0x128>
 8003d0e:	4b4f      	ldr	r3, [pc, #316]	@ (8003e4c <HAL_RCC_ClockConfig+0x260>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	e00f      	b.n	8003d34 <HAL_RCC_ClockConfig+0x148>
 8003d14:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d18:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d1c:	fa93 f3a3 	rbit	r3, r3
 8003d20:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d22:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d26:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d2a:	fa93 f3a3 	rbit	r3, r3
 8003d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d30:	4b46      	ldr	r3, [pc, #280]	@ (8003e4c <HAL_RCC_ClockConfig+0x260>)
 8003d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d34:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003d38:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003d3a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003d3c:	fa92 f2a2 	rbit	r2, r2
 8003d40:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003d42:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003d44:	fab2 f282 	clz	r2, r2
 8003d48:	b2d2      	uxtb	r2, r2
 8003d4a:	f042 0220 	orr.w	r2, r2, #32
 8003d4e:	b2d2      	uxtb	r2, r2
 8003d50:	f002 021f 	and.w	r2, r2, #31
 8003d54:	2101      	movs	r1, #1
 8003d56:	fa01 f202 	lsl.w	r2, r1, r2
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d13a      	bne.n	8003dd6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e0b2      	b.n	8003eca <HAL_RCC_ClockConfig+0x2de>
 8003d64:	2302      	movs	r3, #2
 8003d66:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d6a:	fa93 f3a3 	rbit	r3, r3
 8003d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d72:	fab3 f383 	clz	r3, r3
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	095b      	lsrs	r3, r3, #5
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	f043 0301 	orr.w	r3, r3, #1
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d102      	bne.n	8003d8c <HAL_RCC_ClockConfig+0x1a0>
 8003d86:	4b31      	ldr	r3, [pc, #196]	@ (8003e4c <HAL_RCC_ClockConfig+0x260>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	e00d      	b.n	8003da8 <HAL_RCC_ClockConfig+0x1bc>
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d92:	fa93 f3a3 	rbit	r3, r3
 8003d96:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d98:	2302      	movs	r3, #2
 8003d9a:	623b      	str	r3, [r7, #32]
 8003d9c:	6a3b      	ldr	r3, [r7, #32]
 8003d9e:	fa93 f3a3 	rbit	r3, r3
 8003da2:	61fb      	str	r3, [r7, #28]
 8003da4:	4b29      	ldr	r3, [pc, #164]	@ (8003e4c <HAL_RCC_ClockConfig+0x260>)
 8003da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da8:	2202      	movs	r2, #2
 8003daa:	61ba      	str	r2, [r7, #24]
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	fa92 f2a2 	rbit	r2, r2
 8003db2:	617a      	str	r2, [r7, #20]
  return result;
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	fab2 f282 	clz	r2, r2
 8003dba:	b2d2      	uxtb	r2, r2
 8003dbc:	f042 0220 	orr.w	r2, r2, #32
 8003dc0:	b2d2      	uxtb	r2, r2
 8003dc2:	f002 021f 	and.w	r2, r2, #31
 8003dc6:	2101      	movs	r1, #1
 8003dc8:	fa01 f202 	lsl.w	r2, r1, r2
 8003dcc:	4013      	ands	r3, r2
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d101      	bne.n	8003dd6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e079      	b.n	8003eca <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dd6:	4b1d      	ldr	r3, [pc, #116]	@ (8003e4c <HAL_RCC_ClockConfig+0x260>)
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f023 0203 	bic.w	r2, r3, #3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	491a      	ldr	r1, [pc, #104]	@ (8003e4c <HAL_RCC_ClockConfig+0x260>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003de8:	f7fd fcd2 	bl	8001790 <HAL_GetTick>
 8003dec:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dee:	e00a      	b.n	8003e06 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003df0:	f7fd fcce 	bl	8001790 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d901      	bls.n	8003e06 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e061      	b.n	8003eca <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e06:	4b11      	ldr	r3, [pc, #68]	@ (8003e4c <HAL_RCC_ClockConfig+0x260>)
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	f003 020c 	and.w	r2, r3, #12
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d1eb      	bne.n	8003df0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e18:	4b0b      	ldr	r3, [pc, #44]	@ (8003e48 <HAL_RCC_ClockConfig+0x25c>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0307 	and.w	r3, r3, #7
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d214      	bcs.n	8003e50 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e26:	4b08      	ldr	r3, [pc, #32]	@ (8003e48 <HAL_RCC_ClockConfig+0x25c>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f023 0207 	bic.w	r2, r3, #7
 8003e2e:	4906      	ldr	r1, [pc, #24]	@ (8003e48 <HAL_RCC_ClockConfig+0x25c>)
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e36:	4b04      	ldr	r3, [pc, #16]	@ (8003e48 <HAL_RCC_ClockConfig+0x25c>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0307 	and.w	r3, r3, #7
 8003e3e:	683a      	ldr	r2, [r7, #0]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d005      	beq.n	8003e50 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e040      	b.n	8003eca <HAL_RCC_ClockConfig+0x2de>
 8003e48:	40022000 	.word	0x40022000
 8003e4c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0304 	and.w	r3, r3, #4
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d008      	beq.n	8003e6e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e5c:	4b1d      	ldr	r3, [pc, #116]	@ (8003ed4 <HAL_RCC_ClockConfig+0x2e8>)
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	491a      	ldr	r1, [pc, #104]	@ (8003ed4 <HAL_RCC_ClockConfig+0x2e8>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0308 	and.w	r3, r3, #8
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d009      	beq.n	8003e8e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e7a:	4b16      	ldr	r3, [pc, #88]	@ (8003ed4 <HAL_RCC_ClockConfig+0x2e8>)
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	00db      	lsls	r3, r3, #3
 8003e88:	4912      	ldr	r1, [pc, #72]	@ (8003ed4 <HAL_RCC_ClockConfig+0x2e8>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003e8e:	f000 f829 	bl	8003ee4 <HAL_RCC_GetSysClockFreq>
 8003e92:	4601      	mov	r1, r0
 8003e94:	4b0f      	ldr	r3, [pc, #60]	@ (8003ed4 <HAL_RCC_ClockConfig+0x2e8>)
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e9c:	22f0      	movs	r2, #240	@ 0xf0
 8003e9e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	fa92 f2a2 	rbit	r2, r2
 8003ea6:	60fa      	str	r2, [r7, #12]
  return result;
 8003ea8:	68fa      	ldr	r2, [r7, #12]
 8003eaa:	fab2 f282 	clz	r2, r2
 8003eae:	b2d2      	uxtb	r2, r2
 8003eb0:	40d3      	lsrs	r3, r2
 8003eb2:	4a09      	ldr	r2, [pc, #36]	@ (8003ed8 <HAL_RCC_ClockConfig+0x2ec>)
 8003eb4:	5cd3      	ldrb	r3, [r2, r3]
 8003eb6:	fa21 f303 	lsr.w	r3, r1, r3
 8003eba:	4a08      	ldr	r2, [pc, #32]	@ (8003edc <HAL_RCC_ClockConfig+0x2f0>)
 8003ebc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003ebe:	4b08      	ldr	r3, [pc, #32]	@ (8003ee0 <HAL_RCC_ClockConfig+0x2f4>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7fd fc20 	bl	8001708 <HAL_InitTick>
  
  return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3778      	adds	r7, #120	@ 0x78
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	40021000 	.word	0x40021000
 8003ed8:	08005948 	.word	0x08005948
 8003edc:	20000000 	.word	0x20000000
 8003ee0:	20000004 	.word	0x20000004

08003ee4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b087      	sub	sp, #28
 8003ee8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003eea:	2300      	movs	r3, #0
 8003eec:	60fb      	str	r3, [r7, #12]
 8003eee:	2300      	movs	r3, #0
 8003ef0:	60bb      	str	r3, [r7, #8]
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	617b      	str	r3, [r7, #20]
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003efa:	2300      	movs	r3, #0
 8003efc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003efe:	4b1e      	ldr	r3, [pc, #120]	@ (8003f78 <HAL_RCC_GetSysClockFreq+0x94>)
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f003 030c 	and.w	r3, r3, #12
 8003f0a:	2b04      	cmp	r3, #4
 8003f0c:	d002      	beq.n	8003f14 <HAL_RCC_GetSysClockFreq+0x30>
 8003f0e:	2b08      	cmp	r3, #8
 8003f10:	d003      	beq.n	8003f1a <HAL_RCC_GetSysClockFreq+0x36>
 8003f12:	e026      	b.n	8003f62 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f14:	4b19      	ldr	r3, [pc, #100]	@ (8003f7c <HAL_RCC_GetSysClockFreq+0x98>)
 8003f16:	613b      	str	r3, [r7, #16]
      break;
 8003f18:	e026      	b.n	8003f68 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	0c9b      	lsrs	r3, r3, #18
 8003f1e:	f003 030f 	and.w	r3, r3, #15
 8003f22:	4a17      	ldr	r2, [pc, #92]	@ (8003f80 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003f24:	5cd3      	ldrb	r3, [r2, r3]
 8003f26:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003f28:	4b13      	ldr	r3, [pc, #76]	@ (8003f78 <HAL_RCC_GetSysClockFreq+0x94>)
 8003f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f2c:	f003 030f 	and.w	r3, r3, #15
 8003f30:	4a14      	ldr	r2, [pc, #80]	@ (8003f84 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003f32:	5cd3      	ldrb	r3, [r2, r3]
 8003f34:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d008      	beq.n	8003f52 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003f40:	4a0e      	ldr	r2, [pc, #56]	@ (8003f7c <HAL_RCC_GetSysClockFreq+0x98>)
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	fb02 f303 	mul.w	r3, r2, r3
 8003f4e:	617b      	str	r3, [r7, #20]
 8003f50:	e004      	b.n	8003f5c <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a0c      	ldr	r2, [pc, #48]	@ (8003f88 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003f56:	fb02 f303 	mul.w	r3, r2, r3
 8003f5a:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	613b      	str	r3, [r7, #16]
      break;
 8003f60:	e002      	b.n	8003f68 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f62:	4b06      	ldr	r3, [pc, #24]	@ (8003f7c <HAL_RCC_GetSysClockFreq+0x98>)
 8003f64:	613b      	str	r3, [r7, #16]
      break;
 8003f66:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f68:	693b      	ldr	r3, [r7, #16]
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	371c      	adds	r7, #28
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	40021000 	.word	0x40021000
 8003f7c:	007a1200 	.word	0x007a1200
 8003f80:	08005958 	.word	0x08005958
 8003f84:	08005968 	.word	0x08005968
 8003f88:	003d0900 	.word	0x003d0900

08003f8c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b092      	sub	sp, #72	@ 0x48
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f94:	2300      	movs	r3, #0
 8003f96:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	f000 80cd 	beq.w	800414a <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fb0:	4b86      	ldr	r3, [pc, #536]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003fb2:	69db      	ldr	r3, [r3, #28]
 8003fb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d10e      	bne.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fbc:	4b83      	ldr	r3, [pc, #524]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003fbe:	69db      	ldr	r3, [r3, #28]
 8003fc0:	4a82      	ldr	r2, [pc, #520]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003fc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fc6:	61d3      	str	r3, [r2, #28]
 8003fc8:	4b80      	ldr	r3, [pc, #512]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003fca:	69db      	ldr	r3, [r3, #28]
 8003fcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fd0:	60bb      	str	r3, [r7, #8]
 8003fd2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fda:	4b7d      	ldr	r3, [pc, #500]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d118      	bne.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fe6:	4b7a      	ldr	r3, [pc, #488]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a79      	ldr	r2, [pc, #484]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003fec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ff0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ff2:	f7fd fbcd 	bl	8001790 <HAL_GetTick>
 8003ff6:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ff8:	e008      	b.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ffa:	f7fd fbc9 	bl	8001790 <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	2b64      	cmp	r3, #100	@ 0x64
 8004006:	d901      	bls.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	e0db      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800400c:	4b70      	ldr	r3, [pc, #448]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004014:	2b00      	cmp	r3, #0
 8004016:	d0f0      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004018:	4b6c      	ldr	r3, [pc, #432]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800401a:	6a1b      	ldr	r3, [r3, #32]
 800401c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004020:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004022:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004024:	2b00      	cmp	r3, #0
 8004026:	d07d      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004030:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004032:	429a      	cmp	r2, r3
 8004034:	d076      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004036:	4b65      	ldr	r3, [pc, #404]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800403e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004040:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004044:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004048:	fa93 f3a3 	rbit	r3, r3
 800404c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800404e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004050:	fab3 f383 	clz	r3, r3
 8004054:	b2db      	uxtb	r3, r3
 8004056:	461a      	mov	r2, r3
 8004058:	4b5e      	ldr	r3, [pc, #376]	@ (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800405a:	4413      	add	r3, r2
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	461a      	mov	r2, r3
 8004060:	2301      	movs	r3, #1
 8004062:	6013      	str	r3, [r2, #0]
 8004064:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004068:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800406a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800406c:	fa93 f3a3 	rbit	r3, r3
 8004070:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004072:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004074:	fab3 f383 	clz	r3, r3
 8004078:	b2db      	uxtb	r3, r3
 800407a:	461a      	mov	r2, r3
 800407c:	4b55      	ldr	r3, [pc, #340]	@ (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800407e:	4413      	add	r3, r2
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	461a      	mov	r2, r3
 8004084:	2300      	movs	r3, #0
 8004086:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004088:	4a50      	ldr	r2, [pc, #320]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800408a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800408c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800408e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004090:	f003 0301 	and.w	r3, r3, #1
 8004094:	2b00      	cmp	r3, #0
 8004096:	d045      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004098:	f7fd fb7a 	bl	8001790 <HAL_GetTick>
 800409c:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800409e:	e00a      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040a0:	f7fd fb76 	bl	8001790 <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d901      	bls.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e086      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x238>
 80040b6:	2302      	movs	r3, #2
 80040b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040bc:	fa93 f3a3 	rbit	r3, r3
 80040c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80040c2:	2302      	movs	r3, #2
 80040c4:	623b      	str	r3, [r7, #32]
 80040c6:	6a3b      	ldr	r3, [r7, #32]
 80040c8:	fa93 f3a3 	rbit	r3, r3
 80040cc:	61fb      	str	r3, [r7, #28]
  return result;
 80040ce:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040d0:	fab3 f383 	clz	r3, r3
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	095b      	lsrs	r3, r3, #5
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	f043 0302 	orr.w	r3, r3, #2
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d102      	bne.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80040e4:	4b39      	ldr	r3, [pc, #228]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040e6:	6a1b      	ldr	r3, [r3, #32]
 80040e8:	e007      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80040ea:	2302      	movs	r3, #2
 80040ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	fa93 f3a3 	rbit	r3, r3
 80040f4:	617b      	str	r3, [r7, #20]
 80040f6:	4b35      	ldr	r3, [pc, #212]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040fa:	2202      	movs	r2, #2
 80040fc:	613a      	str	r2, [r7, #16]
 80040fe:	693a      	ldr	r2, [r7, #16]
 8004100:	fa92 f2a2 	rbit	r2, r2
 8004104:	60fa      	str	r2, [r7, #12]
  return result;
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	fab2 f282 	clz	r2, r2
 800410c:	b2d2      	uxtb	r2, r2
 800410e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004112:	b2d2      	uxtb	r2, r2
 8004114:	f002 021f 	and.w	r2, r2, #31
 8004118:	2101      	movs	r1, #1
 800411a:	fa01 f202 	lsl.w	r2, r1, r2
 800411e:	4013      	ands	r3, r2
 8004120:	2b00      	cmp	r3, #0
 8004122:	d0bd      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004124:	4b29      	ldr	r3, [pc, #164]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004126:	6a1b      	ldr	r3, [r3, #32]
 8004128:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	4926      	ldr	r1, [pc, #152]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004132:	4313      	orrs	r3, r2
 8004134:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004136:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800413a:	2b01      	cmp	r3, #1
 800413c:	d105      	bne.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800413e:	4b23      	ldr	r3, [pc, #140]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004140:	69db      	ldr	r3, [r3, #28]
 8004142:	4a22      	ldr	r2, [pc, #136]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004144:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004148:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	2b00      	cmp	r3, #0
 8004154:	d008      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004156:	4b1d      	ldr	r3, [pc, #116]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800415a:	f023 0203 	bic.w	r2, r3, #3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	491a      	ldr	r1, [pc, #104]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004164:	4313      	orrs	r3, r2
 8004166:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0320 	and.w	r3, r3, #32
 8004170:	2b00      	cmp	r3, #0
 8004172:	d008      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004174:	4b15      	ldr	r3, [pc, #84]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004176:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004178:	f023 0210 	bic.w	r2, r3, #16
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	4912      	ldr	r1, [pc, #72]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004182:	4313      	orrs	r3, r2
 8004184:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800418e:	2b00      	cmp	r3, #0
 8004190:	d008      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004192:	4b0e      	ldr	r3, [pc, #56]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004196:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	490b      	ldr	r1, [pc, #44]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d008      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80041b0:	4b06      	ldr	r3, [pc, #24]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80041b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	695b      	ldr	r3, [r3, #20]
 80041bc:	4903      	ldr	r1, [pc, #12]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3748      	adds	r7, #72	@ 0x48
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	40021000 	.word	0x40021000
 80041d0:	40007000 	.word	0x40007000
 80041d4:	10908100 	.word	0x10908100

080041d8 <memset>:
 80041d8:	4402      	add	r2, r0
 80041da:	4603      	mov	r3, r0
 80041dc:	4293      	cmp	r3, r2
 80041de:	d100      	bne.n	80041e2 <memset+0xa>
 80041e0:	4770      	bx	lr
 80041e2:	f803 1b01 	strb.w	r1, [r3], #1
 80041e6:	e7f9      	b.n	80041dc <memset+0x4>

080041e8 <__errno>:
 80041e8:	4b01      	ldr	r3, [pc, #4]	@ (80041f0 <__errno+0x8>)
 80041ea:	6818      	ldr	r0, [r3, #0]
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	2000000c 	.word	0x2000000c

080041f4 <__libc_init_array>:
 80041f4:	b570      	push	{r4, r5, r6, lr}
 80041f6:	4d0d      	ldr	r5, [pc, #52]	@ (800422c <__libc_init_array+0x38>)
 80041f8:	4c0d      	ldr	r4, [pc, #52]	@ (8004230 <__libc_init_array+0x3c>)
 80041fa:	1b64      	subs	r4, r4, r5
 80041fc:	10a4      	asrs	r4, r4, #2
 80041fe:	2600      	movs	r6, #0
 8004200:	42a6      	cmp	r6, r4
 8004202:	d109      	bne.n	8004218 <__libc_init_array+0x24>
 8004204:	4d0b      	ldr	r5, [pc, #44]	@ (8004234 <__libc_init_array+0x40>)
 8004206:	4c0c      	ldr	r4, [pc, #48]	@ (8004238 <__libc_init_array+0x44>)
 8004208:	f001 fb92 	bl	8005930 <_init>
 800420c:	1b64      	subs	r4, r4, r5
 800420e:	10a4      	asrs	r4, r4, #2
 8004210:	2600      	movs	r6, #0
 8004212:	42a6      	cmp	r6, r4
 8004214:	d105      	bne.n	8004222 <__libc_init_array+0x2e>
 8004216:	bd70      	pop	{r4, r5, r6, pc}
 8004218:	f855 3b04 	ldr.w	r3, [r5], #4
 800421c:	4798      	blx	r3
 800421e:	3601      	adds	r6, #1
 8004220:	e7ee      	b.n	8004200 <__libc_init_array+0xc>
 8004222:	f855 3b04 	ldr.w	r3, [r5], #4
 8004226:	4798      	blx	r3
 8004228:	3601      	adds	r6, #1
 800422a:	e7f2      	b.n	8004212 <__libc_init_array+0x1e>
 800422c:	08005b58 	.word	0x08005b58
 8004230:	08005b58 	.word	0x08005b58
 8004234:	08005b58 	.word	0x08005b58
 8004238:	08005b5c 	.word	0x08005b5c

0800423c <asin>:
 800423c:	b538      	push	{r3, r4, r5, lr}
 800423e:	ed2d 8b02 	vpush	{d8}
 8004242:	ec55 4b10 	vmov	r4, r5, d0
 8004246:	f000 fb1f 	bl	8004888 <__ieee754_asin>
 800424a:	4622      	mov	r2, r4
 800424c:	462b      	mov	r3, r5
 800424e:	4620      	mov	r0, r4
 8004250:	4629      	mov	r1, r5
 8004252:	eeb0 8a40 	vmov.f32	s16, s0
 8004256:	eef0 8a60 	vmov.f32	s17, s1
 800425a:	f7fc fc0b 	bl	8000a74 <__aeabi_dcmpun>
 800425e:	b9a8      	cbnz	r0, 800428c <asin+0x50>
 8004260:	ec45 4b10 	vmov	d0, r4, r5
 8004264:	f000 f84a 	bl	80042fc <fabs>
 8004268:	4b0c      	ldr	r3, [pc, #48]	@ (800429c <asin+0x60>)
 800426a:	ec51 0b10 	vmov	r0, r1, d0
 800426e:	2200      	movs	r2, #0
 8004270:	f7fc fbf6 	bl	8000a60 <__aeabi_dcmpgt>
 8004274:	b150      	cbz	r0, 800428c <asin+0x50>
 8004276:	f7ff ffb7 	bl	80041e8 <__errno>
 800427a:	ecbd 8b02 	vpop	{d8}
 800427e:	2321      	movs	r3, #33	@ 0x21
 8004280:	6003      	str	r3, [r0, #0]
 8004282:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004286:	4806      	ldr	r0, [pc, #24]	@ (80042a0 <asin+0x64>)
 8004288:	f000 b896 	b.w	80043b8 <nan>
 800428c:	eeb0 0a48 	vmov.f32	s0, s16
 8004290:	eef0 0a68 	vmov.f32	s1, s17
 8004294:	ecbd 8b02 	vpop	{d8}
 8004298:	bd38      	pop	{r3, r4, r5, pc}
 800429a:	bf00      	nop
 800429c:	3ff00000 	.word	0x3ff00000
 80042a0:	08005978 	.word	0x08005978

080042a4 <sqrt>:
 80042a4:	b538      	push	{r3, r4, r5, lr}
 80042a6:	ed2d 8b02 	vpush	{d8}
 80042aa:	ec55 4b10 	vmov	r4, r5, d0
 80042ae:	f000 f88b 	bl	80043c8 <__ieee754_sqrt>
 80042b2:	4622      	mov	r2, r4
 80042b4:	462b      	mov	r3, r5
 80042b6:	4620      	mov	r0, r4
 80042b8:	4629      	mov	r1, r5
 80042ba:	eeb0 8a40 	vmov.f32	s16, s0
 80042be:	eef0 8a60 	vmov.f32	s17, s1
 80042c2:	f7fc fbd7 	bl	8000a74 <__aeabi_dcmpun>
 80042c6:	b990      	cbnz	r0, 80042ee <sqrt+0x4a>
 80042c8:	2200      	movs	r2, #0
 80042ca:	2300      	movs	r3, #0
 80042cc:	4620      	mov	r0, r4
 80042ce:	4629      	mov	r1, r5
 80042d0:	f7fc fba8 	bl	8000a24 <__aeabi_dcmplt>
 80042d4:	b158      	cbz	r0, 80042ee <sqrt+0x4a>
 80042d6:	f7ff ff87 	bl	80041e8 <__errno>
 80042da:	2321      	movs	r3, #33	@ 0x21
 80042dc:	6003      	str	r3, [r0, #0]
 80042de:	2200      	movs	r2, #0
 80042e0:	2300      	movs	r3, #0
 80042e2:	4610      	mov	r0, r2
 80042e4:	4619      	mov	r1, r3
 80042e6:	f7fc fa55 	bl	8000794 <__aeabi_ddiv>
 80042ea:	ec41 0b18 	vmov	d8, r0, r1
 80042ee:	eeb0 0a48 	vmov.f32	s0, s16
 80042f2:	eef0 0a68 	vmov.f32	s1, s17
 80042f6:	ecbd 8b02 	vpop	{d8}
 80042fa:	bd38      	pop	{r3, r4, r5, pc}

080042fc <fabs>:
 80042fc:	ec51 0b10 	vmov	r0, r1, d0
 8004300:	4602      	mov	r2, r0
 8004302:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8004306:	ec43 2b10 	vmov	d0, r2, r3
 800430a:	4770      	bx	lr
 800430c:	0000      	movs	r0, r0
	...

08004310 <sin>:
 8004310:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004312:	ec53 2b10 	vmov	r2, r3, d0
 8004316:	4826      	ldr	r0, [pc, #152]	@ (80043b0 <sin+0xa0>)
 8004318:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800431c:	4281      	cmp	r1, r0
 800431e:	d807      	bhi.n	8004330 <sin+0x20>
 8004320:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80043a8 <sin+0x98>
 8004324:	2000      	movs	r0, #0
 8004326:	b005      	add	sp, #20
 8004328:	f85d eb04 	ldr.w	lr, [sp], #4
 800432c:	f000 b9f0 	b.w	8004710 <__kernel_sin>
 8004330:	4820      	ldr	r0, [pc, #128]	@ (80043b4 <sin+0xa4>)
 8004332:	4281      	cmp	r1, r0
 8004334:	d908      	bls.n	8004348 <sin+0x38>
 8004336:	4610      	mov	r0, r2
 8004338:	4619      	mov	r1, r3
 800433a:	f7fb ff49 	bl	80001d0 <__aeabi_dsub>
 800433e:	ec41 0b10 	vmov	d0, r0, r1
 8004342:	b005      	add	sp, #20
 8004344:	f85d fb04 	ldr.w	pc, [sp], #4
 8004348:	4668      	mov	r0, sp
 800434a:	f000 fca1 	bl	8004c90 <__ieee754_rem_pio2>
 800434e:	f000 0003 	and.w	r0, r0, #3
 8004352:	2801      	cmp	r0, #1
 8004354:	d00c      	beq.n	8004370 <sin+0x60>
 8004356:	2802      	cmp	r0, #2
 8004358:	d011      	beq.n	800437e <sin+0x6e>
 800435a:	b9e8      	cbnz	r0, 8004398 <sin+0x88>
 800435c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004360:	ed9d 0b00 	vldr	d0, [sp]
 8004364:	2001      	movs	r0, #1
 8004366:	f000 f9d3 	bl	8004710 <__kernel_sin>
 800436a:	ec51 0b10 	vmov	r0, r1, d0
 800436e:	e7e6      	b.n	800433e <sin+0x2e>
 8004370:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004374:	ed9d 0b00 	vldr	d0, [sp]
 8004378:	f000 f902 	bl	8004580 <__kernel_cos>
 800437c:	e7f5      	b.n	800436a <sin+0x5a>
 800437e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004382:	ed9d 0b00 	vldr	d0, [sp]
 8004386:	2001      	movs	r0, #1
 8004388:	f000 f9c2 	bl	8004710 <__kernel_sin>
 800438c:	ec53 2b10 	vmov	r2, r3, d0
 8004390:	4610      	mov	r0, r2
 8004392:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8004396:	e7d2      	b.n	800433e <sin+0x2e>
 8004398:	ed9d 1b02 	vldr	d1, [sp, #8]
 800439c:	ed9d 0b00 	vldr	d0, [sp]
 80043a0:	f000 f8ee 	bl	8004580 <__kernel_cos>
 80043a4:	e7f2      	b.n	800438c <sin+0x7c>
 80043a6:	bf00      	nop
	...
 80043b0:	3fe921fb 	.word	0x3fe921fb
 80043b4:	7fefffff 	.word	0x7fefffff

080043b8 <nan>:
 80043b8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80043c0 <nan+0x8>
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	00000000 	.word	0x00000000
 80043c4:	7ff80000 	.word	0x7ff80000

080043c8 <__ieee754_sqrt>:
 80043c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043cc:	4a68      	ldr	r2, [pc, #416]	@ (8004570 <__ieee754_sqrt+0x1a8>)
 80043ce:	ec55 4b10 	vmov	r4, r5, d0
 80043d2:	43aa      	bics	r2, r5
 80043d4:	462b      	mov	r3, r5
 80043d6:	4621      	mov	r1, r4
 80043d8:	d110      	bne.n	80043fc <__ieee754_sqrt+0x34>
 80043da:	4622      	mov	r2, r4
 80043dc:	4620      	mov	r0, r4
 80043de:	4629      	mov	r1, r5
 80043e0:	f7fc f8ae 	bl	8000540 <__aeabi_dmul>
 80043e4:	4602      	mov	r2, r0
 80043e6:	460b      	mov	r3, r1
 80043e8:	4620      	mov	r0, r4
 80043ea:	4629      	mov	r1, r5
 80043ec:	f7fb fef2 	bl	80001d4 <__adddf3>
 80043f0:	4604      	mov	r4, r0
 80043f2:	460d      	mov	r5, r1
 80043f4:	ec45 4b10 	vmov	d0, r4, r5
 80043f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043fc:	2d00      	cmp	r5, #0
 80043fe:	dc0e      	bgt.n	800441e <__ieee754_sqrt+0x56>
 8004400:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8004404:	4322      	orrs	r2, r4
 8004406:	d0f5      	beq.n	80043f4 <__ieee754_sqrt+0x2c>
 8004408:	b19d      	cbz	r5, 8004432 <__ieee754_sqrt+0x6a>
 800440a:	4622      	mov	r2, r4
 800440c:	4620      	mov	r0, r4
 800440e:	4629      	mov	r1, r5
 8004410:	f7fb fede 	bl	80001d0 <__aeabi_dsub>
 8004414:	4602      	mov	r2, r0
 8004416:	460b      	mov	r3, r1
 8004418:	f7fc f9bc 	bl	8000794 <__aeabi_ddiv>
 800441c:	e7e8      	b.n	80043f0 <__ieee754_sqrt+0x28>
 800441e:	152a      	asrs	r2, r5, #20
 8004420:	d115      	bne.n	800444e <__ieee754_sqrt+0x86>
 8004422:	2000      	movs	r0, #0
 8004424:	e009      	b.n	800443a <__ieee754_sqrt+0x72>
 8004426:	0acb      	lsrs	r3, r1, #11
 8004428:	3a15      	subs	r2, #21
 800442a:	0549      	lsls	r1, r1, #21
 800442c:	2b00      	cmp	r3, #0
 800442e:	d0fa      	beq.n	8004426 <__ieee754_sqrt+0x5e>
 8004430:	e7f7      	b.n	8004422 <__ieee754_sqrt+0x5a>
 8004432:	462a      	mov	r2, r5
 8004434:	e7fa      	b.n	800442c <__ieee754_sqrt+0x64>
 8004436:	005b      	lsls	r3, r3, #1
 8004438:	3001      	adds	r0, #1
 800443a:	02dc      	lsls	r4, r3, #11
 800443c:	d5fb      	bpl.n	8004436 <__ieee754_sqrt+0x6e>
 800443e:	1e44      	subs	r4, r0, #1
 8004440:	1b12      	subs	r2, r2, r4
 8004442:	f1c0 0420 	rsb	r4, r0, #32
 8004446:	fa21 f404 	lsr.w	r4, r1, r4
 800444a:	4323      	orrs	r3, r4
 800444c:	4081      	lsls	r1, r0
 800444e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004452:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8004456:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800445a:	07d2      	lsls	r2, r2, #31
 800445c:	bf5c      	itt	pl
 800445e:	005b      	lslpl	r3, r3, #1
 8004460:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8004464:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004468:	bf58      	it	pl
 800446a:	0049      	lslpl	r1, r1, #1
 800446c:	2600      	movs	r6, #0
 800446e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8004472:	106d      	asrs	r5, r5, #1
 8004474:	0049      	lsls	r1, r1, #1
 8004476:	2016      	movs	r0, #22
 8004478:	4632      	mov	r2, r6
 800447a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800447e:	1917      	adds	r7, r2, r4
 8004480:	429f      	cmp	r7, r3
 8004482:	bfde      	ittt	le
 8004484:	193a      	addle	r2, r7, r4
 8004486:	1bdb      	suble	r3, r3, r7
 8004488:	1936      	addle	r6, r6, r4
 800448a:	0fcf      	lsrs	r7, r1, #31
 800448c:	3801      	subs	r0, #1
 800448e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8004492:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8004496:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800449a:	d1f0      	bne.n	800447e <__ieee754_sqrt+0xb6>
 800449c:	4604      	mov	r4, r0
 800449e:	2720      	movs	r7, #32
 80044a0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80044a4:	429a      	cmp	r2, r3
 80044a6:	eb00 0e0c 	add.w	lr, r0, ip
 80044aa:	db02      	blt.n	80044b2 <__ieee754_sqrt+0xea>
 80044ac:	d113      	bne.n	80044d6 <__ieee754_sqrt+0x10e>
 80044ae:	458e      	cmp	lr, r1
 80044b0:	d811      	bhi.n	80044d6 <__ieee754_sqrt+0x10e>
 80044b2:	f1be 0f00 	cmp.w	lr, #0
 80044b6:	eb0e 000c 	add.w	r0, lr, ip
 80044ba:	da42      	bge.n	8004542 <__ieee754_sqrt+0x17a>
 80044bc:	2800      	cmp	r0, #0
 80044be:	db40      	blt.n	8004542 <__ieee754_sqrt+0x17a>
 80044c0:	f102 0801 	add.w	r8, r2, #1
 80044c4:	1a9b      	subs	r3, r3, r2
 80044c6:	458e      	cmp	lr, r1
 80044c8:	bf88      	it	hi
 80044ca:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80044ce:	eba1 010e 	sub.w	r1, r1, lr
 80044d2:	4464      	add	r4, ip
 80044d4:	4642      	mov	r2, r8
 80044d6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80044da:	3f01      	subs	r7, #1
 80044dc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80044e0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80044e4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80044e8:	d1dc      	bne.n	80044a4 <__ieee754_sqrt+0xdc>
 80044ea:	4319      	orrs	r1, r3
 80044ec:	d01b      	beq.n	8004526 <__ieee754_sqrt+0x15e>
 80044ee:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8004574 <__ieee754_sqrt+0x1ac>
 80044f2:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8004578 <__ieee754_sqrt+0x1b0>
 80044f6:	e9da 0100 	ldrd	r0, r1, [sl]
 80044fa:	e9db 2300 	ldrd	r2, r3, [fp]
 80044fe:	f7fb fe67 	bl	80001d0 <__aeabi_dsub>
 8004502:	e9da 8900 	ldrd	r8, r9, [sl]
 8004506:	4602      	mov	r2, r0
 8004508:	460b      	mov	r3, r1
 800450a:	4640      	mov	r0, r8
 800450c:	4649      	mov	r1, r9
 800450e:	f7fc fa93 	bl	8000a38 <__aeabi_dcmple>
 8004512:	b140      	cbz	r0, 8004526 <__ieee754_sqrt+0x15e>
 8004514:	f1b4 3fff 	cmp.w	r4, #4294967295
 8004518:	e9da 0100 	ldrd	r0, r1, [sl]
 800451c:	e9db 2300 	ldrd	r2, r3, [fp]
 8004520:	d111      	bne.n	8004546 <__ieee754_sqrt+0x17e>
 8004522:	3601      	adds	r6, #1
 8004524:	463c      	mov	r4, r7
 8004526:	1072      	asrs	r2, r6, #1
 8004528:	0863      	lsrs	r3, r4, #1
 800452a:	07f1      	lsls	r1, r6, #31
 800452c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8004530:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8004534:	bf48      	it	mi
 8004536:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800453a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800453e:	4618      	mov	r0, r3
 8004540:	e756      	b.n	80043f0 <__ieee754_sqrt+0x28>
 8004542:	4690      	mov	r8, r2
 8004544:	e7be      	b.n	80044c4 <__ieee754_sqrt+0xfc>
 8004546:	f7fb fe45 	bl	80001d4 <__adddf3>
 800454a:	e9da 8900 	ldrd	r8, r9, [sl]
 800454e:	4602      	mov	r2, r0
 8004550:	460b      	mov	r3, r1
 8004552:	4640      	mov	r0, r8
 8004554:	4649      	mov	r1, r9
 8004556:	f7fc fa65 	bl	8000a24 <__aeabi_dcmplt>
 800455a:	b120      	cbz	r0, 8004566 <__ieee754_sqrt+0x19e>
 800455c:	1ca0      	adds	r0, r4, #2
 800455e:	bf08      	it	eq
 8004560:	3601      	addeq	r6, #1
 8004562:	3402      	adds	r4, #2
 8004564:	e7df      	b.n	8004526 <__ieee754_sqrt+0x15e>
 8004566:	1c63      	adds	r3, r4, #1
 8004568:	f023 0401 	bic.w	r4, r3, #1
 800456c:	e7db      	b.n	8004526 <__ieee754_sqrt+0x15e>
 800456e:	bf00      	nop
 8004570:	7ff00000 	.word	0x7ff00000
 8004574:	20000068 	.word	0x20000068
 8004578:	20000060 	.word	0x20000060
 800457c:	00000000 	.word	0x00000000

08004580 <__kernel_cos>:
 8004580:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004584:	ec57 6b10 	vmov	r6, r7, d0
 8004588:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800458c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8004590:	ed8d 1b00 	vstr	d1, [sp]
 8004594:	d206      	bcs.n	80045a4 <__kernel_cos+0x24>
 8004596:	4630      	mov	r0, r6
 8004598:	4639      	mov	r1, r7
 800459a:	f7fc fa81 	bl	8000aa0 <__aeabi_d2iz>
 800459e:	2800      	cmp	r0, #0
 80045a0:	f000 8088 	beq.w	80046b4 <__kernel_cos+0x134>
 80045a4:	4632      	mov	r2, r6
 80045a6:	463b      	mov	r3, r7
 80045a8:	4630      	mov	r0, r6
 80045aa:	4639      	mov	r1, r7
 80045ac:	f7fb ffc8 	bl	8000540 <__aeabi_dmul>
 80045b0:	4b51      	ldr	r3, [pc, #324]	@ (80046f8 <__kernel_cos+0x178>)
 80045b2:	2200      	movs	r2, #0
 80045b4:	4604      	mov	r4, r0
 80045b6:	460d      	mov	r5, r1
 80045b8:	f7fb ffc2 	bl	8000540 <__aeabi_dmul>
 80045bc:	a340      	add	r3, pc, #256	@ (adr r3, 80046c0 <__kernel_cos+0x140>)
 80045be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c2:	4682      	mov	sl, r0
 80045c4:	468b      	mov	fp, r1
 80045c6:	4620      	mov	r0, r4
 80045c8:	4629      	mov	r1, r5
 80045ca:	f7fb ffb9 	bl	8000540 <__aeabi_dmul>
 80045ce:	a33e      	add	r3, pc, #248	@ (adr r3, 80046c8 <__kernel_cos+0x148>)
 80045d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d4:	f7fb fdfe 	bl	80001d4 <__adddf3>
 80045d8:	4622      	mov	r2, r4
 80045da:	462b      	mov	r3, r5
 80045dc:	f7fb ffb0 	bl	8000540 <__aeabi_dmul>
 80045e0:	a33b      	add	r3, pc, #236	@ (adr r3, 80046d0 <__kernel_cos+0x150>)
 80045e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e6:	f7fb fdf3 	bl	80001d0 <__aeabi_dsub>
 80045ea:	4622      	mov	r2, r4
 80045ec:	462b      	mov	r3, r5
 80045ee:	f7fb ffa7 	bl	8000540 <__aeabi_dmul>
 80045f2:	a339      	add	r3, pc, #228	@ (adr r3, 80046d8 <__kernel_cos+0x158>)
 80045f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f8:	f7fb fdec 	bl	80001d4 <__adddf3>
 80045fc:	4622      	mov	r2, r4
 80045fe:	462b      	mov	r3, r5
 8004600:	f7fb ff9e 	bl	8000540 <__aeabi_dmul>
 8004604:	a336      	add	r3, pc, #216	@ (adr r3, 80046e0 <__kernel_cos+0x160>)
 8004606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800460a:	f7fb fde1 	bl	80001d0 <__aeabi_dsub>
 800460e:	4622      	mov	r2, r4
 8004610:	462b      	mov	r3, r5
 8004612:	f7fb ff95 	bl	8000540 <__aeabi_dmul>
 8004616:	a334      	add	r3, pc, #208	@ (adr r3, 80046e8 <__kernel_cos+0x168>)
 8004618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800461c:	f7fb fdda 	bl	80001d4 <__adddf3>
 8004620:	4622      	mov	r2, r4
 8004622:	462b      	mov	r3, r5
 8004624:	f7fb ff8c 	bl	8000540 <__aeabi_dmul>
 8004628:	4622      	mov	r2, r4
 800462a:	462b      	mov	r3, r5
 800462c:	f7fb ff88 	bl	8000540 <__aeabi_dmul>
 8004630:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004634:	4604      	mov	r4, r0
 8004636:	460d      	mov	r5, r1
 8004638:	4630      	mov	r0, r6
 800463a:	4639      	mov	r1, r7
 800463c:	f7fb ff80 	bl	8000540 <__aeabi_dmul>
 8004640:	460b      	mov	r3, r1
 8004642:	4602      	mov	r2, r0
 8004644:	4629      	mov	r1, r5
 8004646:	4620      	mov	r0, r4
 8004648:	f7fb fdc2 	bl	80001d0 <__aeabi_dsub>
 800464c:	4b2b      	ldr	r3, [pc, #172]	@ (80046fc <__kernel_cos+0x17c>)
 800464e:	4598      	cmp	r8, r3
 8004650:	4606      	mov	r6, r0
 8004652:	460f      	mov	r7, r1
 8004654:	d810      	bhi.n	8004678 <__kernel_cos+0xf8>
 8004656:	4602      	mov	r2, r0
 8004658:	460b      	mov	r3, r1
 800465a:	4650      	mov	r0, sl
 800465c:	4659      	mov	r1, fp
 800465e:	f7fb fdb7 	bl	80001d0 <__aeabi_dsub>
 8004662:	460b      	mov	r3, r1
 8004664:	4926      	ldr	r1, [pc, #152]	@ (8004700 <__kernel_cos+0x180>)
 8004666:	4602      	mov	r2, r0
 8004668:	2000      	movs	r0, #0
 800466a:	f7fb fdb1 	bl	80001d0 <__aeabi_dsub>
 800466e:	ec41 0b10 	vmov	d0, r0, r1
 8004672:	b003      	add	sp, #12
 8004674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004678:	4b22      	ldr	r3, [pc, #136]	@ (8004704 <__kernel_cos+0x184>)
 800467a:	4921      	ldr	r1, [pc, #132]	@ (8004700 <__kernel_cos+0x180>)
 800467c:	4598      	cmp	r8, r3
 800467e:	bf8c      	ite	hi
 8004680:	4d21      	ldrhi	r5, [pc, #132]	@ (8004708 <__kernel_cos+0x188>)
 8004682:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8004686:	2400      	movs	r4, #0
 8004688:	4622      	mov	r2, r4
 800468a:	462b      	mov	r3, r5
 800468c:	2000      	movs	r0, #0
 800468e:	f7fb fd9f 	bl	80001d0 <__aeabi_dsub>
 8004692:	4622      	mov	r2, r4
 8004694:	4680      	mov	r8, r0
 8004696:	4689      	mov	r9, r1
 8004698:	462b      	mov	r3, r5
 800469a:	4650      	mov	r0, sl
 800469c:	4659      	mov	r1, fp
 800469e:	f7fb fd97 	bl	80001d0 <__aeabi_dsub>
 80046a2:	4632      	mov	r2, r6
 80046a4:	463b      	mov	r3, r7
 80046a6:	f7fb fd93 	bl	80001d0 <__aeabi_dsub>
 80046aa:	4602      	mov	r2, r0
 80046ac:	460b      	mov	r3, r1
 80046ae:	4640      	mov	r0, r8
 80046b0:	4649      	mov	r1, r9
 80046b2:	e7da      	b.n	800466a <__kernel_cos+0xea>
 80046b4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 80046f0 <__kernel_cos+0x170>
 80046b8:	e7db      	b.n	8004672 <__kernel_cos+0xf2>
 80046ba:	bf00      	nop
 80046bc:	f3af 8000 	nop.w
 80046c0:	be8838d4 	.word	0xbe8838d4
 80046c4:	bda8fae9 	.word	0xbda8fae9
 80046c8:	bdb4b1c4 	.word	0xbdb4b1c4
 80046cc:	3e21ee9e 	.word	0x3e21ee9e
 80046d0:	809c52ad 	.word	0x809c52ad
 80046d4:	3e927e4f 	.word	0x3e927e4f
 80046d8:	19cb1590 	.word	0x19cb1590
 80046dc:	3efa01a0 	.word	0x3efa01a0
 80046e0:	16c15177 	.word	0x16c15177
 80046e4:	3f56c16c 	.word	0x3f56c16c
 80046e8:	5555554c 	.word	0x5555554c
 80046ec:	3fa55555 	.word	0x3fa55555
 80046f0:	00000000 	.word	0x00000000
 80046f4:	3ff00000 	.word	0x3ff00000
 80046f8:	3fe00000 	.word	0x3fe00000
 80046fc:	3fd33332 	.word	0x3fd33332
 8004700:	3ff00000 	.word	0x3ff00000
 8004704:	3fe90000 	.word	0x3fe90000
 8004708:	3fd20000 	.word	0x3fd20000
 800470c:	00000000 	.word	0x00000000

08004710 <__kernel_sin>:
 8004710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004714:	ec55 4b10 	vmov	r4, r5, d0
 8004718:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800471c:	b085      	sub	sp, #20
 800471e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8004722:	ed8d 1b02 	vstr	d1, [sp, #8]
 8004726:	4680      	mov	r8, r0
 8004728:	d205      	bcs.n	8004736 <__kernel_sin+0x26>
 800472a:	4620      	mov	r0, r4
 800472c:	4629      	mov	r1, r5
 800472e:	f7fc f9b7 	bl	8000aa0 <__aeabi_d2iz>
 8004732:	2800      	cmp	r0, #0
 8004734:	d052      	beq.n	80047dc <__kernel_sin+0xcc>
 8004736:	4622      	mov	r2, r4
 8004738:	462b      	mov	r3, r5
 800473a:	4620      	mov	r0, r4
 800473c:	4629      	mov	r1, r5
 800473e:	f7fb feff 	bl	8000540 <__aeabi_dmul>
 8004742:	4682      	mov	sl, r0
 8004744:	468b      	mov	fp, r1
 8004746:	4602      	mov	r2, r0
 8004748:	460b      	mov	r3, r1
 800474a:	4620      	mov	r0, r4
 800474c:	4629      	mov	r1, r5
 800474e:	f7fb fef7 	bl	8000540 <__aeabi_dmul>
 8004752:	a342      	add	r3, pc, #264	@ (adr r3, 800485c <__kernel_sin+0x14c>)
 8004754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004758:	e9cd 0100 	strd	r0, r1, [sp]
 800475c:	4650      	mov	r0, sl
 800475e:	4659      	mov	r1, fp
 8004760:	f7fb feee 	bl	8000540 <__aeabi_dmul>
 8004764:	a33f      	add	r3, pc, #252	@ (adr r3, 8004864 <__kernel_sin+0x154>)
 8004766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800476a:	f7fb fd31 	bl	80001d0 <__aeabi_dsub>
 800476e:	4652      	mov	r2, sl
 8004770:	465b      	mov	r3, fp
 8004772:	f7fb fee5 	bl	8000540 <__aeabi_dmul>
 8004776:	a33d      	add	r3, pc, #244	@ (adr r3, 800486c <__kernel_sin+0x15c>)
 8004778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800477c:	f7fb fd2a 	bl	80001d4 <__adddf3>
 8004780:	4652      	mov	r2, sl
 8004782:	465b      	mov	r3, fp
 8004784:	f7fb fedc 	bl	8000540 <__aeabi_dmul>
 8004788:	a33a      	add	r3, pc, #232	@ (adr r3, 8004874 <__kernel_sin+0x164>)
 800478a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800478e:	f7fb fd1f 	bl	80001d0 <__aeabi_dsub>
 8004792:	4652      	mov	r2, sl
 8004794:	465b      	mov	r3, fp
 8004796:	f7fb fed3 	bl	8000540 <__aeabi_dmul>
 800479a:	a338      	add	r3, pc, #224	@ (adr r3, 800487c <__kernel_sin+0x16c>)
 800479c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a0:	f7fb fd18 	bl	80001d4 <__adddf3>
 80047a4:	4606      	mov	r6, r0
 80047a6:	460f      	mov	r7, r1
 80047a8:	f1b8 0f00 	cmp.w	r8, #0
 80047ac:	d11b      	bne.n	80047e6 <__kernel_sin+0xd6>
 80047ae:	4602      	mov	r2, r0
 80047b0:	460b      	mov	r3, r1
 80047b2:	4650      	mov	r0, sl
 80047b4:	4659      	mov	r1, fp
 80047b6:	f7fb fec3 	bl	8000540 <__aeabi_dmul>
 80047ba:	a325      	add	r3, pc, #148	@ (adr r3, 8004850 <__kernel_sin+0x140>)
 80047bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c0:	f7fb fd06 	bl	80001d0 <__aeabi_dsub>
 80047c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80047c8:	f7fb feba 	bl	8000540 <__aeabi_dmul>
 80047cc:	4602      	mov	r2, r0
 80047ce:	460b      	mov	r3, r1
 80047d0:	4620      	mov	r0, r4
 80047d2:	4629      	mov	r1, r5
 80047d4:	f7fb fcfe 	bl	80001d4 <__adddf3>
 80047d8:	4604      	mov	r4, r0
 80047da:	460d      	mov	r5, r1
 80047dc:	ec45 4b10 	vmov	d0, r4, r5
 80047e0:	b005      	add	sp, #20
 80047e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80047ea:	4b1b      	ldr	r3, [pc, #108]	@ (8004858 <__kernel_sin+0x148>)
 80047ec:	2200      	movs	r2, #0
 80047ee:	f7fb fea7 	bl	8000540 <__aeabi_dmul>
 80047f2:	4632      	mov	r2, r6
 80047f4:	4680      	mov	r8, r0
 80047f6:	4689      	mov	r9, r1
 80047f8:	463b      	mov	r3, r7
 80047fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80047fe:	f7fb fe9f 	bl	8000540 <__aeabi_dmul>
 8004802:	4602      	mov	r2, r0
 8004804:	460b      	mov	r3, r1
 8004806:	4640      	mov	r0, r8
 8004808:	4649      	mov	r1, r9
 800480a:	f7fb fce1 	bl	80001d0 <__aeabi_dsub>
 800480e:	4652      	mov	r2, sl
 8004810:	465b      	mov	r3, fp
 8004812:	f7fb fe95 	bl	8000540 <__aeabi_dmul>
 8004816:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800481a:	f7fb fcd9 	bl	80001d0 <__aeabi_dsub>
 800481e:	a30c      	add	r3, pc, #48	@ (adr r3, 8004850 <__kernel_sin+0x140>)
 8004820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004824:	4606      	mov	r6, r0
 8004826:	460f      	mov	r7, r1
 8004828:	e9dd 0100 	ldrd	r0, r1, [sp]
 800482c:	f7fb fe88 	bl	8000540 <__aeabi_dmul>
 8004830:	4602      	mov	r2, r0
 8004832:	460b      	mov	r3, r1
 8004834:	4630      	mov	r0, r6
 8004836:	4639      	mov	r1, r7
 8004838:	f7fb fccc 	bl	80001d4 <__adddf3>
 800483c:	4602      	mov	r2, r0
 800483e:	460b      	mov	r3, r1
 8004840:	4620      	mov	r0, r4
 8004842:	4629      	mov	r1, r5
 8004844:	f7fb fcc4 	bl	80001d0 <__aeabi_dsub>
 8004848:	e7c6      	b.n	80047d8 <__kernel_sin+0xc8>
 800484a:	bf00      	nop
 800484c:	f3af 8000 	nop.w
 8004850:	55555549 	.word	0x55555549
 8004854:	3fc55555 	.word	0x3fc55555
 8004858:	3fe00000 	.word	0x3fe00000
 800485c:	5acfd57c 	.word	0x5acfd57c
 8004860:	3de5d93a 	.word	0x3de5d93a
 8004864:	8a2b9ceb 	.word	0x8a2b9ceb
 8004868:	3e5ae5e6 	.word	0x3e5ae5e6
 800486c:	57b1fe7d 	.word	0x57b1fe7d
 8004870:	3ec71de3 	.word	0x3ec71de3
 8004874:	19c161d5 	.word	0x19c161d5
 8004878:	3f2a01a0 	.word	0x3f2a01a0
 800487c:	1110f8a6 	.word	0x1110f8a6
 8004880:	3f811111 	.word	0x3f811111
 8004884:	00000000 	.word	0x00000000

08004888 <__ieee754_asin>:
 8004888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800488c:	ec55 4b10 	vmov	r4, r5, d0
 8004890:	4bc7      	ldr	r3, [pc, #796]	@ (8004bb0 <__ieee754_asin+0x328>)
 8004892:	b087      	sub	sp, #28
 8004894:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8004898:	429e      	cmp	r6, r3
 800489a:	9501      	str	r5, [sp, #4]
 800489c:	d92d      	bls.n	80048fa <__ieee754_asin+0x72>
 800489e:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 80048a2:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 80048a6:	4326      	orrs	r6, r4
 80048a8:	d116      	bne.n	80048d8 <__ieee754_asin+0x50>
 80048aa:	a3a7      	add	r3, pc, #668	@ (adr r3, 8004b48 <__ieee754_asin+0x2c0>)
 80048ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b0:	4620      	mov	r0, r4
 80048b2:	4629      	mov	r1, r5
 80048b4:	f7fb fe44 	bl	8000540 <__aeabi_dmul>
 80048b8:	a3a5      	add	r3, pc, #660	@ (adr r3, 8004b50 <__ieee754_asin+0x2c8>)
 80048ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048be:	4606      	mov	r6, r0
 80048c0:	460f      	mov	r7, r1
 80048c2:	4620      	mov	r0, r4
 80048c4:	4629      	mov	r1, r5
 80048c6:	f7fb fe3b 	bl	8000540 <__aeabi_dmul>
 80048ca:	4602      	mov	r2, r0
 80048cc:	460b      	mov	r3, r1
 80048ce:	4630      	mov	r0, r6
 80048d0:	4639      	mov	r1, r7
 80048d2:	f7fb fc7f 	bl	80001d4 <__adddf3>
 80048d6:	e009      	b.n	80048ec <__ieee754_asin+0x64>
 80048d8:	4622      	mov	r2, r4
 80048da:	462b      	mov	r3, r5
 80048dc:	4620      	mov	r0, r4
 80048de:	4629      	mov	r1, r5
 80048e0:	f7fb fc76 	bl	80001d0 <__aeabi_dsub>
 80048e4:	4602      	mov	r2, r0
 80048e6:	460b      	mov	r3, r1
 80048e8:	f7fb ff54 	bl	8000794 <__aeabi_ddiv>
 80048ec:	4604      	mov	r4, r0
 80048ee:	460d      	mov	r5, r1
 80048f0:	ec45 4b10 	vmov	d0, r4, r5
 80048f4:	b007      	add	sp, #28
 80048f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048fa:	4bae      	ldr	r3, [pc, #696]	@ (8004bb4 <__ieee754_asin+0x32c>)
 80048fc:	429e      	cmp	r6, r3
 80048fe:	d810      	bhi.n	8004922 <__ieee754_asin+0x9a>
 8004900:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 8004904:	f080 80ad 	bcs.w	8004a62 <__ieee754_asin+0x1da>
 8004908:	a393      	add	r3, pc, #588	@ (adr r3, 8004b58 <__ieee754_asin+0x2d0>)
 800490a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800490e:	4620      	mov	r0, r4
 8004910:	4629      	mov	r1, r5
 8004912:	f7fb fc5f 	bl	80001d4 <__adddf3>
 8004916:	4ba8      	ldr	r3, [pc, #672]	@ (8004bb8 <__ieee754_asin+0x330>)
 8004918:	2200      	movs	r2, #0
 800491a:	f7fc f8a1 	bl	8000a60 <__aeabi_dcmpgt>
 800491e:	2800      	cmp	r0, #0
 8004920:	d1e6      	bne.n	80048f0 <__ieee754_asin+0x68>
 8004922:	ec45 4b10 	vmov	d0, r4, r5
 8004926:	f7ff fce9 	bl	80042fc <fabs>
 800492a:	49a3      	ldr	r1, [pc, #652]	@ (8004bb8 <__ieee754_asin+0x330>)
 800492c:	ec53 2b10 	vmov	r2, r3, d0
 8004930:	2000      	movs	r0, #0
 8004932:	f7fb fc4d 	bl	80001d0 <__aeabi_dsub>
 8004936:	4ba1      	ldr	r3, [pc, #644]	@ (8004bbc <__ieee754_asin+0x334>)
 8004938:	2200      	movs	r2, #0
 800493a:	f7fb fe01 	bl	8000540 <__aeabi_dmul>
 800493e:	a388      	add	r3, pc, #544	@ (adr r3, 8004b60 <__ieee754_asin+0x2d8>)
 8004940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004944:	4604      	mov	r4, r0
 8004946:	460d      	mov	r5, r1
 8004948:	f7fb fdfa 	bl	8000540 <__aeabi_dmul>
 800494c:	a386      	add	r3, pc, #536	@ (adr r3, 8004b68 <__ieee754_asin+0x2e0>)
 800494e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004952:	f7fb fc3f 	bl	80001d4 <__adddf3>
 8004956:	4622      	mov	r2, r4
 8004958:	462b      	mov	r3, r5
 800495a:	f7fb fdf1 	bl	8000540 <__aeabi_dmul>
 800495e:	a384      	add	r3, pc, #528	@ (adr r3, 8004b70 <__ieee754_asin+0x2e8>)
 8004960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004964:	f7fb fc34 	bl	80001d0 <__aeabi_dsub>
 8004968:	4622      	mov	r2, r4
 800496a:	462b      	mov	r3, r5
 800496c:	f7fb fde8 	bl	8000540 <__aeabi_dmul>
 8004970:	a381      	add	r3, pc, #516	@ (adr r3, 8004b78 <__ieee754_asin+0x2f0>)
 8004972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004976:	f7fb fc2d 	bl	80001d4 <__adddf3>
 800497a:	4622      	mov	r2, r4
 800497c:	462b      	mov	r3, r5
 800497e:	f7fb fddf 	bl	8000540 <__aeabi_dmul>
 8004982:	a37f      	add	r3, pc, #508	@ (adr r3, 8004b80 <__ieee754_asin+0x2f8>)
 8004984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004988:	f7fb fc22 	bl	80001d0 <__aeabi_dsub>
 800498c:	4622      	mov	r2, r4
 800498e:	462b      	mov	r3, r5
 8004990:	f7fb fdd6 	bl	8000540 <__aeabi_dmul>
 8004994:	a37c      	add	r3, pc, #496	@ (adr r3, 8004b88 <__ieee754_asin+0x300>)
 8004996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800499a:	f7fb fc1b 	bl	80001d4 <__adddf3>
 800499e:	4622      	mov	r2, r4
 80049a0:	462b      	mov	r3, r5
 80049a2:	f7fb fdcd 	bl	8000540 <__aeabi_dmul>
 80049a6:	a37a      	add	r3, pc, #488	@ (adr r3, 8004b90 <__ieee754_asin+0x308>)
 80049a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80049b0:	4620      	mov	r0, r4
 80049b2:	4629      	mov	r1, r5
 80049b4:	f7fb fdc4 	bl	8000540 <__aeabi_dmul>
 80049b8:	a377      	add	r3, pc, #476	@ (adr r3, 8004b98 <__ieee754_asin+0x310>)
 80049ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049be:	f7fb fc07 	bl	80001d0 <__aeabi_dsub>
 80049c2:	4622      	mov	r2, r4
 80049c4:	462b      	mov	r3, r5
 80049c6:	f7fb fdbb 	bl	8000540 <__aeabi_dmul>
 80049ca:	a375      	add	r3, pc, #468	@ (adr r3, 8004ba0 <__ieee754_asin+0x318>)
 80049cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d0:	f7fb fc00 	bl	80001d4 <__adddf3>
 80049d4:	4622      	mov	r2, r4
 80049d6:	462b      	mov	r3, r5
 80049d8:	f7fb fdb2 	bl	8000540 <__aeabi_dmul>
 80049dc:	a372      	add	r3, pc, #456	@ (adr r3, 8004ba8 <__ieee754_asin+0x320>)
 80049de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e2:	f7fb fbf5 	bl	80001d0 <__aeabi_dsub>
 80049e6:	4622      	mov	r2, r4
 80049e8:	462b      	mov	r3, r5
 80049ea:	f7fb fda9 	bl	8000540 <__aeabi_dmul>
 80049ee:	4b72      	ldr	r3, [pc, #456]	@ (8004bb8 <__ieee754_asin+0x330>)
 80049f0:	2200      	movs	r2, #0
 80049f2:	f7fb fbef 	bl	80001d4 <__adddf3>
 80049f6:	ec45 4b10 	vmov	d0, r4, r5
 80049fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80049fe:	f7ff fce3 	bl	80043c8 <__ieee754_sqrt>
 8004a02:	4b6f      	ldr	r3, [pc, #444]	@ (8004bc0 <__ieee754_asin+0x338>)
 8004a04:	429e      	cmp	r6, r3
 8004a06:	ec5b ab10 	vmov	sl, fp, d0
 8004a0a:	f240 80db 	bls.w	8004bc4 <__ieee754_asin+0x33c>
 8004a0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a16:	f7fb febd 	bl	8000794 <__aeabi_ddiv>
 8004a1a:	4652      	mov	r2, sl
 8004a1c:	465b      	mov	r3, fp
 8004a1e:	f7fb fd8f 	bl	8000540 <__aeabi_dmul>
 8004a22:	4652      	mov	r2, sl
 8004a24:	465b      	mov	r3, fp
 8004a26:	f7fb fbd5 	bl	80001d4 <__adddf3>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	f7fb fbd1 	bl	80001d4 <__adddf3>
 8004a32:	a347      	add	r3, pc, #284	@ (adr r3, 8004b50 <__ieee754_asin+0x2c8>)
 8004a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a38:	f7fb fbca 	bl	80001d0 <__aeabi_dsub>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	460b      	mov	r3, r1
 8004a40:	a141      	add	r1, pc, #260	@ (adr r1, 8004b48 <__ieee754_asin+0x2c0>)
 8004a42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a46:	f7fb fbc3 	bl	80001d0 <__aeabi_dsub>
 8004a4a:	9b01      	ldr	r3, [sp, #4]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	bfdc      	itt	le
 8004a50:	4602      	movle	r2, r0
 8004a52:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 8004a56:	4604      	mov	r4, r0
 8004a58:	460d      	mov	r5, r1
 8004a5a:	bfdc      	itt	le
 8004a5c:	4614      	movle	r4, r2
 8004a5e:	461d      	movle	r5, r3
 8004a60:	e746      	b.n	80048f0 <__ieee754_asin+0x68>
 8004a62:	4622      	mov	r2, r4
 8004a64:	462b      	mov	r3, r5
 8004a66:	4620      	mov	r0, r4
 8004a68:	4629      	mov	r1, r5
 8004a6a:	f7fb fd69 	bl	8000540 <__aeabi_dmul>
 8004a6e:	a33c      	add	r3, pc, #240	@ (adr r3, 8004b60 <__ieee754_asin+0x2d8>)
 8004a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a74:	4606      	mov	r6, r0
 8004a76:	460f      	mov	r7, r1
 8004a78:	f7fb fd62 	bl	8000540 <__aeabi_dmul>
 8004a7c:	a33a      	add	r3, pc, #232	@ (adr r3, 8004b68 <__ieee754_asin+0x2e0>)
 8004a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a82:	f7fb fba7 	bl	80001d4 <__adddf3>
 8004a86:	4632      	mov	r2, r6
 8004a88:	463b      	mov	r3, r7
 8004a8a:	f7fb fd59 	bl	8000540 <__aeabi_dmul>
 8004a8e:	a338      	add	r3, pc, #224	@ (adr r3, 8004b70 <__ieee754_asin+0x2e8>)
 8004a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a94:	f7fb fb9c 	bl	80001d0 <__aeabi_dsub>
 8004a98:	4632      	mov	r2, r6
 8004a9a:	463b      	mov	r3, r7
 8004a9c:	f7fb fd50 	bl	8000540 <__aeabi_dmul>
 8004aa0:	a335      	add	r3, pc, #212	@ (adr r3, 8004b78 <__ieee754_asin+0x2f0>)
 8004aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa6:	f7fb fb95 	bl	80001d4 <__adddf3>
 8004aaa:	4632      	mov	r2, r6
 8004aac:	463b      	mov	r3, r7
 8004aae:	f7fb fd47 	bl	8000540 <__aeabi_dmul>
 8004ab2:	a333      	add	r3, pc, #204	@ (adr r3, 8004b80 <__ieee754_asin+0x2f8>)
 8004ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab8:	f7fb fb8a 	bl	80001d0 <__aeabi_dsub>
 8004abc:	4632      	mov	r2, r6
 8004abe:	463b      	mov	r3, r7
 8004ac0:	f7fb fd3e 	bl	8000540 <__aeabi_dmul>
 8004ac4:	a330      	add	r3, pc, #192	@ (adr r3, 8004b88 <__ieee754_asin+0x300>)
 8004ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aca:	f7fb fb83 	bl	80001d4 <__adddf3>
 8004ace:	4632      	mov	r2, r6
 8004ad0:	463b      	mov	r3, r7
 8004ad2:	f7fb fd35 	bl	8000540 <__aeabi_dmul>
 8004ad6:	a32e      	add	r3, pc, #184	@ (adr r3, 8004b90 <__ieee754_asin+0x308>)
 8004ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004adc:	4680      	mov	r8, r0
 8004ade:	4689      	mov	r9, r1
 8004ae0:	4630      	mov	r0, r6
 8004ae2:	4639      	mov	r1, r7
 8004ae4:	f7fb fd2c 	bl	8000540 <__aeabi_dmul>
 8004ae8:	a32b      	add	r3, pc, #172	@ (adr r3, 8004b98 <__ieee754_asin+0x310>)
 8004aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aee:	f7fb fb6f 	bl	80001d0 <__aeabi_dsub>
 8004af2:	4632      	mov	r2, r6
 8004af4:	463b      	mov	r3, r7
 8004af6:	f7fb fd23 	bl	8000540 <__aeabi_dmul>
 8004afa:	a329      	add	r3, pc, #164	@ (adr r3, 8004ba0 <__ieee754_asin+0x318>)
 8004afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b00:	f7fb fb68 	bl	80001d4 <__adddf3>
 8004b04:	4632      	mov	r2, r6
 8004b06:	463b      	mov	r3, r7
 8004b08:	f7fb fd1a 	bl	8000540 <__aeabi_dmul>
 8004b0c:	a326      	add	r3, pc, #152	@ (adr r3, 8004ba8 <__ieee754_asin+0x320>)
 8004b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b12:	f7fb fb5d 	bl	80001d0 <__aeabi_dsub>
 8004b16:	4632      	mov	r2, r6
 8004b18:	463b      	mov	r3, r7
 8004b1a:	f7fb fd11 	bl	8000540 <__aeabi_dmul>
 8004b1e:	4b26      	ldr	r3, [pc, #152]	@ (8004bb8 <__ieee754_asin+0x330>)
 8004b20:	2200      	movs	r2, #0
 8004b22:	f7fb fb57 	bl	80001d4 <__adddf3>
 8004b26:	4602      	mov	r2, r0
 8004b28:	460b      	mov	r3, r1
 8004b2a:	4640      	mov	r0, r8
 8004b2c:	4649      	mov	r1, r9
 8004b2e:	f7fb fe31 	bl	8000794 <__aeabi_ddiv>
 8004b32:	4622      	mov	r2, r4
 8004b34:	462b      	mov	r3, r5
 8004b36:	f7fb fd03 	bl	8000540 <__aeabi_dmul>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	4620      	mov	r0, r4
 8004b40:	4629      	mov	r1, r5
 8004b42:	e6c6      	b.n	80048d2 <__ieee754_asin+0x4a>
 8004b44:	f3af 8000 	nop.w
 8004b48:	54442d18 	.word	0x54442d18
 8004b4c:	3ff921fb 	.word	0x3ff921fb
 8004b50:	33145c07 	.word	0x33145c07
 8004b54:	3c91a626 	.word	0x3c91a626
 8004b58:	8800759c 	.word	0x8800759c
 8004b5c:	7e37e43c 	.word	0x7e37e43c
 8004b60:	0dfdf709 	.word	0x0dfdf709
 8004b64:	3f023de1 	.word	0x3f023de1
 8004b68:	7501b288 	.word	0x7501b288
 8004b6c:	3f49efe0 	.word	0x3f49efe0
 8004b70:	b5688f3b 	.word	0xb5688f3b
 8004b74:	3fa48228 	.word	0x3fa48228
 8004b78:	0e884455 	.word	0x0e884455
 8004b7c:	3fc9c155 	.word	0x3fc9c155
 8004b80:	03eb6f7d 	.word	0x03eb6f7d
 8004b84:	3fd4d612 	.word	0x3fd4d612
 8004b88:	55555555 	.word	0x55555555
 8004b8c:	3fc55555 	.word	0x3fc55555
 8004b90:	b12e9282 	.word	0xb12e9282
 8004b94:	3fb3b8c5 	.word	0x3fb3b8c5
 8004b98:	1b8d0159 	.word	0x1b8d0159
 8004b9c:	3fe6066c 	.word	0x3fe6066c
 8004ba0:	9c598ac8 	.word	0x9c598ac8
 8004ba4:	40002ae5 	.word	0x40002ae5
 8004ba8:	1c8a2d4b 	.word	0x1c8a2d4b
 8004bac:	40033a27 	.word	0x40033a27
 8004bb0:	3fefffff 	.word	0x3fefffff
 8004bb4:	3fdfffff 	.word	0x3fdfffff
 8004bb8:	3ff00000 	.word	0x3ff00000
 8004bbc:	3fe00000 	.word	0x3fe00000
 8004bc0:	3fef3332 	.word	0x3fef3332
 8004bc4:	4652      	mov	r2, sl
 8004bc6:	465b      	mov	r3, fp
 8004bc8:	4650      	mov	r0, sl
 8004bca:	4659      	mov	r1, fp
 8004bcc:	f7fb fb02 	bl	80001d4 <__adddf3>
 8004bd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004bd4:	4606      	mov	r6, r0
 8004bd6:	460f      	mov	r7, r1
 8004bd8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004bdc:	f7fb fdda 	bl	8000794 <__aeabi_ddiv>
 8004be0:	4602      	mov	r2, r0
 8004be2:	460b      	mov	r3, r1
 8004be4:	4630      	mov	r0, r6
 8004be6:	4639      	mov	r1, r7
 8004be8:	f7fb fcaa 	bl	8000540 <__aeabi_dmul>
 8004bec:	f04f 0800 	mov.w	r8, #0
 8004bf0:	4606      	mov	r6, r0
 8004bf2:	460f      	mov	r7, r1
 8004bf4:	4642      	mov	r2, r8
 8004bf6:	465b      	mov	r3, fp
 8004bf8:	4640      	mov	r0, r8
 8004bfa:	4659      	mov	r1, fp
 8004bfc:	f7fb fca0 	bl	8000540 <__aeabi_dmul>
 8004c00:	4602      	mov	r2, r0
 8004c02:	460b      	mov	r3, r1
 8004c04:	4620      	mov	r0, r4
 8004c06:	4629      	mov	r1, r5
 8004c08:	f7fb fae2 	bl	80001d0 <__aeabi_dsub>
 8004c0c:	4642      	mov	r2, r8
 8004c0e:	4604      	mov	r4, r0
 8004c10:	460d      	mov	r5, r1
 8004c12:	465b      	mov	r3, fp
 8004c14:	4650      	mov	r0, sl
 8004c16:	4659      	mov	r1, fp
 8004c18:	f7fb fadc 	bl	80001d4 <__adddf3>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	460b      	mov	r3, r1
 8004c20:	4620      	mov	r0, r4
 8004c22:	4629      	mov	r1, r5
 8004c24:	f7fb fdb6 	bl	8000794 <__aeabi_ddiv>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	460b      	mov	r3, r1
 8004c2c:	f7fb fad2 	bl	80001d4 <__adddf3>
 8004c30:	4602      	mov	r2, r0
 8004c32:	460b      	mov	r3, r1
 8004c34:	a112      	add	r1, pc, #72	@ (adr r1, 8004c80 <__ieee754_asin+0x3f8>)
 8004c36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c3a:	f7fb fac9 	bl	80001d0 <__aeabi_dsub>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	460b      	mov	r3, r1
 8004c42:	4630      	mov	r0, r6
 8004c44:	4639      	mov	r1, r7
 8004c46:	f7fb fac3 	bl	80001d0 <__aeabi_dsub>
 8004c4a:	4642      	mov	r2, r8
 8004c4c:	4604      	mov	r4, r0
 8004c4e:	460d      	mov	r5, r1
 8004c50:	465b      	mov	r3, fp
 8004c52:	4640      	mov	r0, r8
 8004c54:	4659      	mov	r1, fp
 8004c56:	f7fb fabd 	bl	80001d4 <__adddf3>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	460b      	mov	r3, r1
 8004c5e:	a10a      	add	r1, pc, #40	@ (adr r1, 8004c88 <__ieee754_asin+0x400>)
 8004c60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c64:	f7fb fab4 	bl	80001d0 <__aeabi_dsub>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	4620      	mov	r0, r4
 8004c6e:	4629      	mov	r1, r5
 8004c70:	f7fb faae 	bl	80001d0 <__aeabi_dsub>
 8004c74:	4602      	mov	r2, r0
 8004c76:	460b      	mov	r3, r1
 8004c78:	a103      	add	r1, pc, #12	@ (adr r1, 8004c88 <__ieee754_asin+0x400>)
 8004c7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c7e:	e6e2      	b.n	8004a46 <__ieee754_asin+0x1be>
 8004c80:	33145c07 	.word	0x33145c07
 8004c84:	3c91a626 	.word	0x3c91a626
 8004c88:	54442d18 	.word	0x54442d18
 8004c8c:	3fe921fb 	.word	0x3fe921fb

08004c90 <__ieee754_rem_pio2>:
 8004c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c94:	ec57 6b10 	vmov	r6, r7, d0
 8004c98:	4bc5      	ldr	r3, [pc, #788]	@ (8004fb0 <__ieee754_rem_pio2+0x320>)
 8004c9a:	b08d      	sub	sp, #52	@ 0x34
 8004c9c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8004ca0:	4598      	cmp	r8, r3
 8004ca2:	4604      	mov	r4, r0
 8004ca4:	9704      	str	r7, [sp, #16]
 8004ca6:	d807      	bhi.n	8004cb8 <__ieee754_rem_pio2+0x28>
 8004ca8:	2200      	movs	r2, #0
 8004caa:	2300      	movs	r3, #0
 8004cac:	ed80 0b00 	vstr	d0, [r0]
 8004cb0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004cb4:	2500      	movs	r5, #0
 8004cb6:	e028      	b.n	8004d0a <__ieee754_rem_pio2+0x7a>
 8004cb8:	4bbe      	ldr	r3, [pc, #760]	@ (8004fb4 <__ieee754_rem_pio2+0x324>)
 8004cba:	4598      	cmp	r8, r3
 8004cbc:	d878      	bhi.n	8004db0 <__ieee754_rem_pio2+0x120>
 8004cbe:	9b04      	ldr	r3, [sp, #16]
 8004cc0:	4dbd      	ldr	r5, [pc, #756]	@ (8004fb8 <__ieee754_rem_pio2+0x328>)
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	4630      	mov	r0, r6
 8004cc6:	a3ac      	add	r3, pc, #688	@ (adr r3, 8004f78 <__ieee754_rem_pio2+0x2e8>)
 8004cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ccc:	4639      	mov	r1, r7
 8004cce:	dd38      	ble.n	8004d42 <__ieee754_rem_pio2+0xb2>
 8004cd0:	f7fb fa7e 	bl	80001d0 <__aeabi_dsub>
 8004cd4:	45a8      	cmp	r8, r5
 8004cd6:	4606      	mov	r6, r0
 8004cd8:	460f      	mov	r7, r1
 8004cda:	d01a      	beq.n	8004d12 <__ieee754_rem_pio2+0x82>
 8004cdc:	a3a8      	add	r3, pc, #672	@ (adr r3, 8004f80 <__ieee754_rem_pio2+0x2f0>)
 8004cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce2:	f7fb fa75 	bl	80001d0 <__aeabi_dsub>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	460b      	mov	r3, r1
 8004cea:	4680      	mov	r8, r0
 8004cec:	4689      	mov	r9, r1
 8004cee:	4630      	mov	r0, r6
 8004cf0:	4639      	mov	r1, r7
 8004cf2:	f7fb fa6d 	bl	80001d0 <__aeabi_dsub>
 8004cf6:	a3a2      	add	r3, pc, #648	@ (adr r3, 8004f80 <__ieee754_rem_pio2+0x2f0>)
 8004cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cfc:	f7fb fa68 	bl	80001d0 <__aeabi_dsub>
 8004d00:	e9c4 8900 	strd	r8, r9, [r4]
 8004d04:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004d08:	2501      	movs	r5, #1
 8004d0a:	4628      	mov	r0, r5
 8004d0c:	b00d      	add	sp, #52	@ 0x34
 8004d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d12:	a39d      	add	r3, pc, #628	@ (adr r3, 8004f88 <__ieee754_rem_pio2+0x2f8>)
 8004d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d18:	f7fb fa5a 	bl	80001d0 <__aeabi_dsub>
 8004d1c:	a39c      	add	r3, pc, #624	@ (adr r3, 8004f90 <__ieee754_rem_pio2+0x300>)
 8004d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d22:	4606      	mov	r6, r0
 8004d24:	460f      	mov	r7, r1
 8004d26:	f7fb fa53 	bl	80001d0 <__aeabi_dsub>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	4680      	mov	r8, r0
 8004d30:	4689      	mov	r9, r1
 8004d32:	4630      	mov	r0, r6
 8004d34:	4639      	mov	r1, r7
 8004d36:	f7fb fa4b 	bl	80001d0 <__aeabi_dsub>
 8004d3a:	a395      	add	r3, pc, #596	@ (adr r3, 8004f90 <__ieee754_rem_pio2+0x300>)
 8004d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d40:	e7dc      	b.n	8004cfc <__ieee754_rem_pio2+0x6c>
 8004d42:	f7fb fa47 	bl	80001d4 <__adddf3>
 8004d46:	45a8      	cmp	r8, r5
 8004d48:	4606      	mov	r6, r0
 8004d4a:	460f      	mov	r7, r1
 8004d4c:	d018      	beq.n	8004d80 <__ieee754_rem_pio2+0xf0>
 8004d4e:	a38c      	add	r3, pc, #560	@ (adr r3, 8004f80 <__ieee754_rem_pio2+0x2f0>)
 8004d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d54:	f7fb fa3e 	bl	80001d4 <__adddf3>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	460b      	mov	r3, r1
 8004d5c:	4680      	mov	r8, r0
 8004d5e:	4689      	mov	r9, r1
 8004d60:	4630      	mov	r0, r6
 8004d62:	4639      	mov	r1, r7
 8004d64:	f7fb fa34 	bl	80001d0 <__aeabi_dsub>
 8004d68:	a385      	add	r3, pc, #532	@ (adr r3, 8004f80 <__ieee754_rem_pio2+0x2f0>)
 8004d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d6e:	f7fb fa31 	bl	80001d4 <__adddf3>
 8004d72:	f04f 35ff 	mov.w	r5, #4294967295
 8004d76:	e9c4 8900 	strd	r8, r9, [r4]
 8004d7a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004d7e:	e7c4      	b.n	8004d0a <__ieee754_rem_pio2+0x7a>
 8004d80:	a381      	add	r3, pc, #516	@ (adr r3, 8004f88 <__ieee754_rem_pio2+0x2f8>)
 8004d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d86:	f7fb fa25 	bl	80001d4 <__adddf3>
 8004d8a:	a381      	add	r3, pc, #516	@ (adr r3, 8004f90 <__ieee754_rem_pio2+0x300>)
 8004d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d90:	4606      	mov	r6, r0
 8004d92:	460f      	mov	r7, r1
 8004d94:	f7fb fa1e 	bl	80001d4 <__adddf3>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	460b      	mov	r3, r1
 8004d9c:	4680      	mov	r8, r0
 8004d9e:	4689      	mov	r9, r1
 8004da0:	4630      	mov	r0, r6
 8004da2:	4639      	mov	r1, r7
 8004da4:	f7fb fa14 	bl	80001d0 <__aeabi_dsub>
 8004da8:	a379      	add	r3, pc, #484	@ (adr r3, 8004f90 <__ieee754_rem_pio2+0x300>)
 8004daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dae:	e7de      	b.n	8004d6e <__ieee754_rem_pio2+0xde>
 8004db0:	4b82      	ldr	r3, [pc, #520]	@ (8004fbc <__ieee754_rem_pio2+0x32c>)
 8004db2:	4598      	cmp	r8, r3
 8004db4:	f200 80d1 	bhi.w	8004f5a <__ieee754_rem_pio2+0x2ca>
 8004db8:	f7ff faa0 	bl	80042fc <fabs>
 8004dbc:	ec57 6b10 	vmov	r6, r7, d0
 8004dc0:	a375      	add	r3, pc, #468	@ (adr r3, 8004f98 <__ieee754_rem_pio2+0x308>)
 8004dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc6:	4630      	mov	r0, r6
 8004dc8:	4639      	mov	r1, r7
 8004dca:	f7fb fbb9 	bl	8000540 <__aeabi_dmul>
 8004dce:	4b7c      	ldr	r3, [pc, #496]	@ (8004fc0 <__ieee754_rem_pio2+0x330>)
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f7fb f9ff 	bl	80001d4 <__adddf3>
 8004dd6:	f7fb fe63 	bl	8000aa0 <__aeabi_d2iz>
 8004dda:	4605      	mov	r5, r0
 8004ddc:	f7fb fb46 	bl	800046c <__aeabi_i2d>
 8004de0:	4602      	mov	r2, r0
 8004de2:	460b      	mov	r3, r1
 8004de4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004de8:	a363      	add	r3, pc, #396	@ (adr r3, 8004f78 <__ieee754_rem_pio2+0x2e8>)
 8004dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dee:	f7fb fba7 	bl	8000540 <__aeabi_dmul>
 8004df2:	4602      	mov	r2, r0
 8004df4:	460b      	mov	r3, r1
 8004df6:	4630      	mov	r0, r6
 8004df8:	4639      	mov	r1, r7
 8004dfa:	f7fb f9e9 	bl	80001d0 <__aeabi_dsub>
 8004dfe:	a360      	add	r3, pc, #384	@ (adr r3, 8004f80 <__ieee754_rem_pio2+0x2f0>)
 8004e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e04:	4682      	mov	sl, r0
 8004e06:	468b      	mov	fp, r1
 8004e08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e0c:	f7fb fb98 	bl	8000540 <__aeabi_dmul>
 8004e10:	2d1f      	cmp	r5, #31
 8004e12:	4606      	mov	r6, r0
 8004e14:	460f      	mov	r7, r1
 8004e16:	dc0c      	bgt.n	8004e32 <__ieee754_rem_pio2+0x1a2>
 8004e18:	4b6a      	ldr	r3, [pc, #424]	@ (8004fc4 <__ieee754_rem_pio2+0x334>)
 8004e1a:	1e6a      	subs	r2, r5, #1
 8004e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e20:	4543      	cmp	r3, r8
 8004e22:	d006      	beq.n	8004e32 <__ieee754_rem_pio2+0x1a2>
 8004e24:	4632      	mov	r2, r6
 8004e26:	463b      	mov	r3, r7
 8004e28:	4650      	mov	r0, sl
 8004e2a:	4659      	mov	r1, fp
 8004e2c:	f7fb f9d0 	bl	80001d0 <__aeabi_dsub>
 8004e30:	e00e      	b.n	8004e50 <__ieee754_rem_pio2+0x1c0>
 8004e32:	463b      	mov	r3, r7
 8004e34:	4632      	mov	r2, r6
 8004e36:	4650      	mov	r0, sl
 8004e38:	4659      	mov	r1, fp
 8004e3a:	f7fb f9c9 	bl	80001d0 <__aeabi_dsub>
 8004e3e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004e42:	9305      	str	r3, [sp, #20]
 8004e44:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004e48:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8004e4c:	2b10      	cmp	r3, #16
 8004e4e:	dc02      	bgt.n	8004e56 <__ieee754_rem_pio2+0x1c6>
 8004e50:	e9c4 0100 	strd	r0, r1, [r4]
 8004e54:	e039      	b.n	8004eca <__ieee754_rem_pio2+0x23a>
 8004e56:	a34c      	add	r3, pc, #304	@ (adr r3, 8004f88 <__ieee754_rem_pio2+0x2f8>)
 8004e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e60:	f7fb fb6e 	bl	8000540 <__aeabi_dmul>
 8004e64:	4606      	mov	r6, r0
 8004e66:	460f      	mov	r7, r1
 8004e68:	4602      	mov	r2, r0
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	4650      	mov	r0, sl
 8004e6e:	4659      	mov	r1, fp
 8004e70:	f7fb f9ae 	bl	80001d0 <__aeabi_dsub>
 8004e74:	4602      	mov	r2, r0
 8004e76:	460b      	mov	r3, r1
 8004e78:	4680      	mov	r8, r0
 8004e7a:	4689      	mov	r9, r1
 8004e7c:	4650      	mov	r0, sl
 8004e7e:	4659      	mov	r1, fp
 8004e80:	f7fb f9a6 	bl	80001d0 <__aeabi_dsub>
 8004e84:	4632      	mov	r2, r6
 8004e86:	463b      	mov	r3, r7
 8004e88:	f7fb f9a2 	bl	80001d0 <__aeabi_dsub>
 8004e8c:	a340      	add	r3, pc, #256	@ (adr r3, 8004f90 <__ieee754_rem_pio2+0x300>)
 8004e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e92:	4606      	mov	r6, r0
 8004e94:	460f      	mov	r7, r1
 8004e96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e9a:	f7fb fb51 	bl	8000540 <__aeabi_dmul>
 8004e9e:	4632      	mov	r2, r6
 8004ea0:	463b      	mov	r3, r7
 8004ea2:	f7fb f995 	bl	80001d0 <__aeabi_dsub>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	460b      	mov	r3, r1
 8004eaa:	4606      	mov	r6, r0
 8004eac:	460f      	mov	r7, r1
 8004eae:	4640      	mov	r0, r8
 8004eb0:	4649      	mov	r1, r9
 8004eb2:	f7fb f98d 	bl	80001d0 <__aeabi_dsub>
 8004eb6:	9a05      	ldr	r2, [sp, #20]
 8004eb8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	2b31      	cmp	r3, #49	@ 0x31
 8004ec0:	dc20      	bgt.n	8004f04 <__ieee754_rem_pio2+0x274>
 8004ec2:	e9c4 0100 	strd	r0, r1, [r4]
 8004ec6:	46c2      	mov	sl, r8
 8004ec8:	46cb      	mov	fp, r9
 8004eca:	e9d4 8900 	ldrd	r8, r9, [r4]
 8004ece:	4650      	mov	r0, sl
 8004ed0:	4642      	mov	r2, r8
 8004ed2:	464b      	mov	r3, r9
 8004ed4:	4659      	mov	r1, fp
 8004ed6:	f7fb f97b 	bl	80001d0 <__aeabi_dsub>
 8004eda:	463b      	mov	r3, r7
 8004edc:	4632      	mov	r2, r6
 8004ede:	f7fb f977 	bl	80001d0 <__aeabi_dsub>
 8004ee2:	9b04      	ldr	r3, [sp, #16]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004eea:	f6bf af0e 	bge.w	8004d0a <__ieee754_rem_pio2+0x7a>
 8004eee:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8004ef2:	6063      	str	r3, [r4, #4]
 8004ef4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004ef8:	f8c4 8000 	str.w	r8, [r4]
 8004efc:	60a0      	str	r0, [r4, #8]
 8004efe:	60e3      	str	r3, [r4, #12]
 8004f00:	426d      	negs	r5, r5
 8004f02:	e702      	b.n	8004d0a <__ieee754_rem_pio2+0x7a>
 8004f04:	a326      	add	r3, pc, #152	@ (adr r3, 8004fa0 <__ieee754_rem_pio2+0x310>)
 8004f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f0e:	f7fb fb17 	bl	8000540 <__aeabi_dmul>
 8004f12:	4606      	mov	r6, r0
 8004f14:	460f      	mov	r7, r1
 8004f16:	4602      	mov	r2, r0
 8004f18:	460b      	mov	r3, r1
 8004f1a:	4640      	mov	r0, r8
 8004f1c:	4649      	mov	r1, r9
 8004f1e:	f7fb f957 	bl	80001d0 <__aeabi_dsub>
 8004f22:	4602      	mov	r2, r0
 8004f24:	460b      	mov	r3, r1
 8004f26:	4682      	mov	sl, r0
 8004f28:	468b      	mov	fp, r1
 8004f2a:	4640      	mov	r0, r8
 8004f2c:	4649      	mov	r1, r9
 8004f2e:	f7fb f94f 	bl	80001d0 <__aeabi_dsub>
 8004f32:	4632      	mov	r2, r6
 8004f34:	463b      	mov	r3, r7
 8004f36:	f7fb f94b 	bl	80001d0 <__aeabi_dsub>
 8004f3a:	a31b      	add	r3, pc, #108	@ (adr r3, 8004fa8 <__ieee754_rem_pio2+0x318>)
 8004f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f40:	4606      	mov	r6, r0
 8004f42:	460f      	mov	r7, r1
 8004f44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f48:	f7fb fafa 	bl	8000540 <__aeabi_dmul>
 8004f4c:	4632      	mov	r2, r6
 8004f4e:	463b      	mov	r3, r7
 8004f50:	f7fb f93e 	bl	80001d0 <__aeabi_dsub>
 8004f54:	4606      	mov	r6, r0
 8004f56:	460f      	mov	r7, r1
 8004f58:	e764      	b.n	8004e24 <__ieee754_rem_pio2+0x194>
 8004f5a:	4b1b      	ldr	r3, [pc, #108]	@ (8004fc8 <__ieee754_rem_pio2+0x338>)
 8004f5c:	4598      	cmp	r8, r3
 8004f5e:	d935      	bls.n	8004fcc <__ieee754_rem_pio2+0x33c>
 8004f60:	4632      	mov	r2, r6
 8004f62:	463b      	mov	r3, r7
 8004f64:	4630      	mov	r0, r6
 8004f66:	4639      	mov	r1, r7
 8004f68:	f7fb f932 	bl	80001d0 <__aeabi_dsub>
 8004f6c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004f70:	e9c4 0100 	strd	r0, r1, [r4]
 8004f74:	e69e      	b.n	8004cb4 <__ieee754_rem_pio2+0x24>
 8004f76:	bf00      	nop
 8004f78:	54400000 	.word	0x54400000
 8004f7c:	3ff921fb 	.word	0x3ff921fb
 8004f80:	1a626331 	.word	0x1a626331
 8004f84:	3dd0b461 	.word	0x3dd0b461
 8004f88:	1a600000 	.word	0x1a600000
 8004f8c:	3dd0b461 	.word	0x3dd0b461
 8004f90:	2e037073 	.word	0x2e037073
 8004f94:	3ba3198a 	.word	0x3ba3198a
 8004f98:	6dc9c883 	.word	0x6dc9c883
 8004f9c:	3fe45f30 	.word	0x3fe45f30
 8004fa0:	2e000000 	.word	0x2e000000
 8004fa4:	3ba3198a 	.word	0x3ba3198a
 8004fa8:	252049c1 	.word	0x252049c1
 8004fac:	397b839a 	.word	0x397b839a
 8004fb0:	3fe921fb 	.word	0x3fe921fb
 8004fb4:	4002d97b 	.word	0x4002d97b
 8004fb8:	3ff921fb 	.word	0x3ff921fb
 8004fbc:	413921fb 	.word	0x413921fb
 8004fc0:	3fe00000 	.word	0x3fe00000
 8004fc4:	0800597c 	.word	0x0800597c
 8004fc8:	7fefffff 	.word	0x7fefffff
 8004fcc:	ea4f 5528 	mov.w	r5, r8, asr #20
 8004fd0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8004fd4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8004fd8:	4630      	mov	r0, r6
 8004fda:	460f      	mov	r7, r1
 8004fdc:	f7fb fd60 	bl	8000aa0 <__aeabi_d2iz>
 8004fe0:	f7fb fa44 	bl	800046c <__aeabi_i2d>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	460b      	mov	r3, r1
 8004fe8:	4630      	mov	r0, r6
 8004fea:	4639      	mov	r1, r7
 8004fec:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004ff0:	f7fb f8ee 	bl	80001d0 <__aeabi_dsub>
 8004ff4:	4b22      	ldr	r3, [pc, #136]	@ (8005080 <__ieee754_rem_pio2+0x3f0>)
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f7fb faa2 	bl	8000540 <__aeabi_dmul>
 8004ffc:	460f      	mov	r7, r1
 8004ffe:	4606      	mov	r6, r0
 8005000:	f7fb fd4e 	bl	8000aa0 <__aeabi_d2iz>
 8005004:	f7fb fa32 	bl	800046c <__aeabi_i2d>
 8005008:	4602      	mov	r2, r0
 800500a:	460b      	mov	r3, r1
 800500c:	4630      	mov	r0, r6
 800500e:	4639      	mov	r1, r7
 8005010:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005014:	f7fb f8dc 	bl	80001d0 <__aeabi_dsub>
 8005018:	4b19      	ldr	r3, [pc, #100]	@ (8005080 <__ieee754_rem_pio2+0x3f0>)
 800501a:	2200      	movs	r2, #0
 800501c:	f7fb fa90 	bl	8000540 <__aeabi_dmul>
 8005020:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8005024:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8005028:	f04f 0803 	mov.w	r8, #3
 800502c:	2600      	movs	r6, #0
 800502e:	2700      	movs	r7, #0
 8005030:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8005034:	4632      	mov	r2, r6
 8005036:	463b      	mov	r3, r7
 8005038:	46c2      	mov	sl, r8
 800503a:	f108 38ff 	add.w	r8, r8, #4294967295
 800503e:	f7fb fce7 	bl	8000a10 <__aeabi_dcmpeq>
 8005042:	2800      	cmp	r0, #0
 8005044:	d1f4      	bne.n	8005030 <__ieee754_rem_pio2+0x3a0>
 8005046:	4b0f      	ldr	r3, [pc, #60]	@ (8005084 <__ieee754_rem_pio2+0x3f4>)
 8005048:	9301      	str	r3, [sp, #4]
 800504a:	2302      	movs	r3, #2
 800504c:	9300      	str	r3, [sp, #0]
 800504e:	462a      	mov	r2, r5
 8005050:	4653      	mov	r3, sl
 8005052:	4621      	mov	r1, r4
 8005054:	a806      	add	r0, sp, #24
 8005056:	f000 f817 	bl	8005088 <__kernel_rem_pio2>
 800505a:	9b04      	ldr	r3, [sp, #16]
 800505c:	2b00      	cmp	r3, #0
 800505e:	4605      	mov	r5, r0
 8005060:	f6bf ae53 	bge.w	8004d0a <__ieee754_rem_pio2+0x7a>
 8005064:	e9d4 2100 	ldrd	r2, r1, [r4]
 8005068:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800506c:	e9c4 2300 	strd	r2, r3, [r4]
 8005070:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8005074:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005078:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800507c:	e740      	b.n	8004f00 <__ieee754_rem_pio2+0x270>
 800507e:	bf00      	nop
 8005080:	41700000 	.word	0x41700000
 8005084:	080059fc 	.word	0x080059fc

08005088 <__kernel_rem_pio2>:
 8005088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800508c:	ed2d 8b02 	vpush	{d8}
 8005090:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8005094:	f112 0f14 	cmn.w	r2, #20
 8005098:	9306      	str	r3, [sp, #24]
 800509a:	9104      	str	r1, [sp, #16]
 800509c:	4bbe      	ldr	r3, [pc, #760]	@ (8005398 <__kernel_rem_pio2+0x310>)
 800509e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 80050a0:	9008      	str	r0, [sp, #32]
 80050a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80050a6:	9300      	str	r3, [sp, #0]
 80050a8:	9b06      	ldr	r3, [sp, #24]
 80050aa:	f103 33ff 	add.w	r3, r3, #4294967295
 80050ae:	bfa8      	it	ge
 80050b0:	1ed4      	subge	r4, r2, #3
 80050b2:	9305      	str	r3, [sp, #20]
 80050b4:	bfb2      	itee	lt
 80050b6:	2400      	movlt	r4, #0
 80050b8:	2318      	movge	r3, #24
 80050ba:	fb94 f4f3 	sdivge	r4, r4, r3
 80050be:	f06f 0317 	mvn.w	r3, #23
 80050c2:	fb04 3303 	mla	r3, r4, r3, r3
 80050c6:	eb03 0b02 	add.w	fp, r3, r2
 80050ca:	9b00      	ldr	r3, [sp, #0]
 80050cc:	9a05      	ldr	r2, [sp, #20]
 80050ce:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8005388 <__kernel_rem_pio2+0x300>
 80050d2:	eb03 0802 	add.w	r8, r3, r2
 80050d6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80050d8:	1aa7      	subs	r7, r4, r2
 80050da:	ae20      	add	r6, sp, #128	@ 0x80
 80050dc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80050e0:	2500      	movs	r5, #0
 80050e2:	4545      	cmp	r5, r8
 80050e4:	dd13      	ble.n	800510e <__kernel_rem_pio2+0x86>
 80050e6:	9b06      	ldr	r3, [sp, #24]
 80050e8:	aa20      	add	r2, sp, #128	@ 0x80
 80050ea:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80050ee:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 80050f2:	f04f 0800 	mov.w	r8, #0
 80050f6:	9b00      	ldr	r3, [sp, #0]
 80050f8:	4598      	cmp	r8, r3
 80050fa:	dc31      	bgt.n	8005160 <__kernel_rem_pio2+0xd8>
 80050fc:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8005388 <__kernel_rem_pio2+0x300>
 8005100:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005104:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005108:	462f      	mov	r7, r5
 800510a:	2600      	movs	r6, #0
 800510c:	e01b      	b.n	8005146 <__kernel_rem_pio2+0xbe>
 800510e:	42ef      	cmn	r7, r5
 8005110:	d407      	bmi.n	8005122 <__kernel_rem_pio2+0x9a>
 8005112:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005116:	f7fb f9a9 	bl	800046c <__aeabi_i2d>
 800511a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800511e:	3501      	adds	r5, #1
 8005120:	e7df      	b.n	80050e2 <__kernel_rem_pio2+0x5a>
 8005122:	ec51 0b18 	vmov	r0, r1, d8
 8005126:	e7f8      	b.n	800511a <__kernel_rem_pio2+0x92>
 8005128:	e9d7 2300 	ldrd	r2, r3, [r7]
 800512c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8005130:	f7fb fa06 	bl	8000540 <__aeabi_dmul>
 8005134:	4602      	mov	r2, r0
 8005136:	460b      	mov	r3, r1
 8005138:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800513c:	f7fb f84a 	bl	80001d4 <__adddf3>
 8005140:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005144:	3601      	adds	r6, #1
 8005146:	9b05      	ldr	r3, [sp, #20]
 8005148:	429e      	cmp	r6, r3
 800514a:	f1a7 0708 	sub.w	r7, r7, #8
 800514e:	ddeb      	ble.n	8005128 <__kernel_rem_pio2+0xa0>
 8005150:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005154:	f108 0801 	add.w	r8, r8, #1
 8005158:	ecaa 7b02 	vstmia	sl!, {d7}
 800515c:	3508      	adds	r5, #8
 800515e:	e7ca      	b.n	80050f6 <__kernel_rem_pio2+0x6e>
 8005160:	9b00      	ldr	r3, [sp, #0]
 8005162:	f8dd 8000 	ldr.w	r8, [sp]
 8005166:	aa0c      	add	r2, sp, #48	@ 0x30
 8005168:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800516c:	930a      	str	r3, [sp, #40]	@ 0x28
 800516e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8005170:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005174:	9309      	str	r3, [sp, #36]	@ 0x24
 8005176:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800517a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800517c:	ab98      	add	r3, sp, #608	@ 0x260
 800517e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005182:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8005186:	ed8d 7b02 	vstr	d7, [sp, #8]
 800518a:	ac0c      	add	r4, sp, #48	@ 0x30
 800518c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800518e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8005192:	46a1      	mov	r9, r4
 8005194:	46c2      	mov	sl, r8
 8005196:	f1ba 0f00 	cmp.w	sl, #0
 800519a:	f1a5 0508 	sub.w	r5, r5, #8
 800519e:	dc77      	bgt.n	8005290 <__kernel_rem_pio2+0x208>
 80051a0:	4658      	mov	r0, fp
 80051a2:	ed9d 0b02 	vldr	d0, [sp, #8]
 80051a6:	f000 fac7 	bl	8005738 <scalbn>
 80051aa:	ec57 6b10 	vmov	r6, r7, d0
 80051ae:	2200      	movs	r2, #0
 80051b0:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80051b4:	4630      	mov	r0, r6
 80051b6:	4639      	mov	r1, r7
 80051b8:	f7fb f9c2 	bl	8000540 <__aeabi_dmul>
 80051bc:	ec41 0b10 	vmov	d0, r0, r1
 80051c0:	f000 fb3a 	bl	8005838 <floor>
 80051c4:	4b75      	ldr	r3, [pc, #468]	@ (800539c <__kernel_rem_pio2+0x314>)
 80051c6:	ec51 0b10 	vmov	r0, r1, d0
 80051ca:	2200      	movs	r2, #0
 80051cc:	f7fb f9b8 	bl	8000540 <__aeabi_dmul>
 80051d0:	4602      	mov	r2, r0
 80051d2:	460b      	mov	r3, r1
 80051d4:	4630      	mov	r0, r6
 80051d6:	4639      	mov	r1, r7
 80051d8:	f7fa fffa 	bl	80001d0 <__aeabi_dsub>
 80051dc:	460f      	mov	r7, r1
 80051de:	4606      	mov	r6, r0
 80051e0:	f7fb fc5e 	bl	8000aa0 <__aeabi_d2iz>
 80051e4:	9002      	str	r0, [sp, #8]
 80051e6:	f7fb f941 	bl	800046c <__aeabi_i2d>
 80051ea:	4602      	mov	r2, r0
 80051ec:	460b      	mov	r3, r1
 80051ee:	4630      	mov	r0, r6
 80051f0:	4639      	mov	r1, r7
 80051f2:	f7fa ffed 	bl	80001d0 <__aeabi_dsub>
 80051f6:	f1bb 0f00 	cmp.w	fp, #0
 80051fa:	4606      	mov	r6, r0
 80051fc:	460f      	mov	r7, r1
 80051fe:	dd6c      	ble.n	80052da <__kernel_rem_pio2+0x252>
 8005200:	f108 31ff 	add.w	r1, r8, #4294967295
 8005204:	ab0c      	add	r3, sp, #48	@ 0x30
 8005206:	9d02      	ldr	r5, [sp, #8]
 8005208:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800520c:	f1cb 0018 	rsb	r0, fp, #24
 8005210:	fa43 f200 	asr.w	r2, r3, r0
 8005214:	4415      	add	r5, r2
 8005216:	4082      	lsls	r2, r0
 8005218:	1a9b      	subs	r3, r3, r2
 800521a:	aa0c      	add	r2, sp, #48	@ 0x30
 800521c:	9502      	str	r5, [sp, #8]
 800521e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8005222:	f1cb 0217 	rsb	r2, fp, #23
 8005226:	fa43 f902 	asr.w	r9, r3, r2
 800522a:	f1b9 0f00 	cmp.w	r9, #0
 800522e:	dd64      	ble.n	80052fa <__kernel_rem_pio2+0x272>
 8005230:	9b02      	ldr	r3, [sp, #8]
 8005232:	2200      	movs	r2, #0
 8005234:	3301      	adds	r3, #1
 8005236:	9302      	str	r3, [sp, #8]
 8005238:	4615      	mov	r5, r2
 800523a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800523e:	4590      	cmp	r8, r2
 8005240:	f300 80b8 	bgt.w	80053b4 <__kernel_rem_pio2+0x32c>
 8005244:	f1bb 0f00 	cmp.w	fp, #0
 8005248:	dd07      	ble.n	800525a <__kernel_rem_pio2+0x1d2>
 800524a:	f1bb 0f01 	cmp.w	fp, #1
 800524e:	f000 80bf 	beq.w	80053d0 <__kernel_rem_pio2+0x348>
 8005252:	f1bb 0f02 	cmp.w	fp, #2
 8005256:	f000 80c6 	beq.w	80053e6 <__kernel_rem_pio2+0x35e>
 800525a:	f1b9 0f02 	cmp.w	r9, #2
 800525e:	d14c      	bne.n	80052fa <__kernel_rem_pio2+0x272>
 8005260:	4632      	mov	r2, r6
 8005262:	463b      	mov	r3, r7
 8005264:	494e      	ldr	r1, [pc, #312]	@ (80053a0 <__kernel_rem_pio2+0x318>)
 8005266:	2000      	movs	r0, #0
 8005268:	f7fa ffb2 	bl	80001d0 <__aeabi_dsub>
 800526c:	4606      	mov	r6, r0
 800526e:	460f      	mov	r7, r1
 8005270:	2d00      	cmp	r5, #0
 8005272:	d042      	beq.n	80052fa <__kernel_rem_pio2+0x272>
 8005274:	4658      	mov	r0, fp
 8005276:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8005390 <__kernel_rem_pio2+0x308>
 800527a:	f000 fa5d 	bl	8005738 <scalbn>
 800527e:	4630      	mov	r0, r6
 8005280:	4639      	mov	r1, r7
 8005282:	ec53 2b10 	vmov	r2, r3, d0
 8005286:	f7fa ffa3 	bl	80001d0 <__aeabi_dsub>
 800528a:	4606      	mov	r6, r0
 800528c:	460f      	mov	r7, r1
 800528e:	e034      	b.n	80052fa <__kernel_rem_pio2+0x272>
 8005290:	4b44      	ldr	r3, [pc, #272]	@ (80053a4 <__kernel_rem_pio2+0x31c>)
 8005292:	2200      	movs	r2, #0
 8005294:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005298:	f7fb f952 	bl	8000540 <__aeabi_dmul>
 800529c:	f7fb fc00 	bl	8000aa0 <__aeabi_d2iz>
 80052a0:	f7fb f8e4 	bl	800046c <__aeabi_i2d>
 80052a4:	4b40      	ldr	r3, [pc, #256]	@ (80053a8 <__kernel_rem_pio2+0x320>)
 80052a6:	2200      	movs	r2, #0
 80052a8:	4606      	mov	r6, r0
 80052aa:	460f      	mov	r7, r1
 80052ac:	f7fb f948 	bl	8000540 <__aeabi_dmul>
 80052b0:	4602      	mov	r2, r0
 80052b2:	460b      	mov	r3, r1
 80052b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052b8:	f7fa ff8a 	bl	80001d0 <__aeabi_dsub>
 80052bc:	f7fb fbf0 	bl	8000aa0 <__aeabi_d2iz>
 80052c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80052c4:	f849 0b04 	str.w	r0, [r9], #4
 80052c8:	4639      	mov	r1, r7
 80052ca:	4630      	mov	r0, r6
 80052cc:	f7fa ff82 	bl	80001d4 <__adddf3>
 80052d0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80052d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052d8:	e75d      	b.n	8005196 <__kernel_rem_pio2+0x10e>
 80052da:	d107      	bne.n	80052ec <__kernel_rem_pio2+0x264>
 80052dc:	f108 33ff 	add.w	r3, r8, #4294967295
 80052e0:	aa0c      	add	r2, sp, #48	@ 0x30
 80052e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052e6:	ea4f 59e3 	mov.w	r9, r3, asr #23
 80052ea:	e79e      	b.n	800522a <__kernel_rem_pio2+0x1a2>
 80052ec:	4b2f      	ldr	r3, [pc, #188]	@ (80053ac <__kernel_rem_pio2+0x324>)
 80052ee:	2200      	movs	r2, #0
 80052f0:	f7fb fbac 	bl	8000a4c <__aeabi_dcmpge>
 80052f4:	2800      	cmp	r0, #0
 80052f6:	d143      	bne.n	8005380 <__kernel_rem_pio2+0x2f8>
 80052f8:	4681      	mov	r9, r0
 80052fa:	2200      	movs	r2, #0
 80052fc:	2300      	movs	r3, #0
 80052fe:	4630      	mov	r0, r6
 8005300:	4639      	mov	r1, r7
 8005302:	f7fb fb85 	bl	8000a10 <__aeabi_dcmpeq>
 8005306:	2800      	cmp	r0, #0
 8005308:	f000 80bf 	beq.w	800548a <__kernel_rem_pio2+0x402>
 800530c:	f108 33ff 	add.w	r3, r8, #4294967295
 8005310:	2200      	movs	r2, #0
 8005312:	9900      	ldr	r1, [sp, #0]
 8005314:	428b      	cmp	r3, r1
 8005316:	da6e      	bge.n	80053f6 <__kernel_rem_pio2+0x36e>
 8005318:	2a00      	cmp	r2, #0
 800531a:	f000 8089 	beq.w	8005430 <__kernel_rem_pio2+0x3a8>
 800531e:	f108 38ff 	add.w	r8, r8, #4294967295
 8005322:	ab0c      	add	r3, sp, #48	@ 0x30
 8005324:	f1ab 0b18 	sub.w	fp, fp, #24
 8005328:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d0f6      	beq.n	800531e <__kernel_rem_pio2+0x296>
 8005330:	4658      	mov	r0, fp
 8005332:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8005390 <__kernel_rem_pio2+0x308>
 8005336:	f000 f9ff 	bl	8005738 <scalbn>
 800533a:	f108 0301 	add.w	r3, r8, #1
 800533e:	00da      	lsls	r2, r3, #3
 8005340:	9205      	str	r2, [sp, #20]
 8005342:	ec55 4b10 	vmov	r4, r5, d0
 8005346:	aa70      	add	r2, sp, #448	@ 0x1c0
 8005348:	f8df b058 	ldr.w	fp, [pc, #88]	@ 80053a4 <__kernel_rem_pio2+0x31c>
 800534c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8005350:	4646      	mov	r6, r8
 8005352:	f04f 0a00 	mov.w	sl, #0
 8005356:	2e00      	cmp	r6, #0
 8005358:	f280 80cf 	bge.w	80054fa <__kernel_rem_pio2+0x472>
 800535c:	4644      	mov	r4, r8
 800535e:	2c00      	cmp	r4, #0
 8005360:	f2c0 80fd 	blt.w	800555e <__kernel_rem_pio2+0x4d6>
 8005364:	4b12      	ldr	r3, [pc, #72]	@ (80053b0 <__kernel_rem_pio2+0x328>)
 8005366:	461f      	mov	r7, r3
 8005368:	ab70      	add	r3, sp, #448	@ 0x1c0
 800536a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800536e:	9306      	str	r3, [sp, #24]
 8005370:	f04f 0a00 	mov.w	sl, #0
 8005374:	f04f 0b00 	mov.w	fp, #0
 8005378:	2600      	movs	r6, #0
 800537a:	eba8 0504 	sub.w	r5, r8, r4
 800537e:	e0e2      	b.n	8005546 <__kernel_rem_pio2+0x4be>
 8005380:	f04f 0902 	mov.w	r9, #2
 8005384:	e754      	b.n	8005230 <__kernel_rem_pio2+0x1a8>
 8005386:	bf00      	nop
	...
 8005394:	3ff00000 	.word	0x3ff00000
 8005398:	08005b48 	.word	0x08005b48
 800539c:	40200000 	.word	0x40200000
 80053a0:	3ff00000 	.word	0x3ff00000
 80053a4:	3e700000 	.word	0x3e700000
 80053a8:	41700000 	.word	0x41700000
 80053ac:	3fe00000 	.word	0x3fe00000
 80053b0:	08005b08 	.word	0x08005b08
 80053b4:	f854 3b04 	ldr.w	r3, [r4], #4
 80053b8:	b945      	cbnz	r5, 80053cc <__kernel_rem_pio2+0x344>
 80053ba:	b123      	cbz	r3, 80053c6 <__kernel_rem_pio2+0x33e>
 80053bc:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 80053c0:	f844 3c04 	str.w	r3, [r4, #-4]
 80053c4:	2301      	movs	r3, #1
 80053c6:	3201      	adds	r2, #1
 80053c8:	461d      	mov	r5, r3
 80053ca:	e738      	b.n	800523e <__kernel_rem_pio2+0x1b6>
 80053cc:	1acb      	subs	r3, r1, r3
 80053ce:	e7f7      	b.n	80053c0 <__kernel_rem_pio2+0x338>
 80053d0:	f108 32ff 	add.w	r2, r8, #4294967295
 80053d4:	ab0c      	add	r3, sp, #48	@ 0x30
 80053d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053da:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80053de:	a90c      	add	r1, sp, #48	@ 0x30
 80053e0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80053e4:	e739      	b.n	800525a <__kernel_rem_pio2+0x1d2>
 80053e6:	f108 32ff 	add.w	r2, r8, #4294967295
 80053ea:	ab0c      	add	r3, sp, #48	@ 0x30
 80053ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053f0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80053f4:	e7f3      	b.n	80053de <__kernel_rem_pio2+0x356>
 80053f6:	a90c      	add	r1, sp, #48	@ 0x30
 80053f8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80053fc:	3b01      	subs	r3, #1
 80053fe:	430a      	orrs	r2, r1
 8005400:	e787      	b.n	8005312 <__kernel_rem_pio2+0x28a>
 8005402:	3401      	adds	r4, #1
 8005404:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005408:	2a00      	cmp	r2, #0
 800540a:	d0fa      	beq.n	8005402 <__kernel_rem_pio2+0x37a>
 800540c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800540e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005412:	eb0d 0503 	add.w	r5, sp, r3
 8005416:	9b06      	ldr	r3, [sp, #24]
 8005418:	aa20      	add	r2, sp, #128	@ 0x80
 800541a:	4443      	add	r3, r8
 800541c:	f108 0701 	add.w	r7, r8, #1
 8005420:	3d98      	subs	r5, #152	@ 0x98
 8005422:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8005426:	4444      	add	r4, r8
 8005428:	42bc      	cmp	r4, r7
 800542a:	da04      	bge.n	8005436 <__kernel_rem_pio2+0x3ae>
 800542c:	46a0      	mov	r8, r4
 800542e:	e6a2      	b.n	8005176 <__kernel_rem_pio2+0xee>
 8005430:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005432:	2401      	movs	r4, #1
 8005434:	e7e6      	b.n	8005404 <__kernel_rem_pio2+0x37c>
 8005436:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005438:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800543c:	f7fb f816 	bl	800046c <__aeabi_i2d>
 8005440:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8005708 <__kernel_rem_pio2+0x680>
 8005444:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005448:	ed8d 7b02 	vstr	d7, [sp, #8]
 800544c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005450:	46b2      	mov	sl, r6
 8005452:	f04f 0800 	mov.w	r8, #0
 8005456:	9b05      	ldr	r3, [sp, #20]
 8005458:	4598      	cmp	r8, r3
 800545a:	dd05      	ble.n	8005468 <__kernel_rem_pio2+0x3e0>
 800545c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005460:	3701      	adds	r7, #1
 8005462:	eca5 7b02 	vstmia	r5!, {d7}
 8005466:	e7df      	b.n	8005428 <__kernel_rem_pio2+0x3a0>
 8005468:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800546c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8005470:	f7fb f866 	bl	8000540 <__aeabi_dmul>
 8005474:	4602      	mov	r2, r0
 8005476:	460b      	mov	r3, r1
 8005478:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800547c:	f7fa feaa 	bl	80001d4 <__adddf3>
 8005480:	f108 0801 	add.w	r8, r8, #1
 8005484:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005488:	e7e5      	b.n	8005456 <__kernel_rem_pio2+0x3ce>
 800548a:	f1cb 0000 	rsb	r0, fp, #0
 800548e:	ec47 6b10 	vmov	d0, r6, r7
 8005492:	f000 f951 	bl	8005738 <scalbn>
 8005496:	ec55 4b10 	vmov	r4, r5, d0
 800549a:	4b9d      	ldr	r3, [pc, #628]	@ (8005710 <__kernel_rem_pio2+0x688>)
 800549c:	2200      	movs	r2, #0
 800549e:	4620      	mov	r0, r4
 80054a0:	4629      	mov	r1, r5
 80054a2:	f7fb fad3 	bl	8000a4c <__aeabi_dcmpge>
 80054a6:	b300      	cbz	r0, 80054ea <__kernel_rem_pio2+0x462>
 80054a8:	4b9a      	ldr	r3, [pc, #616]	@ (8005714 <__kernel_rem_pio2+0x68c>)
 80054aa:	2200      	movs	r2, #0
 80054ac:	4620      	mov	r0, r4
 80054ae:	4629      	mov	r1, r5
 80054b0:	f7fb f846 	bl	8000540 <__aeabi_dmul>
 80054b4:	f7fb faf4 	bl	8000aa0 <__aeabi_d2iz>
 80054b8:	4606      	mov	r6, r0
 80054ba:	f7fa ffd7 	bl	800046c <__aeabi_i2d>
 80054be:	4b94      	ldr	r3, [pc, #592]	@ (8005710 <__kernel_rem_pio2+0x688>)
 80054c0:	2200      	movs	r2, #0
 80054c2:	f7fb f83d 	bl	8000540 <__aeabi_dmul>
 80054c6:	460b      	mov	r3, r1
 80054c8:	4602      	mov	r2, r0
 80054ca:	4629      	mov	r1, r5
 80054cc:	4620      	mov	r0, r4
 80054ce:	f7fa fe7f 	bl	80001d0 <__aeabi_dsub>
 80054d2:	f7fb fae5 	bl	8000aa0 <__aeabi_d2iz>
 80054d6:	ab0c      	add	r3, sp, #48	@ 0x30
 80054d8:	f10b 0b18 	add.w	fp, fp, #24
 80054dc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80054e0:	f108 0801 	add.w	r8, r8, #1
 80054e4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 80054e8:	e722      	b.n	8005330 <__kernel_rem_pio2+0x2a8>
 80054ea:	4620      	mov	r0, r4
 80054ec:	4629      	mov	r1, r5
 80054ee:	f7fb fad7 	bl	8000aa0 <__aeabi_d2iz>
 80054f2:	ab0c      	add	r3, sp, #48	@ 0x30
 80054f4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80054f8:	e71a      	b.n	8005330 <__kernel_rem_pio2+0x2a8>
 80054fa:	ab0c      	add	r3, sp, #48	@ 0x30
 80054fc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005500:	f7fa ffb4 	bl	800046c <__aeabi_i2d>
 8005504:	4622      	mov	r2, r4
 8005506:	462b      	mov	r3, r5
 8005508:	f7fb f81a 	bl	8000540 <__aeabi_dmul>
 800550c:	4652      	mov	r2, sl
 800550e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8005512:	465b      	mov	r3, fp
 8005514:	4620      	mov	r0, r4
 8005516:	4629      	mov	r1, r5
 8005518:	f7fb f812 	bl	8000540 <__aeabi_dmul>
 800551c:	3e01      	subs	r6, #1
 800551e:	4604      	mov	r4, r0
 8005520:	460d      	mov	r5, r1
 8005522:	e718      	b.n	8005356 <__kernel_rem_pio2+0x2ce>
 8005524:	9906      	ldr	r1, [sp, #24]
 8005526:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800552a:	9106      	str	r1, [sp, #24]
 800552c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8005530:	f7fb f806 	bl	8000540 <__aeabi_dmul>
 8005534:	4602      	mov	r2, r0
 8005536:	460b      	mov	r3, r1
 8005538:	4650      	mov	r0, sl
 800553a:	4659      	mov	r1, fp
 800553c:	f7fa fe4a 	bl	80001d4 <__adddf3>
 8005540:	3601      	adds	r6, #1
 8005542:	4682      	mov	sl, r0
 8005544:	468b      	mov	fp, r1
 8005546:	9b00      	ldr	r3, [sp, #0]
 8005548:	429e      	cmp	r6, r3
 800554a:	dc01      	bgt.n	8005550 <__kernel_rem_pio2+0x4c8>
 800554c:	42b5      	cmp	r5, r6
 800554e:	dae9      	bge.n	8005524 <__kernel_rem_pio2+0x49c>
 8005550:	ab48      	add	r3, sp, #288	@ 0x120
 8005552:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005556:	e9c5 ab00 	strd	sl, fp, [r5]
 800555a:	3c01      	subs	r4, #1
 800555c:	e6ff      	b.n	800535e <__kernel_rem_pio2+0x2d6>
 800555e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8005560:	2b02      	cmp	r3, #2
 8005562:	dc0b      	bgt.n	800557c <__kernel_rem_pio2+0x4f4>
 8005564:	2b00      	cmp	r3, #0
 8005566:	dc39      	bgt.n	80055dc <__kernel_rem_pio2+0x554>
 8005568:	d05d      	beq.n	8005626 <__kernel_rem_pio2+0x59e>
 800556a:	9b02      	ldr	r3, [sp, #8]
 800556c:	f003 0007 	and.w	r0, r3, #7
 8005570:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8005574:	ecbd 8b02 	vpop	{d8}
 8005578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800557c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800557e:	2b03      	cmp	r3, #3
 8005580:	d1f3      	bne.n	800556a <__kernel_rem_pio2+0x4e2>
 8005582:	9b05      	ldr	r3, [sp, #20]
 8005584:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005588:	eb0d 0403 	add.w	r4, sp, r3
 800558c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8005590:	4625      	mov	r5, r4
 8005592:	46c2      	mov	sl, r8
 8005594:	f1ba 0f00 	cmp.w	sl, #0
 8005598:	f1a5 0508 	sub.w	r5, r5, #8
 800559c:	dc6b      	bgt.n	8005676 <__kernel_rem_pio2+0x5ee>
 800559e:	4645      	mov	r5, r8
 80055a0:	2d01      	cmp	r5, #1
 80055a2:	f1a4 0408 	sub.w	r4, r4, #8
 80055a6:	f300 8087 	bgt.w	80056b8 <__kernel_rem_pio2+0x630>
 80055aa:	9c05      	ldr	r4, [sp, #20]
 80055ac:	ab48      	add	r3, sp, #288	@ 0x120
 80055ae:	441c      	add	r4, r3
 80055b0:	2000      	movs	r0, #0
 80055b2:	2100      	movs	r1, #0
 80055b4:	f1b8 0f01 	cmp.w	r8, #1
 80055b8:	f300 809c 	bgt.w	80056f4 <__kernel_rem_pio2+0x66c>
 80055bc:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 80055c0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 80055c4:	f1b9 0f00 	cmp.w	r9, #0
 80055c8:	f040 80a6 	bne.w	8005718 <__kernel_rem_pio2+0x690>
 80055cc:	9b04      	ldr	r3, [sp, #16]
 80055ce:	e9c3 7800 	strd	r7, r8, [r3]
 80055d2:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80055d6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80055da:	e7c6      	b.n	800556a <__kernel_rem_pio2+0x4e2>
 80055dc:	9d05      	ldr	r5, [sp, #20]
 80055de:	ab48      	add	r3, sp, #288	@ 0x120
 80055e0:	441d      	add	r5, r3
 80055e2:	4644      	mov	r4, r8
 80055e4:	2000      	movs	r0, #0
 80055e6:	2100      	movs	r1, #0
 80055e8:	2c00      	cmp	r4, #0
 80055ea:	da35      	bge.n	8005658 <__kernel_rem_pio2+0x5d0>
 80055ec:	f1b9 0f00 	cmp.w	r9, #0
 80055f0:	d038      	beq.n	8005664 <__kernel_rem_pio2+0x5dc>
 80055f2:	4602      	mov	r2, r0
 80055f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80055f8:	9c04      	ldr	r4, [sp, #16]
 80055fa:	e9c4 2300 	strd	r2, r3, [r4]
 80055fe:	4602      	mov	r2, r0
 8005600:	460b      	mov	r3, r1
 8005602:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8005606:	f7fa fde3 	bl	80001d0 <__aeabi_dsub>
 800560a:	ad4a      	add	r5, sp, #296	@ 0x128
 800560c:	2401      	movs	r4, #1
 800560e:	45a0      	cmp	r8, r4
 8005610:	da2b      	bge.n	800566a <__kernel_rem_pio2+0x5e2>
 8005612:	f1b9 0f00 	cmp.w	r9, #0
 8005616:	d002      	beq.n	800561e <__kernel_rem_pio2+0x596>
 8005618:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800561c:	4619      	mov	r1, r3
 800561e:	9b04      	ldr	r3, [sp, #16]
 8005620:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005624:	e7a1      	b.n	800556a <__kernel_rem_pio2+0x4e2>
 8005626:	9c05      	ldr	r4, [sp, #20]
 8005628:	ab48      	add	r3, sp, #288	@ 0x120
 800562a:	441c      	add	r4, r3
 800562c:	2000      	movs	r0, #0
 800562e:	2100      	movs	r1, #0
 8005630:	f1b8 0f00 	cmp.w	r8, #0
 8005634:	da09      	bge.n	800564a <__kernel_rem_pio2+0x5c2>
 8005636:	f1b9 0f00 	cmp.w	r9, #0
 800563a:	d002      	beq.n	8005642 <__kernel_rem_pio2+0x5ba>
 800563c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005640:	4619      	mov	r1, r3
 8005642:	9b04      	ldr	r3, [sp, #16]
 8005644:	e9c3 0100 	strd	r0, r1, [r3]
 8005648:	e78f      	b.n	800556a <__kernel_rem_pio2+0x4e2>
 800564a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800564e:	f7fa fdc1 	bl	80001d4 <__adddf3>
 8005652:	f108 38ff 	add.w	r8, r8, #4294967295
 8005656:	e7eb      	b.n	8005630 <__kernel_rem_pio2+0x5a8>
 8005658:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800565c:	f7fa fdba 	bl	80001d4 <__adddf3>
 8005660:	3c01      	subs	r4, #1
 8005662:	e7c1      	b.n	80055e8 <__kernel_rem_pio2+0x560>
 8005664:	4602      	mov	r2, r0
 8005666:	460b      	mov	r3, r1
 8005668:	e7c6      	b.n	80055f8 <__kernel_rem_pio2+0x570>
 800566a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800566e:	f7fa fdb1 	bl	80001d4 <__adddf3>
 8005672:	3401      	adds	r4, #1
 8005674:	e7cb      	b.n	800560e <__kernel_rem_pio2+0x586>
 8005676:	ed95 7b00 	vldr	d7, [r5]
 800567a:	ed8d 7b00 	vstr	d7, [sp]
 800567e:	ed95 7b02 	vldr	d7, [r5, #8]
 8005682:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005686:	ec53 2b17 	vmov	r2, r3, d7
 800568a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800568e:	f7fa fda1 	bl	80001d4 <__adddf3>
 8005692:	4602      	mov	r2, r0
 8005694:	460b      	mov	r3, r1
 8005696:	4606      	mov	r6, r0
 8005698:	460f      	mov	r7, r1
 800569a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800569e:	f7fa fd97 	bl	80001d0 <__aeabi_dsub>
 80056a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80056a6:	f7fa fd95 	bl	80001d4 <__adddf3>
 80056aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80056ae:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80056b2:	e9c5 6700 	strd	r6, r7, [r5]
 80056b6:	e76d      	b.n	8005594 <__kernel_rem_pio2+0x50c>
 80056b8:	ed94 7b00 	vldr	d7, [r4]
 80056bc:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 80056c0:	ec51 0b17 	vmov	r0, r1, d7
 80056c4:	4652      	mov	r2, sl
 80056c6:	465b      	mov	r3, fp
 80056c8:	ed8d 7b00 	vstr	d7, [sp]
 80056cc:	f7fa fd82 	bl	80001d4 <__adddf3>
 80056d0:	4602      	mov	r2, r0
 80056d2:	460b      	mov	r3, r1
 80056d4:	4606      	mov	r6, r0
 80056d6:	460f      	mov	r7, r1
 80056d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80056dc:	f7fa fd78 	bl	80001d0 <__aeabi_dsub>
 80056e0:	4652      	mov	r2, sl
 80056e2:	465b      	mov	r3, fp
 80056e4:	f7fa fd76 	bl	80001d4 <__adddf3>
 80056e8:	3d01      	subs	r5, #1
 80056ea:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80056ee:	e9c4 6700 	strd	r6, r7, [r4]
 80056f2:	e755      	b.n	80055a0 <__kernel_rem_pio2+0x518>
 80056f4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80056f8:	f7fa fd6c 	bl	80001d4 <__adddf3>
 80056fc:	f108 38ff 	add.w	r8, r8, #4294967295
 8005700:	e758      	b.n	80055b4 <__kernel_rem_pio2+0x52c>
 8005702:	bf00      	nop
 8005704:	f3af 8000 	nop.w
	...
 8005710:	41700000 	.word	0x41700000
 8005714:	3e700000 	.word	0x3e700000
 8005718:	9b04      	ldr	r3, [sp, #16]
 800571a:	9a04      	ldr	r2, [sp, #16]
 800571c:	601f      	str	r7, [r3, #0]
 800571e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8005722:	605c      	str	r4, [r3, #4]
 8005724:	609d      	str	r5, [r3, #8]
 8005726:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800572a:	60d3      	str	r3, [r2, #12]
 800572c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005730:	6110      	str	r0, [r2, #16]
 8005732:	6153      	str	r3, [r2, #20]
 8005734:	e719      	b.n	800556a <__kernel_rem_pio2+0x4e2>
 8005736:	bf00      	nop

08005738 <scalbn>:
 8005738:	b570      	push	{r4, r5, r6, lr}
 800573a:	ec55 4b10 	vmov	r4, r5, d0
 800573e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8005742:	4606      	mov	r6, r0
 8005744:	462b      	mov	r3, r5
 8005746:	b991      	cbnz	r1, 800576e <scalbn+0x36>
 8005748:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800574c:	4323      	orrs	r3, r4
 800574e:	d03d      	beq.n	80057cc <scalbn+0x94>
 8005750:	4b35      	ldr	r3, [pc, #212]	@ (8005828 <scalbn+0xf0>)
 8005752:	4620      	mov	r0, r4
 8005754:	4629      	mov	r1, r5
 8005756:	2200      	movs	r2, #0
 8005758:	f7fa fef2 	bl	8000540 <__aeabi_dmul>
 800575c:	4b33      	ldr	r3, [pc, #204]	@ (800582c <scalbn+0xf4>)
 800575e:	429e      	cmp	r6, r3
 8005760:	4604      	mov	r4, r0
 8005762:	460d      	mov	r5, r1
 8005764:	da0f      	bge.n	8005786 <scalbn+0x4e>
 8005766:	a328      	add	r3, pc, #160	@ (adr r3, 8005808 <scalbn+0xd0>)
 8005768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800576c:	e01e      	b.n	80057ac <scalbn+0x74>
 800576e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8005772:	4291      	cmp	r1, r2
 8005774:	d10b      	bne.n	800578e <scalbn+0x56>
 8005776:	4622      	mov	r2, r4
 8005778:	4620      	mov	r0, r4
 800577a:	4629      	mov	r1, r5
 800577c:	f7fa fd2a 	bl	80001d4 <__adddf3>
 8005780:	4604      	mov	r4, r0
 8005782:	460d      	mov	r5, r1
 8005784:	e022      	b.n	80057cc <scalbn+0x94>
 8005786:	460b      	mov	r3, r1
 8005788:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800578c:	3936      	subs	r1, #54	@ 0x36
 800578e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8005792:	4296      	cmp	r6, r2
 8005794:	dd0d      	ble.n	80057b2 <scalbn+0x7a>
 8005796:	2d00      	cmp	r5, #0
 8005798:	a11d      	add	r1, pc, #116	@ (adr r1, 8005810 <scalbn+0xd8>)
 800579a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800579e:	da02      	bge.n	80057a6 <scalbn+0x6e>
 80057a0:	a11d      	add	r1, pc, #116	@ (adr r1, 8005818 <scalbn+0xe0>)
 80057a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80057a6:	a31a      	add	r3, pc, #104	@ (adr r3, 8005810 <scalbn+0xd8>)
 80057a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ac:	f7fa fec8 	bl	8000540 <__aeabi_dmul>
 80057b0:	e7e6      	b.n	8005780 <scalbn+0x48>
 80057b2:	1872      	adds	r2, r6, r1
 80057b4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80057b8:	428a      	cmp	r2, r1
 80057ba:	dcec      	bgt.n	8005796 <scalbn+0x5e>
 80057bc:	2a00      	cmp	r2, #0
 80057be:	dd08      	ble.n	80057d2 <scalbn+0x9a>
 80057c0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80057c4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80057c8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80057cc:	ec45 4b10 	vmov	d0, r4, r5
 80057d0:	bd70      	pop	{r4, r5, r6, pc}
 80057d2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80057d6:	da08      	bge.n	80057ea <scalbn+0xb2>
 80057d8:	2d00      	cmp	r5, #0
 80057da:	a10b      	add	r1, pc, #44	@ (adr r1, 8005808 <scalbn+0xd0>)
 80057dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80057e0:	dac1      	bge.n	8005766 <scalbn+0x2e>
 80057e2:	a10f      	add	r1, pc, #60	@ (adr r1, 8005820 <scalbn+0xe8>)
 80057e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80057e8:	e7bd      	b.n	8005766 <scalbn+0x2e>
 80057ea:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80057ee:	3236      	adds	r2, #54	@ 0x36
 80057f0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80057f4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80057f8:	4620      	mov	r0, r4
 80057fa:	4b0d      	ldr	r3, [pc, #52]	@ (8005830 <scalbn+0xf8>)
 80057fc:	4629      	mov	r1, r5
 80057fe:	2200      	movs	r2, #0
 8005800:	e7d4      	b.n	80057ac <scalbn+0x74>
 8005802:	bf00      	nop
 8005804:	f3af 8000 	nop.w
 8005808:	c2f8f359 	.word	0xc2f8f359
 800580c:	01a56e1f 	.word	0x01a56e1f
 8005810:	8800759c 	.word	0x8800759c
 8005814:	7e37e43c 	.word	0x7e37e43c
 8005818:	8800759c 	.word	0x8800759c
 800581c:	fe37e43c 	.word	0xfe37e43c
 8005820:	c2f8f359 	.word	0xc2f8f359
 8005824:	81a56e1f 	.word	0x81a56e1f
 8005828:	43500000 	.word	0x43500000
 800582c:	ffff3cb0 	.word	0xffff3cb0
 8005830:	3c900000 	.word	0x3c900000
 8005834:	00000000 	.word	0x00000000

08005838 <floor>:
 8005838:	ec51 0b10 	vmov	r0, r1, d0
 800583c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005844:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8005848:	2e13      	cmp	r6, #19
 800584a:	460c      	mov	r4, r1
 800584c:	4605      	mov	r5, r0
 800584e:	4680      	mov	r8, r0
 8005850:	dc34      	bgt.n	80058bc <floor+0x84>
 8005852:	2e00      	cmp	r6, #0
 8005854:	da17      	bge.n	8005886 <floor+0x4e>
 8005856:	a332      	add	r3, pc, #200	@ (adr r3, 8005920 <floor+0xe8>)
 8005858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800585c:	f7fa fcba 	bl	80001d4 <__adddf3>
 8005860:	2200      	movs	r2, #0
 8005862:	2300      	movs	r3, #0
 8005864:	f7fb f8fc 	bl	8000a60 <__aeabi_dcmpgt>
 8005868:	b150      	cbz	r0, 8005880 <floor+0x48>
 800586a:	2c00      	cmp	r4, #0
 800586c:	da55      	bge.n	800591a <floor+0xe2>
 800586e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8005872:	432c      	orrs	r4, r5
 8005874:	2500      	movs	r5, #0
 8005876:	42ac      	cmp	r4, r5
 8005878:	4c2b      	ldr	r4, [pc, #172]	@ (8005928 <floor+0xf0>)
 800587a:	bf08      	it	eq
 800587c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8005880:	4621      	mov	r1, r4
 8005882:	4628      	mov	r0, r5
 8005884:	e023      	b.n	80058ce <floor+0x96>
 8005886:	4f29      	ldr	r7, [pc, #164]	@ (800592c <floor+0xf4>)
 8005888:	4137      	asrs	r7, r6
 800588a:	ea01 0307 	and.w	r3, r1, r7
 800588e:	4303      	orrs	r3, r0
 8005890:	d01d      	beq.n	80058ce <floor+0x96>
 8005892:	a323      	add	r3, pc, #140	@ (adr r3, 8005920 <floor+0xe8>)
 8005894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005898:	f7fa fc9c 	bl	80001d4 <__adddf3>
 800589c:	2200      	movs	r2, #0
 800589e:	2300      	movs	r3, #0
 80058a0:	f7fb f8de 	bl	8000a60 <__aeabi_dcmpgt>
 80058a4:	2800      	cmp	r0, #0
 80058a6:	d0eb      	beq.n	8005880 <floor+0x48>
 80058a8:	2c00      	cmp	r4, #0
 80058aa:	bfbe      	ittt	lt
 80058ac:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80058b0:	4133      	asrlt	r3, r6
 80058b2:	18e4      	addlt	r4, r4, r3
 80058b4:	ea24 0407 	bic.w	r4, r4, r7
 80058b8:	2500      	movs	r5, #0
 80058ba:	e7e1      	b.n	8005880 <floor+0x48>
 80058bc:	2e33      	cmp	r6, #51	@ 0x33
 80058be:	dd0a      	ble.n	80058d6 <floor+0x9e>
 80058c0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80058c4:	d103      	bne.n	80058ce <floor+0x96>
 80058c6:	4602      	mov	r2, r0
 80058c8:	460b      	mov	r3, r1
 80058ca:	f7fa fc83 	bl	80001d4 <__adddf3>
 80058ce:	ec41 0b10 	vmov	d0, r0, r1
 80058d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058d6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80058da:	f04f 37ff 	mov.w	r7, #4294967295
 80058de:	40df      	lsrs	r7, r3
 80058e0:	4207      	tst	r7, r0
 80058e2:	d0f4      	beq.n	80058ce <floor+0x96>
 80058e4:	a30e      	add	r3, pc, #56	@ (adr r3, 8005920 <floor+0xe8>)
 80058e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ea:	f7fa fc73 	bl	80001d4 <__adddf3>
 80058ee:	2200      	movs	r2, #0
 80058f0:	2300      	movs	r3, #0
 80058f2:	f7fb f8b5 	bl	8000a60 <__aeabi_dcmpgt>
 80058f6:	2800      	cmp	r0, #0
 80058f8:	d0c2      	beq.n	8005880 <floor+0x48>
 80058fa:	2c00      	cmp	r4, #0
 80058fc:	da0a      	bge.n	8005914 <floor+0xdc>
 80058fe:	2e14      	cmp	r6, #20
 8005900:	d101      	bne.n	8005906 <floor+0xce>
 8005902:	3401      	adds	r4, #1
 8005904:	e006      	b.n	8005914 <floor+0xdc>
 8005906:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800590a:	2301      	movs	r3, #1
 800590c:	40b3      	lsls	r3, r6
 800590e:	441d      	add	r5, r3
 8005910:	4545      	cmp	r5, r8
 8005912:	d3f6      	bcc.n	8005902 <floor+0xca>
 8005914:	ea25 0507 	bic.w	r5, r5, r7
 8005918:	e7b2      	b.n	8005880 <floor+0x48>
 800591a:	2500      	movs	r5, #0
 800591c:	462c      	mov	r4, r5
 800591e:	e7af      	b.n	8005880 <floor+0x48>
 8005920:	8800759c 	.word	0x8800759c
 8005924:	7e37e43c 	.word	0x7e37e43c
 8005928:	bff00000 	.word	0xbff00000
 800592c:	000fffff 	.word	0x000fffff

08005930 <_init>:
 8005930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005932:	bf00      	nop
 8005934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005936:	bc08      	pop	{r3}
 8005938:	469e      	mov	lr, r3
 800593a:	4770      	bx	lr

0800593c <_fini>:
 800593c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800593e:	bf00      	nop
 8005940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005942:	bc08      	pop	{r3}
 8005944:	469e      	mov	lr, r3
 8005946:	4770      	bx	lr
